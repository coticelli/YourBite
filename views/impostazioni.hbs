<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>YourBite - Impostazioni</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
    <!-- Rimuoviamo Spectrum, non strettamente necessario per la simulazione base -->
    <!-- <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/spectrum-colorpicker2/dist/spectrum.min.css"> -->
    <style>
        /* === VARIABILI E IMPOSTAZIONI BASE === */
        :root {
            --primary: #5e60ce;
            --primary-light: #6930c3;
            --primary-dark: #5390d9;
            --secondary: #48bfe3;
            --secondary-light: #64dfdf;
            --accent: #80ffdb;
            --accent-green: #2ecc71;
            --accent-red: #e74c3c;
            --accent-orange: #f39c12;
            --accent-purple: #9b59b6;
            --accent-yellow: #f1c40f;
            --dark: #1a1a2e;
            --dark-blue: #16213e;
            --medium-dark: #252941;
            --light: #ffffff;
            --gray: #f8f9fa;
            --gray-light: #fafbfc;
            --gray-dark: #e9ecef;
            --text: #212529;
            --text-light: #6c757d;
            --shadow: 0 10px 30px rgba(0, 0, 0, 0.08); /* Slightly softer shadow */
            --shadow-lg: 0 20px 40px rgba(0, 0, 0, 0.12);
            --shadow-colored: 0 8px 25px rgba(94, 96, 206, 0.2);
            --radius: 16px;
            --radius-sm: 10px;
            --radius-lg: 24px;
            --radius-xl: 30px;
            --transition-fast: all 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);
            --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
            --transition-spring: all 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55);
        }

        * { margin: 0; padding: 0; box-sizing: border-box; font-family: 'Montserrat', 'Arial', sans-serif; scroll-behavior: smooth; }
        body { background-color: var(--gray); background-image: radial-gradient(circle at 25% 10%, rgba(94, 96, 206, 0.03) 0%, transparent 40%), radial-gradient(circle at 75% 75%, rgba(72, 191, 227, 0.03) 0%, transparent 40%); color: var(--text); min-height: 100vh; display: flex; flex-direction: column; overflow-x: hidden; }

        /* === UTILITIES === */
        .text-gradient { background: linear-gradient(120deg, var(--primary), var(--secondary)); -webkit-background-clip: text; -webkit-text-fill-color: transparent; display: inline-block; }
        .hidden { display: none !important; }

        /* === HEADER E NAVIGAZIONE === (Stili compressi per brevit√†, mantenere quelli originali) */
        header { background: linear-gradient(135deg, var(--primary), var(--primary-dark)); padding: 0; box-shadow: var(--shadow-colored); position: sticky; top: 0; z-index: 100; height: 70px; display: flex; align-items: center; }
        .header-container { display: flex; justify-content: space-between; align-items: center; width: 100%; max-width: 1600px; margin: 0 auto; padding: 0 25px; }
        .logo-container { display: flex; align-items: center; gap: 16px; }
        .logo { width: 42px; height: 42px; border-radius: 12px; object-fit: cover; border: 2px solid rgba(255, 255, 255, 0.4); }
        .header-title { color: white; font-size: 1.5rem; font-weight: 700; margin: 0; text-shadow: 0 2px 4px rgba(0, 0, 0, 0.15); }
        .header-nav { display: flex; gap: 8px; align-items: center; }
        .header-nav a { color: white; text-decoration: none; font-weight: 500; padding: 10px 16px; border-radius: 12px; transition: all 0.3s cubic-bezier(0.34, 1.56, 0.64, 1); font-size: 14px; background-color: rgba(255, 255, 255, 0.05); border: 1px solid rgba(255, 255, 255, 0.1); display: flex; align-items: center; gap: 6px; backdrop-filter: blur(5px); }
        .header-nav a:hover { background-color: rgba(255, 255, 255, 0.15); transform: translateY(-3px); }
        .header-nav a.active { background-color: rgba(255, 255, 255, 0.2); font-weight: 600; border-color: rgba(255, 255, 255, 0.4); }
        .user-controls { display: flex; align-items: center; }
        .username { color: white; font-weight: 500; margin-right: 15px; }
        .logout-btn { background: rgba(255, 255, 255, 0.15); border: 1px solid rgba(255, 255, 255, 0.3); color: white; padding: 8px 15px; border-radius: var(--radius-sm); cursor: pointer; font-size: 14px; font-weight: 500; transition: var(--transition-spring); display: flex; align-items: center; gap: 5px; }
        .logout-btn:hover { background: rgba(255, 255, 255, 0.25); transform: translateY(-3px); }

        /* === PARTICLES BACKGROUND & SCROLLBAR === (Stili compressi) */
        .particles { position: fixed; top: 0; left: 0; width: 100%; height: 100%; z-index: -1; pointer-events: none; overflow: hidden; }
        .particle { position: absolute; width: 5px; height: 5px; background-color: rgba(94, 96, 206, 0.08); border-radius: 50%; animation: particleFloat 45s infinite alternate ease-in-out, particleFade 60s infinite alternate ease-in-out; }
        @keyframes particleFloat { 0% { transform: translate(0, 0); } 100% { transform: translate(calc(var(--x, 0) * 1px), calc(var(--y, 0) * 1px)); } }
        @keyframes particleFade { 0% { opacity: 0.05; } 50% { opacity: 0.15; } 100% { opacity: 0.05; } }
        ::-webkit-scrollbar { width: 8px; height: 8px; } ::-webkit-scrollbar-track { background: var(--gray-light); border-radius: 10px; } ::-webkit-scrollbar-thumb { background: linear-gradient(var(--primary-light), var(--primary)); border-radius: 10px; } ::-webkit-scrollbar-thumb:hover { background: linear-gradient(var(--primary), var(--primary-dark)); }

        /* === SETTINGS CONTAINER === */
        .settings-container { padding: 30px 25px; max-width: 1400px; margin: 30px auto; width: 100%; animation: fadeIn 0.6s ease-out; }
        @keyframes fadeIn { from { opacity: 0; transform: translateY(20px); } to { opacity: 1; transform: translateY(0); } }
        .settings-header { margin-bottom: 30px; }
        .settings-header h1 { font-size: 32px; font-weight: 700; margin-bottom: 10px; position: relative; display: inline-block; }
        .settings-header h1::after { content: ''; position: absolute; width: 50%; height: 4px; background: linear-gradient(90deg, var(--primary), var(--secondary)); bottom: -8px; left: 0; border-radius: 2px; }
        .settings-header p { font-size: 16px; color: var(--text-light); font-weight: 500; }

        /* === SETTINGS GRID & NAVIGATION === */
        .settings-grid { display: grid; grid-template-columns: 280px 1fr; gap: 30px; }
        .settings-nav { background: white; border-radius: var(--radius); overflow: hidden; box-shadow: var(--shadow); position: sticky; top: 100px; /* Increased top for sticky header */ height: fit-content; max-height: calc(100vh - 130px); border: 1px solid var(--gray-dark); }
        .settings-nav-header { padding: 20px 25px; background: linear-gradient(135deg, var(--primary-light), var(--primary)); color: white; }
        .settings-nav-header h3 { margin: 0; font-size: 18px; font-weight: 600; display: flex; align-items: center; gap: 10px; }
        .settings-nav ul { list-style-type: none; padding: 15px 0; margin: 0; }
        .settings-nav li { padding: 0; margin: 0; }
        .settings-nav-item { display: flex; align-items: center; gap: 12px; padding: 14px 25px; cursor: pointer; transition: var(--transition); position: relative; color: var(--text); font-weight: 500; font-size: 15px; }
        .settings-nav-item:hover { background-color: rgba(94, 96, 206, 0.05); color: var(--primary); }
        .settings-nav-item i { font-size: 18px; width: 24px; text-align: center; transition: var(--transition-spring); }
        .settings-nav-item.active { background-color: rgba(94, 96, 206, 0.1); color: var(--primary); font-weight: 600; }
        .settings-nav-item.active::before { content: ''; position: absolute; left: 0; top: 0; bottom: 0; width: 4px; background: linear-gradient(to bottom, var(--primary-light), var(--primary)); border-radius: 0 2px 2px 0; }
        .settings-nav-item.active i { transform: scale(1.1); }
        .settings-nav-item .badge { background: var(--accent-red); color: white; font-size: 11px; font-weight: 600; padding: 3px 6px; border-radius: 10px; margin-left: auto; }

        /* === SETTINGS CONTENT & SECTION === */
        .settings-content { background: transparent; }
        .settings-section { background: white; border-radius: var(--radius); overflow: hidden; box-shadow: var(--shadow); margin-bottom: 30px; border: 1px solid var(--gray-dark); display: none; /* Hide by default */ animation: fadeInSection 0.5s ease-out; }
        .settings-section.active { display: block; /* Show active section */ }
        @keyframes fadeInSection { from { opacity: 0; transform: scale(0.98); } to { opacity: 1; transform: scale(1); } }
        .settings-section-header { padding: 20px 25px; border-bottom: 1px solid var(--gray-dark); /* Header border */ background: var(--gray-light); /* Lighter header */ }
        .settings-section-header h2 { margin: 0; font-size: 20px; font-weight: 600; display: flex; align-items: center; gap: 10px; color: var(--primary); /* Primary color title */ }
        .settings-section-header h2 i { font-size: 20px; }
        .settings-section-body { padding: 30px 25px; }
        .settings-section-footer { padding: 20px 25px; border-top: 1px solid var(--gray-dark); display: flex; justify-content: flex-end; gap: 15px; background: var(--gray-light); }

        /* === FORM ELEMENTS === */
        .form-row { display: flex; margin-bottom: 25px; gap: 20px; flex-wrap: wrap; }
        .form-col { flex: 1; min-width: 250px; }
        .form-group { margin-bottom: 25px; } .form-group:last-child { margin-bottom: 0; }
        .form-label { display: block; margin-bottom: 10px; font-weight: 600; font-size: 15px; color: var(--text); }
        .form-hint { display: block; margin-top: 5px; font-size: 13px; color: var(--text-light); }
        .form-input, select.form-input, textarea.form-input { width: 100%; padding: 12px 15px; border: 1px solid var(--gray-dark); border-radius: var(--radius-sm); font-size: 15px; transition: var(--transition); background-color: white; }
        .form-input:focus, select.form-input:focus, textarea.form-input:focus { border-color: var(--primary); box-shadow: 0 0 0 3px rgba(94, 96, 206, 0.1); outline: none; }
        select.form-input { appearance: none; background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3e%3cpath fill='none' stroke='%23343a40' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M2 5l6 6 6-6'/%3e%3c/svg%3e"); background-repeat: no-repeat; background-position: right 0.75rem center; background-size: 16px 12px; padding-right: 2.5rem; }
        textarea.form-input { resize: vertical; min-height: 100px; }
        .input-group { position: relative; }
        .input-group .form-input { padding-right: 40px; }
        .input-group-icon { position: absolute; right: 15px; top: 50%; transform: translateY(-50%); color: var(--text-light); font-size: 16px; pointer-events: none; }
        .form-input:focus + .input-group-icon { color: var(--primary); }

        /* === SWITCH === */
        .switch-container { display: flex; justify-content: space-between; align-items: center; padding: 15px 0; border-bottom: 1px solid var(--gray-dark); }
        .switch-container:last-of-type { border-bottom: none; padding-bottom: 0; }
        .switch-info { flex: 1; padding-right: 15px; }
        .switch-label { font-weight: 600; color: var(--text); display: block; margin-bottom: 5px; }
        .switch-description { font-size: 13px; color: var(--text-light); }
        .switch { position: relative; display: inline-block; width: 50px; height: 26px; flex-shrink: 0; }
        .switch input { opacity: 0; width: 0; height: 0; position: absolute; }
        .switch-slider { position: absolute; cursor: pointer; top: 0; left: 0; right: 0; bottom: 0; background-color: var(--gray-dark); transition: var(--transition); border-radius: 34px; }
        .switch-slider:before { position: absolute; content: ""; height: 18px; width: 18px; left: 4px; bottom: 4px; background-color: white; transition: var(--transition-spring); border-radius: 50%; box-shadow: 0 1px 3px rgba(0,0,0,0.2); }
        input:checked + .switch-slider { background: linear-gradient(135deg, var(--primary), var(--primary-light)); }
        input:checked + .switch-slider:before { transform: translateX(24px); }

        /* === BUTTONS === */
        .btn { padding: 12px 25px; border-radius: var(--radius-sm); font-size: 15px; font-weight: 600; cursor: pointer; transition: var(--transition-spring); display: inline-flex; align-items: center; justify-content: center; gap: 8px; border: none; position: relative; overflow: hidden; text-decoration: none; }
        .btn i { transition: transform 0.3s ease; }
        .btn:hover i { transform: scale(1.1); }
        .btn:disabled { opacity: 0.6; cursor: not-allowed; }
        .btn-primary { background: linear-gradient(135deg, var(--primary), var(--primary-light)); color: white; box-shadow: 0 4px 15px rgba(94, 96, 206, 0.2); }
        .btn-primary:hover:not(:disabled) { transform: translateY(-3px) scale(1.02); box-shadow: 0 7px 20px rgba(94, 96, 206, 0.3); }
        .btn-secondary { background: white; color: var(--text); border: 1px solid var(--gray-dark); }
        .btn-secondary:hover:not(:disabled) { transform: translateY(-3px) scale(1.02); box-shadow: var(--shadow); border-color: var(--primary-light); color: var(--primary); }
        .btn-danger { background: linear-gradient(135deg, #e74c3c, #c0392b); color: white; box-shadow: 0 4px 15px rgba(231, 76, 60, 0.2); }
        .btn-danger:hover:not(:disabled) { transform: translateY(-3px) scale(1.02); box-shadow: 0 7px 20px rgba(231, 76, 60, 0.3); }
        .btn-success { background: linear-gradient(135deg, #2ecc71, #27ae60); color: white; box-shadow: 0 4px 15px rgba(46, 204, 113, 0.2); }
        .btn-success:hover:not(:disabled) { transform: translateY(-3px) scale(1.02); box-shadow: 0 7px 20px rgba(46, 204, 113, 0.3); }
        .btn-block { width: 100%; }

        /* === FILE UPLOAD === */
        .upload-container { margin-bottom: 20px; }
        .upload-box { border: 2px dashed var(--gray-dark); border-radius: var(--radius); padding: 30px; text-align: center; transition: var(--transition); cursor: pointer; position: relative; background-color: var(--gray-light); }
        .upload-box:hover { border-color: var(--primary); background-color: rgba(94, 96, 206, 0.05); }
        .upload-icon { font-size: 36px; color: var(--primary); margin-bottom: 15px; }
        .upload-text { color: var(--text); font-weight: 500; margin-bottom: 5px; }
        .upload-hint { font-size: 13px; color: var(--text-light); }
        .upload-input { position: absolute; width: 100%; height: 100%; top: 0; left: 0; opacity: 0; cursor: pointer; }
        .preview-container { display: flex; flex-wrap: wrap; gap: 15px; margin-top: 15px; }
        .preview-item { position: relative; width: 100px; height: 100px; border-radius: var(--radius-sm); overflow: hidden; box-shadow: var(--shadow); transition: var(--transition-spring); border: 1px solid var(--gray-dark); }
        .preview-item:hover { transform: scale(1.05); box-shadow: var(--shadow-lg); }
        .preview-image { width: 100%; height: 100%; object-fit: cover; }
        .preview-remove { position: absolute; top: 5px; right: 5px; background: rgba(231, 76, 60, 0.8); color: white; border: none; width: 22px; height: 22px; border-radius: 50%; cursor: pointer; font-size: 11px; display: flex; align-items: center; justify-content: center; transition: var(--transition); }
        .preview-remove:hover { background: var(--accent-red); transform: scale(1.1); }

        /* === COLOR PICKER === */
        .color-options { display: flex; flex-wrap: wrap; gap: 12px; margin-top: 10px; }
        .color-option { width: 32px; height: 32px; border-radius: 50%; cursor: pointer; transition: var(--transition-spring); border: 3px solid transparent; position: relative; box-shadow: 0 2px 5px rgba(0,0,0,0.1); }
        .color-option:hover { transform: scale(1.1); }
        .color-option.selected { border-color: var(--primary); box-shadow: 0 0 0 3px var(--primary); }
        .color-primary { background: var(--primary); } .color-blue { background: #3498db; } .color-green { background: #2ecc71; } .color-purple { background: #9b59b6; } .color-orange { background: #e67e22; } .color-red { background: #e74c3c; }
        .color-custom { background: linear-gradient(135deg, #f1c40f, #e74c3c, #3498db, #2ecc71); }

        /* === SCHEDULE SETTINGS === */
        .schedule-container { margin-bottom: 25px; }
        .schedule-day { display: flex; align-items: center; margin-bottom: 20px; padding-bottom: 20px; border-bottom: 1px solid var(--gray-dark); flex-wrap: wrap; /* Allow wrapping */ }
        .schedule-day:last-child { margin-bottom: 0; padding-bottom: 0; border-bottom: none; }
        .day-toggle { margin-right: 20px; flex-shrink: 0; /* Prevent shrinking */ }
        .day-name { width: 100px; font-weight: 600; flex-shrink: 0; margin-bottom: 10px; /* Add margin for wrap */ }
        .day-hours { display: flex; flex-wrap: wrap; gap: 15px; flex-grow: 1; align-items: center; }
        .time-slot { display: flex; align-items: center; gap: 5px; background-color: var(--gray-light); padding: 8px; border-radius: var(--radius-sm); }
        .time-input { width: 90px; padding: 8px 10px; }
        .remove-hours-btn { background: transparent; border: none; color: var(--accent-red); cursor: pointer; padding: 5px; font-size: 16px; transition: var(--transition); }
        .remove-hours-btn:hover { color: #c0392b; transform: scale(1.1); }
        .add-hours-btn { background: transparent; border: 1px dashed var(--primary); color: var(--primary); cursor: pointer; display: inline-flex; align-items: center; gap: 5px; font-weight: 500; transition: var(--transition); padding: 8px 12px; border-radius: var(--radius-sm); margin-top: 10px; /* Add margin when wrapped */ }
        .add-hours-btn:hover { background: rgba(94, 96, 206, 0.05); border-style: solid; }

        /* === PAYMENT METHODS === */
        .payment-methods { display: grid; grid-template-columns: repeat(auto-fill, minmax(180px, 1fr)); gap: 20px; margin-bottom: 25px; }
        .payment-method { background: var(--gray-light); border-radius: var(--radius-sm); padding: 20px; text-align: center; transition: var(--transition-spring); cursor: pointer; position: relative; overflow: hidden; border: 1px solid var(--gray-dark); }
        .payment-method:hover { transform: translateY(-5px); box-shadow: var(--shadow); background: white; }
        .payment-method.active { background: white; box-shadow: var(--shadow); border: 2px solid var(--primary); }
        .payment-method.active::after { content: "\f00c"; font-family: "Font Awesome 6 Free"; font-weight: 900; position: absolute; top: 10px; right: 10px; background: var(--primary); color: white; width: 20px; height: 20px; border-radius: 50%; display: flex; align-items: center; justify-content: center; font-size: 10px; }
        .payment-icon { font-size: 30px; color: var(--primary); margin-bottom: 15px; }
        .payment-name { font-weight: 600; margin-bottom: 5px; }
        .payment-description { font-size: 12px; color: var(--text-light); }

        /* === USER MANAGEMENT === */
        .user-list { margin-bottom: 25px; }
        .user-item { display: flex; align-items: center; padding: 15px; border-radius: var(--radius-sm); margin-bottom: 15px; background: var(--gray-light); transition: var(--transition); border: 1px solid var(--gray-dark); }
        .user-item:hover { background: white; box-shadow: var(--shadow); transform: translateX(5px); }
        .user-avatar { width: 50px; height: 50px; border-radius: 50%; overflow: hidden; margin-right: 15px; border: 2px solid var(--gray); flex-shrink: 0; background-color: var(--gray); /* Placeholder background */ }
        .user-item:hover .user-avatar { border-color: var(--primary); }
        .user-avatar img { width: 100%; height: 100%; object-fit: cover; }
        .user-info { flex-grow: 1; min-width: 0; } /* Prevent shrinking/overflow */
        .user-name { font-weight: 600; margin-bottom: 3px; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; }
        .user-role { font-size: 13px; color: var(--text-light); white-space: nowrap; overflow: hidden; text-overflow: ellipsis; }
        .user-actions { display: flex; gap: 8px; flex-shrink: 0; margin-left: 15px; }
        .user-action { width: 35px; height: 35px; border-radius: var(--radius-sm); display: flex; align-items: center; justify-content: center; background: white; color: var(--text-light); border: 1px solid var(--gray-dark); cursor: pointer; transition: var(--transition-spring); }
        .user-action:hover { transform: translateY(-2px) scale(1.05); }
        .user-action.edit:hover { background: var(--primary); color: white; border-color: var(--primary); }
        .user-action.delete:hover { background: var(--accent-red); color: white; border-color: var(--accent-red); }
        .add-user-btn { width: 100%; padding: 15px; border-radius: var(--radius-sm); border: 2px dashed var(--gray-dark); background: transparent; cursor: pointer; display: flex; align-items: center; justify-content: center; gap: 10px; font-weight: 600; color: var(--text); transition: var(--transition); }
        .add-user-btn:hover { border-color: var(--primary); color: var(--primary); background: rgba(94, 96, 206, 0.05); border-style: solid; }

        /* === THEME PREVIEW === */
        .theme-preview { background: white; border-radius: var(--radius); overflow: hidden; box-shadow: var(--shadow); margin-bottom: 25px; border: 1px solid var(--gray-dark); }
        .theme-header { background: linear-gradient(135deg, var(--theme-primary, var(--primary)), var(--theme-primary-dark, var(--primary-dark))); height: 50px; padding: 0 15px; display: flex; align-items: center; justify-content: space-between; }
        .theme-logo { display: flex; align-items: center; gap: 8px; color: white; font-weight: 600; font-size: 16px; }
        .theme-logo i { font-size: 18px; }
        .theme-nav { display: flex; gap: 8px; }
        .theme-nav-item { width: 25px; height: 4px; background: rgba(255, 255, 255, 0.5); border-radius: 3px; }
        .theme-nav-item:first-child { background: white; }
        .theme-body { padding: 15px; display: flex; gap: 10px; }
        .theme-sidebar { width: 60px; height: 120px; background: var(--gray-light); border-radius: var(--radius-sm); }
        .theme-content { flex-grow: 1; height: 120px; display: flex; flex-direction: column; gap: 10px; }
        .theme-box { height: 30px; background: var(--gray-light); border-radius: var(--radius-sm); }
        .theme-grid { display: flex; gap: 10px; flex-grow: 1; }
        .theme-card { flex: 1; background: var(--gray-light); border-radius: var(--radius-sm); }

        /* === SECURITY SECTION === */
        .security-status { display: flex; align-items: center; padding: 15px; border-radius: var(--radius-sm); margin-bottom: 25px; color: white; }
        .security-status.success { background: linear-gradient(135deg, #2ecc71, #27ae60); }
        .security-status.warning { background: linear-gradient(135deg, #f39c12, #e67e22); }
        .security-status.danger { background: linear-gradient(135deg, #e74c3c, #c0392b); }
        .security-status-icon { width: 45px; height: 45px; border-radius: 50%; background: rgba(255, 255, 255, 0.15); display: flex; align-items: center; justify-content: center; margin-right: 15px; font-size: 22px; flex-shrink: 0; }
        .security-status-info h3 { font-size: 16px; margin-bottom: 5px; font-weight: 600; }
        .security-status-info p { font-size: 13px; opacity: 0.9; margin: 0; }
        .password-strength { height: 6px; background: var(--gray-dark); border-radius: 3px; margin-top: 10px; overflow: hidden; }
        .password-strength-bar { height: 100%; width: 0%; background: var(--accent-red); border-radius: 3px; transition: width 0.3s ease, background-color 0.3s ease; }
        .password-strength-bar.weak { width: 33%; background: var(--accent-red); }
        .password-strength-bar.medium { width: 66%; background: var(--accent-orange); }
        .password-strength-bar.strong { width: 100%; background: var(--accent-green); }

        /* === TOAST NOTIFICATION === (Stili compressi) */
        .toast-notification { position: fixed; bottom: 20px; right: 20px; background: white; border-radius: var(--radius); padding: 15px 20px; box-shadow: var(--shadow-lg); z-index: 1000; display: flex; align-items: center; gap: 15px; transform: translateY(100px); opacity: 0; transition: all 0.4s cubic-bezier(0.34, 1.56, 0.64, 1); max-width: 350px; border-left: 5px solid var(--primary); }
        .toast-notification.show { transform: translateY(0); opacity: 1; }
        .toast-success { border-left-color: var(--accent-green); } .toast-error { border-left-color: var(--accent-red); } .toast-warning { border-left-color: var(--accent-orange); } .toast-info { border-left-color: var(--primary); }
        .toast-icon { width: 35px; height: 35px; border-radius: 50%; display: flex; align-items: center; justify-content: center; font-size: 18px; flex-shrink: 0; }
        .toast-success .toast-icon { background-color: rgba(46, 204, 113, 0.1); color: var(--accent-green); } .toast-error .toast-icon { background-color: rgba(231, 76, 60, 0.1); color: var(--accent-red); } .toast-warning .toast-icon { background-color: rgba(243, 156, 18, 0.1); color: var(--accent-orange); } .toast-info .toast-icon { background-color: rgba(94, 96, 206, 0.1); color: var(--primary); }
        .toast-content { flex-grow: 1; } .toast-title { font-weight: 600; margin-bottom: 3px; font-size: 15px; } .toast-message { font-size: 14px; color: var(--text-light); }
        .toast-close { cursor: pointer; font-size: 18px; color: var(--text-light); transition: var(--transition); padding: 5px; background: none; border: none; } .toast-close:hover { color: var(--text); }

        /* === NUOVE SEZIONI STILI === */
        .integration-list { display: grid; grid-template-columns: repeat(auto-fill, minmax(250px, 1fr)); gap: 20px; }
        .integration-item { background: var(--gray-light); border: 1px solid var(--gray-dark); border-radius: var(--radius); padding: 20px; display: flex; flex-direction: column; align-items: center; text-align: center; transition: var(--transition); }
        .integration-item:hover { box-shadow: var(--shadow); transform: translateY(-5px); background: white; }
        .integration-icon { font-size: 36px; margin-bottom: 15px; color: var(--primary); width: 60px; height: 60px; background-color: white; border-radius: 50%; display: flex; align-items: center; justify-content: center; box-shadow: 0 4px 10px rgba(0,0,0,0.05); }
        .integration-name { font-weight: 600; margin-bottom: 8px; font-size: 16px; }
        .integration-desc { font-size: 13px; color: var(--text-light); margin-bottom: 15px; flex-grow: 1; }
        .integration-status { font-size: 12px; font-weight: 600; padding: 4px 8px; border-radius: 20px; margin-bottom: 15px; }
        .integration-status.connected { background-color: rgba(46, 204, 113, 0.1); color: var(--accent-green); }
        .integration-status.disconnected { background-color: rgba(231, 76, 60, 0.1); color: var(--accent-red); }
        .backup-options { display: flex; flex-direction: column; gap: 20px; }
        .backup-option { background: var(--gray-light); border: 1px solid var(--gray-dark); padding: 20px; border-radius: var(--radius); display: flex; justify-content: space-between; align-items: center; flex-wrap: wrap; gap: 15px; }
        .backup-info p { margin: 0; font-size: 14px; color: var(--text-light); }
        .backup-info strong { display: block; margin-bottom: 5px; font-size: 16px; }
        .backup-actions { display: flex; gap: 10px; }
        .progress-bar-container { width: 100%; height: 8px; background: var(--gray-dark); border-radius: 4px; overflow: hidden; margin-top: 10px; display: none; }
        .progress-bar-fill { height: 100%; background: linear-gradient(90deg, var(--primary-light), var(--primary)); width: 0%; transition: width 0.5s ease; border-radius: 4px; }
        .advanced-warning { background-color: rgba(243, 156, 18, 0.1); border: 1px solid var(--accent-orange); color: var(--accent-orange); padding: 15px; border-radius: var(--radius-sm); margin-bottom: 25px; display: flex; align-items: center; gap: 10px; }
        .advanced-warning i { font-size: 20px; }

        /* === RESPONSIVE DESIGN === (Stili compressi) */
        @media (max-width: 1200px) { .header-nav a span { display: none; } .header-nav a { padding: 10px; font-size: 16px; justify-content: center; } .header-nav a i { margin: 0; } }
        @media (max-width: 992px) { header { height: auto; padding: 10px 0; } .header-container { flex-wrap: wrap; justify-content: center; gap: 10px; } .logo-container, .user-controls { margin: 0 auto; } .settings-container { padding: 20px 15px; } .settings-grid { grid-template-columns: 1fr; gap: 20px; } .settings-nav { position: relative; top: 0; max-height: none; margin-bottom: 20px; } .payment-methods { grid-template-columns: repeat(auto-fill, minmax(150px, 1fr)); } }
        @media (max-width: 768px) { .header-container { padding: 0 15px; flex-direction: column; gap: 15px; } .header-nav { flex-wrap: wrap; justify-content: center; gap: 8px; margin: 10px 0; } .logo-container, .user-controls { width: 100%; justify-content: center; } .form-row { flex-direction: column; gap: 15px; } .form-col { min-width: 100%; } .schedule-day { flex-wrap: wrap; } .day-hours { width: 100%; margin-top: 10px; } .day-name { width: auto; margin-left: 10px; } }
        @media (max-width: 480px) { .settings-header h1 { font-size: 24px; } .settings-section-body, .settings-section-footer { padding: 20px 15px; } .settings-section-footer { flex-direction: column; } .btn { width: 100%; } .payment-methods { grid-template-columns: 1fr; } .user-item { flex-direction: column; align-items: flex-start; } .user-actions { margin-top: 10px; margin-left: 0; } }

    </style>
</head>
<body class="capo-role">
    <!-- Particle Background -->
    <div class="particles" id="particles"></div>

     <!-- Header -->
    <header>
        <div class="header-container">
            <div class="logo-container">
                <img src="/img/logo.png" alt="YourBite Logo" class="logo">
                <h1 class="header-title">YourBite</h1>
            </div>
            <div class="header-nav">
                 <a href="/homepage_capo" class="home-button"><i class="fas fa-home"></i> <span>Homepage</span></a>
                 <a href="/dashboard"><i class="fas fa-chart-line"></i> <span>Dashboard</span></a>
                 <a href="/ordini"><i class="fas fa-shopping-bag"></i> <span>Ordini</span></a>
                 <a href="/menu"><i class="fas fa-utensils"></i> <span>Menu</span></a>
                 <a href="/clienti"><i class="fas fa-users"></i> <span>Clienti</span></a>
                 <a href="/impostazioni" class="active"><i class="fas fa-cog"></i> <span>Impostazioni</span></a>
            </div>
            <div class="user-controls">
                 <span class="username">{{user.username}}</span> <!-- Assicurati che user.username sia passato dal backend -->
                 <button class="logout-btn" id="logoutBtnHeader">
                     <i class="fas fa-sign-out-alt"></i> Logout
                 </button>
             </div>
        </div>
    </header>

    <div class="settings-container">
        <div class="settings-header animate-in">
            <h1 class="text-gradient">Impostazioni</h1>
            <p>Configura e personalizza il tuo locale per un'esperienza ottimale</p>
        </div>

        <div class="settings-grid">
            <!-- Settings Navigation -->
            <nav class="settings-nav animate-in">
                <div class="settings-nav-header">
                    <h3><i class="fas fa-sliders-h"></i> Configurazione</h3>
                </div>
                <ul>
                    <li class="settings-nav-item active" data-target="profile"> <i class="fas fa-store"></i> <span>Profilo Locale</span> </li>
                    <li class="settings-nav-item" data-target="schedule"> <i class="fas fa-clock"></i> <span>Orari di Apertura</span> </li>
                    <li class="settings-nav-item" data-target="payments"> <i class="fas fa-credit-card"></i> <span>Pagamenti</span> </li>
                    <li class="settings-nav-item" data-target="notifications"> <i class="fas fa-bell"></i> <span>Notifiche</span> </li>
                    <li class="settings-nav-item" data-target="users"> <i class="fas fa-user-friends"></i> <span>Gestione Utenti</span> </li>
                    <li class="settings-nav-item" data-target="appearance"> <i class="fas fa-paint-brush"></i> <span>Aspetto</span> </li>
                    <li class="settings-nav-item" data-target="security"> <i class="fas fa-shield-alt"></i> <span>Sicurezza</span> </li>
                    <li class="settings-nav-item" data-target="mobile"> <i class="fas fa-mobile-alt"></i> <span>App Mobile</span> </li>
                    <li class="settings-nav-item" data-target="integrations"> <i class="fas fa-plug"></i> <span>Integrazioni</span> </li>
                    <li class="settings-nav-item" data-target="backup"> <i class="fas fa-database"></i> <span>Backup & Ripristino</span> </li>
                    <li class="settings-nav-item" data-target="advanced"> <i class="fas fa-tools"></i> <span>Avanzate</span> </li>
                </ul>
            </nav>

            <!-- Settings Content -->
            <div class="settings-content">
                <!-- Profile Section -->
                <section class="settings-section active" id="profile-section">
                    <div class="settings-section-header"><h2><i class="fas fa-store"></i> Profilo Locale</h2></div>
                    <div class="settings-section-body">
                        <!-- Contenuto Profilo Locale (come prima, ma con ID univoci se necessario) -->
                         <div class="form-row">
                             <div class="form-col">
                                 <div class="form-group">
                                     <label class="form-label" for="locale-nome">Nome del Locale</label>
                                     <div class="input-group">
                                         <input type="text" id="locale-nome" class="form-input" value="Fast Food da Mario" placeholder="Nome del locale">
                                         <i class="input-group-icon fas fa-store"></i>
                                     </div>
                                 </div>
                             </div>
                              <div class="form-col">
                                 <div class="form-group">
                                     <label class="form-label" for="locale-categoria">Categoria</label>
                                     <div class="input-group">
                                         <select id="locale-categoria" class="form-input">
                                             <option>Fast Food</option> <option>Ristorante</option> <option>Pizzeria</option> <option>Gelateria</option> <option>Caffetteria</option> <option>Pub & Birreria</option> <option>Altro</option>
                                         </select>
                                         <i class="input-group-icon fas fa-utensils"></i>
                                     </div>
                                 </div>
                             </div>
                         </div>
                         <div class="form-group">
                             <label class="form-label" for="locale-indirizzo">Indirizzo</label>
                             <div class="input-group">
                                 <input type="text" id="locale-indirizzo" class="form-input" value="Via Roma 123, Milano" placeholder="Indirizzo completo">
                                 <i class="input-group-icon fas fa-map-marker-alt"></i>
                             </div>
                         </div>
                         <div class="form-row">
                            <div class="form-col"><div class="form-group"><label class="form-label" for="locale-telefono">Telefono</label><div class="input-group"><input type="text" id="locale-telefono" class="form-input" value="+39 02 1234567" placeholder="Numero di telefono"><i class="input-group-icon fas fa-phone"></i></div></div></div>
                            <div class="form-col"><div class="form-group"><label class="form-label" for="locale-email">Email</label><div class="input-group"><input type="email" id="locale-email" class="form-input" value="info@fastfoodmario.it" placeholder="Email di contatto"><i class="input-group-icon fas fa-envelope"></i></div></div></div>
                         </div>
                         <div class="form-group"><label class="form-label" for="locale-descrizione">Descrizione</label><textarea id="locale-descrizione" class="form-input" rows="4" placeholder="Descrivi il tuo locale...">Fast Food da Mario...</textarea></div>
                         <div class="form-row">
                            <div class="form-col"><div class="form-group"><label class="form-label">Logo</label><div class="upload-container" id="logo-upload"><div class="upload-box"><i class="upload-icon fas fa-cloud-upload-alt"></i><div class="upload-text">Carica logo</div><div class="upload-hint">PNG, JPG (max 2MB)</div><input type="file" class="upload-input" accept="image/*"></div><div class="preview-container"><div class="preview-item"><img src="/img/logo.png" alt="Logo Preview" class="preview-image"><button class="preview-remove">&times;</button></div></div></div></div></div>
                            <div class="form-col"><div class="form-group"><label class="form-label">Immagini Locale</label><div class="upload-container" id="images-upload"><div class="upload-box"><i class="upload-icon fas fa-images"></i><div class="upload-text">Carica immagini</div><div class="upload-hint">PNG, JPG (max 5MB)</div><input type="file" class="upload-input" multiple accept="image/*"></div><div class="preview-container"><div class="preview-item"><img src="https://source.unsplash.com/random/100x100/?restaurant" alt="Preview" class="preview-image"><button class="preview-remove">&times;</button></div></div></div></div></div>
                        </div>
                        <div class="form-group"><label class="form-label">Impostazioni Visualizzazione</label>
                            <div class="switch-container"><div class="switch-info"><span class="switch-label">Mostra prezzi IVA inclusa</span><span class="switch-description">...</span></div><label class="switch"><input type="checkbox" id="setting-iva" checked><span class="switch-slider"></span></label></div>
                            <div class="switch-container"><div class="switch-info"><span class="switch-label">Mostra ingredienti</span><span class="switch-description">...</span></div><label class="switch"><input type="checkbox" id="setting-ingredienti" checked><span class="switch-slider"></span></label></div>
                            <div class="switch-container"><div class="switch-info"><span class="switch-label">Mostra valori nutrizionali</span><span class="switch-description">...</span></div><label class="switch"><input type="checkbox" id="setting-nutrizionali"><span class="switch-slider"></span></label></div>
                            <div class="switch-container"><div class="switch-info"><span class="switch-label">Mostra allergeni</span><span class="switch-description">...</span></div><label class="switch"><input type="checkbox" id="setting-allergeni" checked><span class="switch-slider"></span></label></div>
                        </div>
                    </div>
                    <div class="settings-section-footer">
                        <button class="btn btn-secondary btn-reset" data-section="profile"> <i class="fas fa-undo"></i> Ripristina </button>
                        <button class="btn btn-primary btn-save" data-section="profile"> <i class="fas fa-save"></i> Salva Modifiche </button>
                    </div>
                </section>

                <!-- Schedule Section -->
                <section class="settings-section" id="schedule-section">
                    <div class="settings-section-header"><h2><i class="fas fa-clock"></i> Orari di Apertura</h2></div>
                    <div class="settings-section-body">
                        <div class="schedule-container" id="schedule-list">
                             <!-- Orari verranno popolati da JS o valori di default -->
                        </div>
                        <div class="form-group"> <label class="form-label">Periodi di Chiusura</label> <!-- Logica periodi chiusura... --> </div>
                        <div class="switch-container"><div class="switch-info"><span class="switch-label">Accetta prenotazioni online</span></div><label class="switch"><input type="checkbox" id="setting-prenotazioni" checked><span class="switch-slider"></span></label></div>
                        <div class="switch-container"><div class="switch-info"><span class="switch-label">Mostra orari in tempo reale</span></div><label class="switch"><input type="checkbox" id="setting-orari-reali" checked><span class="switch-slider"></span></label></div>
                    </div>
                    <div class="settings-section-footer">
                        <button class="btn btn-secondary btn-reset" data-section="schedule"> <i class="fas fa-undo"></i> Ripristina </button>
                        <button class="btn btn-primary btn-save" data-section="schedule"> <i class="fas fa-save"></i> Salva Orari </button>
                    </div>
                </section>

                 <!-- Payments Section -->
                <section class="settings-section" id="payments-section">
                    <div class="settings-section-header"><h2><i class="fas fa-credit-card"></i> Metodi di Pagamento</h2></div>
                    <div class="settings-section-body">
                        <div class="form-group"><label class="form-label">Metodi Accettati</label>
                            <div class="payment-methods" id="payment-methods-list">
                                <div class="payment-method active" data-method="contanti"><div class="payment-icon"><i class="fas fa-money-bill-wave"></i></div><div class="payment-name">Contanti</div></div>
                                <div class="payment-method active" data-method="carta"><div class="payment-icon"><i class="far fa-credit-card"></i></div><div class="payment-name">Carta</div></div>
                                <div class="payment-method active" data-method="paypal"><div class="payment-icon"><i class="fab fa-paypal"></i></div><div class="payment-name">PayPal</div></div>
                                <div class="payment-method" data-method="applepay"><div class="payment-icon"><i class="fab fa-apple-pay"></i></div><div class="payment-name">Apple Pay</div></div>
                                <div class="payment-method" data-method="googlepay"><div class="payment-icon"><i class="fab fa-google-pay"></i></div><div class="payment-name">Google Pay</div></div>
                                <div class="payment-method" data-method="buonipasto"><div class="payment-icon"><i class="fas fa-ticket-alt"></i></div><div class="payment-name">Buoni Pasto</div></div>
                            </div>
                        </div>
                        <div class="form-group"><label class="form-label">Gateway Pagamento</label>
                            <div class="form-row">
                                <div class="form-col"><select id="payment-gateway" class="form-input"><option>Stripe</option><option>PayPal</option><option>Nexi</option></select></div>
                                <div class="form-col"><button class="btn btn-primary btn-block" id="connect-gateway-btn"><i class="fas fa-link"></i> Connetti Gateway</button></div>
                            </div>
                        </div>
                        <div class="form-group"><label class="form-label">Chiavi API (Stripe)</label>
                            <div class="form-row">
                                <div class="form-col"><input type="text" id="stripe-pk" class="form-input" placeholder="Chiave Pubblica"></div>
                                <div class="form-col"><input type="password" id="stripe-sk" class="form-input" placeholder="Chiave Privata"></div>
                            </div>
                        </div>
                         <div class="switch-container"><div class="switch-info"><span class="switch-label">Modalit√† Sandbox</span></div><label class="switch"><input type="checkbox" id="setting-sandbox"><span class="switch-slider"></span></label></div>
                        <div class="switch-container"><div class="switch-info"><span class="switch-label">Pagamento alla consegna</span></div><label class="switch"><input type="checkbox" id="setting-pag-consegna" checked><span class="switch-slider"></span></label></div>
                    </div>
                    <div class="settings-section-footer">
                         <button class="btn btn-secondary btn-reset" data-section="payments"> <i class="fas fa-undo"></i> Ripristina </button>
                        <button class="btn btn-primary btn-save" data-section="payments"> <i class="fas fa-save"></i> Salva Pagamenti </button>
                    </div>
                </section>

                 <!-- Notifications Section -->
                <section class="settings-section" id="notifications-section">
                    <div class="settings-section-header"><h2><i class="fas fa-bell"></i> Notifiche</h2></div>
                    <div class="settings-section-body">
                        <div class="form-group"><label class="form-label">Notifiche Email Gestore</label>
                             <div class="switch-container"><div class="switch-info"><span class="switch-label">Nuovi ordini</span></div><label class="switch"><input type="checkbox" id="notify-email-ordini" checked><span class="switch-slider"></span></label></div>
                             <div class="switch-container"><div class="switch-info"><span class="switch-label">Nuove recensioni</span></div><label class="switch"><input type="checkbox" id="notify-email-recensioni" checked><span class="switch-slider"></span></label></div>
                             <div class="switch-container"><div class="switch-info"><span class="switch-label">Report giornalieri</span></div><label class="switch"><input type="checkbox" id="notify-email-report" checked><span class="switch-slider"></span></label></div>
                        </div>
                        <div class="form-group"><label class="form-label">Email di Contatto Gestore</label><input type="email" id="notify-email-address" class="form-input" placeholder="Email per notifiche"></div>
                        <hr style="border: none; border-top: 1px solid var(--gray-dark); margin: 25px 0;">
                        <div class="form-group"><label class="form-label">Notifiche Email Cliente</label>
                             <div class="switch-container"><div class="switch-info"><span class="switch-label">Conferma ordine</span></div><label class="switch"><input type="checkbox" id="notify-client-email-conferma" checked><span class="switch-slider"></span></label></div>
                             <div class="switch-container"><div class="switch-info"><span class="switch-label">Aggiornamento stato</span></div><label class="switch"><input type="checkbox" id="notify-client-email-stato" checked><span class="switch-slider"></span></label></div>
                             <div class="switch-container"><div class="switch-info"><span class="switch-label">Richiesta recensione</span></div><label class="switch"><input type="checkbox" id="notify-client-email-recensione"><span class="switch-slider"></span></label></div>
                         </div>
                         <hr style="border: none; border-top: 1px solid var(--gray-dark); margin: 25px 0;">
                         <div class="form-group"><label class="form-label">Notifiche Push (Browser/App)</label>
                            <div class="switch-container"><div class="switch-info"><span class="switch-label">Notifiche push gestore</span></div><label class="switch"><input type="checkbox" id="notify-push-gestore" checked><span class="switch-slider"></span></label></div>
                            <div class="switch-container"><div class="switch-info"><span class="switch-label">Notifiche push cliente</span></div><label class="switch"><input type="checkbox" id="notify-push-cliente" checked><span class="switch-slider"></span></label></div>
                            <div class="switch-container"><div class="switch-info"><span class="switch-label">Suoni di notifica</span></div><label class="switch"><input type="checkbox" id="notify-suoni" checked><span class="switch-slider"></span></label></div>
                         </div>
                    </div>
                    <div class="settings-section-footer">
                         <button class="btn btn-secondary btn-reset" data-section="notifications"> <i class="fas fa-undo"></i> Ripristina </button>
                        <button class="btn btn-primary btn-save" data-section="notifications"> <i class="fas fa-save"></i> Salva Notifiche </button>
                    </div>
                </section>

                 <!-- Users Section -->
                <section class="settings-section" id="users-section">
                     <div class="settings-section-header"><h2><i class="fas fa-user-friends"></i> Gestione Utenti</h2></div>
                     <div class="settings-section-body">
                         <div class="user-list" id="user-list-container">
                             <!-- Utenti verranno aggiunti qui da JS -->
                         </div>
                         <button class="add-user-btn" id="add-user-btn"> <i class="fas fa-user-plus"></i> Aggiungi Nuovo Utente </button>
                          <div class="form-group" style="margin-top: 25px;"><label class="form-label">Ruoli e Permessi</label>
                               <!-- Opzioni permessi... -->
                          </div>
                     </div>
                     <div class="settings-section-footer">
                          <button class="btn btn-secondary btn-reset" data-section="users"> <i class="fas fa-undo"></i> Ripristina </button>
                         <button class="btn btn-primary btn-save" data-section="users"> <i class="fas fa-save"></i> Salva Utenti </button>
                     </div>
                </section>

                <!-- Appearance Section -->
                <section class="settings-section" id="appearance-section">
                    <div class="settings-section-header"><h2><i class="fas fa-paint-brush"></i> Aspetto</h2></div>
                    <div class="settings-section-body">
                        <div class="form-group"><label class="form-label">Tema Colore</label>
                            <div class="color-options" id="color-options-list">
                                <div class="color-option color-primary selected" data-color="primary" style="background:var(--primary)"></div>
                                <div class="color-option color-blue" data-color="blue" style="background:#3498db"></div>
                                <div class="color-option color-green" data-color="green" style="background:#2ecc71"></div>
                                <div class="color-option color-purple" data-color="purple" style="background:#9b59b6"></div>
                                <div class="color-option color-orange" data-color="orange" style="background:#e67e22"></div>
                                <div class="color-option color-red" data-color="red" style="background:#e74c3c"></div>
                            </div>
                        </div>
                        <div class="form-group"><label class="form-label">Anteprima Tema</label><div class="theme-preview" id="theme-preview-box">...</div></div>
                        <div class="form-group"><label class="form-label">Font</label><select id="font-select" class="form-input"><option>Montserrat</option><option>Roboto</option><option>Open Sans</option></select></div>
                        <div class="switch-container"><div class="switch-info"><span class="switch-label">Modalit√† Scura</span></div><label class="switch"><input type="checkbox" id="setting-dark-mode"><span class="switch-slider"></span></label></div>
                    </div>
                    <div class="settings-section-footer">
                         <button class="btn btn-secondary btn-reset" data-section="appearance"> <i class="fas fa-undo"></i> Ripristina </button>
                        <button class="btn btn-primary btn-save" data-section="appearance"> <i class="fas fa-save"></i> Salva Aspetto </button>
                    </div>
                </section>

                 <!-- Security Section -->
                <section class="settings-section" id="security-section">
                    <div class="settings-section-header"><h2><i class="fas fa-shield-alt"></i> Sicurezza</h2></div>
                    <div class="settings-section-body">
                        <div class="security-status success"><div class="security-status-icon"><i class="fas fa-shield-alt"></i></div><div class="security-status-info"><h3>Stato Sicurezza: Ottimo</h3><p>Protezione aggiornata.</p></div></div>
                        <div class="form-group"><label class="form-label">Cambia Password</label>
                            <input type="password" id="current-password" class="form-input" placeholder="Password attuale" style="margin-bottom: 15px;">
                            <div class="form-row">
                                <div class="form-col"><input type="password" id="new-password" class="form-input" placeholder="Nuova password"></div>
                                <div class="form-col"><input type="password" id="confirm-password" class="form-input" placeholder="Conferma nuova password"></div>
                            </div>
                            <div class="password-strength"><div class="password-strength-bar" id="password-strength-bar"></div></div>
                        </div>
                        <div class="form-group"><label class="form-label">Autenticazione a Due Fattori (2FA)</label><div class="switch-container"><div class="switch-info"><span class="switch-label">Abilita 2FA</span></div><label class="switch"><input type="checkbox" id="setting-2fa"><span class="switch-slider"></span></label></div></div>
                        <div class="form-group"><label class="form-label">Sessioni Attive</label><div id="active-sessions-list"></div><button class="btn btn-danger" id="terminate-all-sessions-btn" style="margin-top: 15px;"><i class="fas fa-sign-out-alt"></i> Termina Tutte le Altre Sessioni</button></div>
                    </div>
                    <div class="settings-section-footer">
                         <button class="btn btn-secondary btn-reset" data-section="security"> <i class="fas fa-undo"></i> Ripristina </button>
                        <button class="btn btn-primary btn-save" data-section="security"> <i class="fas fa-save"></i> Salva Sicurezza </button>
                    </div>
                </section>

                 <!-- Mobile App Section -->
                <section class="settings-section" id="mobile-section">
                     <div class="settings-section-header"><h2><i class="fas fa-mobile-alt"></i> App Mobile</h2></div>
                     <div class="settings-section-body">
                          <div class="form-group"><label class="form-label">Impostazioni App</label>
                                <div class="switch-container"><div class="switch-info"><span class="switch-label">Notifiche push clienti</span></div><label class="switch"><input type="checkbox" id="mobile-notify-push" checked><span class="switch-slider"></span></label></div>
                                <div class="switch-container"><div class="switch-info"><span class="switch-label">Ordini In-App</span></div><label class="switch"><input type="checkbox" id="mobile-inapp-orders" checked><span class="switch-slider"></span></label></div>
                                <div class="switch-container"><div class="switch-info"><span class="switch-label">Programma Fedelt√†</span></div><label class="switch"><input type="checkbox" id="mobile-loyalty" checked><span class="switch-slider"></span></label></div>
                          </div>
                          <div class="form-group"><label class="form-label">Link Download App</label>
                            <div class="form-row">
                                <div class="form-col"><input type="url" id="mobile-link-ios" class="form-input" placeholder="Link App Store (iOS)"></div>
                                <div class="form-col"><input type="url" id="mobile-link-android" class="form-input" placeholder="Link Play Store (Android)"></div>
                             </div>
                          </div>
                           <div class="form-group"><label class="form-label">Messaggio Promozionale In-App</label><input type="text" id="mobile-promo-msg" class="form-input" placeholder="Es: Sconto 10% sul prossimo ordine!"><button class="btn btn-primary" id="send-promo-btn" style="margin-top: 10px;"><i class="fas fa-paper-plane"></i> Invia Messaggio Promo</button></div>
                     </div>
                      <div class="settings-section-footer">
                         <button class="btn btn-secondary btn-reset" data-section="mobile"> <i class="fas fa-undo"></i> Ripristina </button>
                         <button class="btn btn-primary btn-save" data-section="mobile"> <i class="fas fa-save"></i> Salva App Mobile </button>
                     </div>
                </section>

                <!-- SEZIONI NUOVE -->

                <!-- Integrations Section -->
                <section class="settings-section" id="integrations-section">
                    <div class="settings-section-header"><h2><i class="fas fa-plug"></i> Integrazioni</h2></div>
                    <div class="settings-section-body">
                        <p class="form-hint" style="margin-bottom: 20px;">Connetti YourBite con altri servizi per espandere le funzionalit√†.</p>
                        <div class="integration-list">
                             <!-- Esempio Integrazione -->
                            <div class="integration-item">
                                <div class="integration-icon"><i class="fab fa-google"></i></div>
                                <div class="integration-name">Google Analytics</div>
                                <div class="integration-desc">Monitora il traffico e le conversioni sul tuo sito.</div>
                                <div class="integration-status disconnected">Non connesso</div>
                                <button class="btn btn-primary connect-integration-btn" data-service="google-analytics">Connetti</button>
                            </div>
                             <div class="integration-item">
                                <div class="integration-icon"><i class="fab fa-facebook"></i></div>
                                <div class="integration-name">Facebook Pixel</div>
                                <div class="integration-desc">Traccia le azioni degli utenti per ottimizzare le campagne pubblicitarie.</div>
                                <div class="integration-status disconnected">Non connesso</div>
                                <button class="btn btn-primary connect-integration-btn" data-service="facebook-pixel">Connetti</button>
                            </div>
                            <div class="integration-item">
                                <div class="integration-icon"><i class="fas fa-truck"></i></div>
                                <div class="integration-name">Glovo / Deliveroo</div>
                                <div class="integration-desc">Sincronizza automaticamente gli ordini dalle piattaforme di delivery.</div>
                                <div class="integration-status disconnected">Non connesso</div>
                                <button class="btn btn-primary connect-integration-btn" data-service="delivery">Connetti</button>
                            </div>
                             <div class="integration-item">
                                <div class="integration-icon"><i class="fas fa-cash-register"></i></div>
                                <div class="integration-name">Sistema POS</div>
                                <div class="integration-desc">Collega il tuo sistema di cassa per una gestione centralizzata.</div>
                                <div class="integration-status disconnected">Non connesso</div>
                                <button class="btn btn-primary connect-integration-btn" data-service="pos">Connetti</button>
                            </div>
                             <div class="integration-item">
                                <div class="integration-icon"><i class="fas fa-envelope-open-text"></i></div>
                                <div class="integration-name">Mailchimp</div>
                                <div class="integration-desc">Sincronizza i contatti dei clienti per campagne email marketing.</div>
                                <div class="integration-status connected">Connesso</div>
                                <button class="btn btn-danger disconnect-integration-btn" data-service="mailchimp">Disconnetti</button>
                            </div>
                             <div class="integration-item">
                                <div class="integration-icon"><i class="fas fa-sms"></i></div>
                                <div class="integration-name">Twilio (SMS)</div>
                                <div class="integration-desc">Invia notifiche SMS ai clienti tramite Twilio.</div>
                                <div class="integration-status connected">Connesso</div>
                                <button class="btn btn-danger disconnect-integration-btn" data-service="twilio">Disconnetti</button>
                            </div>
                        </div>
                        <div class="form-group" style="margin-top: 30px;">
                            <label class="form-label">Webhook Personalizzati</label>
                             <input type="url" id="webhook-url" class="form-input" placeholder="URL del tuo endpoint webhook">
                             <button class="btn btn-secondary" id="add-webhook-btn" style="margin-top: 10px;"><i class="fas fa-plus"></i> Aggiungi Webhook</button>
                             <span class="form-hint">Ricevi notifiche su eventi specifici (es. nuovo ordine) al tuo URL.</span>
                        </div>
                    </div>
                     <div class="settings-section-footer">
                        <!-- Nessun Ripristina/Salva globale qui, gestito per integrazione -->
                     </div>
                </section>

                <!-- Backup & Restore Section -->
                <section class="settings-section" id="backup-section">
                    <div class="settings-section-header"><h2><i class="fas fa-database"></i> Backup & Ripristino</h2></div>
                    <div class="settings-section-body">
                         <p class="form-hint" style="margin-bottom: 20px;">Proteggi i tuoi dati eseguendo backup regolari e ripristinandoli quando necessario.</p>
                        <div class="backup-options">
                             <div class="backup-option">
                                 <div class="backup-info">
                                     <strong>Backup Manuale</strong>
                                     <p>Crea un backup completo dei tuoi dati ora.</p>
                                     <div class="progress-bar-container" id="manual-backup-progress-container">
                                         <div class="progress-bar-fill" id="manual-backup-progress-bar"></div>
                                     </div>
                                 </div>
                                 <div class="backup-actions">
                                     <button class="btn btn-primary" id="manual-backup-btn"><i class="fas fa-download"></i> Esegui Backup Ora</button>
                                 </div>
                             </div>
                             <div class="backup-option">
                                 <div class="backup-info">
                                     <strong>Backup Automatico</strong>
                                     <p>Pianifica backup automatici per sicurezza.</p>
                                     <span id="last-auto-backup-info" style="font-size: 13px; color: var(--text-light); display: block; margin-top: 5px;">Ultimo backup automatico: Mai eseguito</span>
                                 </div>
                                 <div class="backup-actions" style="align-items: center;">
                                     <label class="switch" style="margin-right: 15px;">
                                         <input type="checkbox" id="auto-backup-enabled" checked>
                                         <span class="switch-slider"></span>
                                     </label>
                                     <select id="auto-backup-frequency" class="form-input" style="width: auto;">
                                         <option value="daily">Giornaliero</option>
                                         <option value="weekly">Settimanale</option>
                                         <option value="monthly">Mensile</option>
                                     </select>
                                 </div>
                             </div>
                             <div class="backup-option">
                                 <div class="backup-info">
                                     <strong>Ripristina da Backup</strong>
                                     <p>Ripristina i dati da un file di backup precedente.</p>
                                     <div class="progress-bar-container" id="restore-backup-progress-container">
                                         <div class="progress-bar-fill" id="restore-backup-progress-bar"></div>
                                     </div>
                                 </div>
                                 <div class="backup-actions">
                                     <input type="file" id="restore-file-input" accept=".zip,.sql,.json" style="display: none;">
                                     <button class="btn btn-secondary" id="restore-backup-btn"><i class="fas fa-upload"></i> Seleziona File e Ripristina</button>
                                 </div>
                             </div>
                        </div>
                         <div class="form-group" style="margin-top: 30px;">
                             <label class="form-label">Cronologia Backup Recenti</label>
                             <ul id="backup-history-list" style="list-style: none; padding: 0; max-height: 200px; overflow-y: auto; border: 1px solid var(--gray-dark); border-radius: var(--radius-sm);">
                                 <li style="padding: 10px; border-bottom: 1px solid var(--gray-dark); color: var(--text-light);">Nessun backup recente trovato.</li>
                                 <!-- La storia verr√† popolata da JS -->
                             </ul>
                         </div>
                    </div>
                     <div class="settings-section-footer">
                        <!-- I pulsanti principali sono nelle opzioni sopra -->
                     </div>
                </section>

                <!-- Advanced Settings Section -->
                <section class="settings-section" id="advanced-section">
                    <div class="settings-section-header"><h2><i class="fas fa-tools"></i> Impostazioni Avanzate</h2></div>
                    <div class="settings-section-body">
                         <div class="advanced-warning">
                             <i class="fas fa-exclamation-triangle"></i>
                             <div><strong>Attenzione:</strong> Modificare queste impostazioni pu√≤ avere effetti imprevisti sul funzionamento del sistema. Procedere con cautela.</div>
                         </div>

                         <div class="form-group">
                             <label class="form-label">Gestione Cache</label>
                             <div class="backup-option"> <!-- Riuso stile backup -->
                                <div class="backup-info">
                                    <strong>Svuota Cache di Sistema</strong>
                                    <p>Rimuove i dati temporanei per forzare il ricaricamento. Utile in caso di problemi di visualizzazione.</p>
                                </div>
                                <div class="backup-actions">
                                    <button class="btn btn-warning" id="clear-cache-btn"><i class="fas fa-broom"></i> Svuota Cache</button>
                                </div>
                            </div>
                         </div>

                          <div class="form-group">
                             <label class="form-label">Modalit√† Manutenzione</label>
                             <div class="switch-container">
                                <div class="switch-info">
                                    <span class="switch-label">Attiva Modalit√† Manutenzione</span>
                                    <span class="switch-description">Mostra una pagina di manutenzione ai clienti e blocca gli ordini.</span>
                                </div>
                                <label class="switch">
                                    <input type="checkbox" id="maintenance-mode-toggle">
                                    <span class="switch-slider"></span>
                                </label>
                            </div>
                             <textarea id="maintenance-message" class="form-input" rows="3" placeholder="Messaggio da visualizzare durante la manutenzione (opzionale)" style="margin-top: 15px; display: none;"></textarea>
                         </div>

                         <div class="form-group">
                            <label class="form-label">Gestione Chiavi API</label>
                             <div class="backup-option">
                                <div class="backup-info">
                                    <strong>Chiave API YourBite</strong>
                                    <p>Usata per integrazioni personalizzate. Mantienila segreta.</p>
                                    <input type="text" id="yourbite-api-key" class="form-input" value="yb_api_‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢" readonly style="margin-top: 10px; font-family: monospace;">
                                </div>
                                <div class="backup-actions">
                                    <button class="btn btn-secondary" id="regenerate-api-key-btn"><i class="fas fa-sync-alt"></i> Rigenera Chiave</button>
                                </div>
                             </div>
                         </div>

                         <div class="form-group">
                             <label class="form-label">Reset Impostazioni</label>
                             <div class="backup-option">
                                <div class="backup-info">
                                    <strong>Reset Impostazioni di Fabbrica</strong>
                                    <p><strong>Azione Irreversibile:</strong> Riporta TUTTE le impostazioni ai valori predefiniti. I dati (ordini, menu, clienti) NON verranno toccati.</p>
                                </div>
                                <div class="backup-actions">
                                     <button class="btn btn-danger" id="factory-reset-btn"><i class="fas fa-skull-crossbones"></i> Reset Impostazioni</button>
                                </div>
                             </div>
                         </div>

                    </div>
                    <div class="settings-section-footer">
                         <!-- Azioni specifiche sopra -->
                    </div>
                </section>

            </div> <!-- end settings-content -->
        </div> <!-- end settings-grid -->
    </div> <!-- end settings-container -->

    <!-- Toast Notification Container (spostato alla fine per z-index) -->
    <div class="toast-container" id="toastContainer"></div>

    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
    <!-- <script src="https://cdn.jsdelivr.net/npm/spectrum-colorpicker2/dist/spectrum.min.js"></script> -->
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            createParticles();
            setActiveNavLink();
            // loadNotifications(); // Funzione fittizia o da API reale
            setupSettingsNav();
            setupFormInteractions();
            initializeDefaultValues(); // Inizializza sezioni
            // setupLogoutButton(); // Aggiungi se hai un bottone logout separato qui

            // Mostra un messaggio iniziale se vuoi
            // showToast('info', 'Benvenuto', 'Gestisci le impostazioni del tuo locale.');
        });

        // Funzione per popolare particelle (ottimizzata)
        function createParticles() {
            const particlesContainer = document.getElementById('particles');
            if (!particlesContainer) return;
            particlesContainer.innerHTML = ''; // Pulisci prima
            const particleCount = Math.floor(window.innerWidth / 50); // Adatta al viewport

            for (let i = 0; i < particleCount; i++) {
                const particle = document.createElement('div');
                particle.className = 'particle';
                const size = Math.random() * 5 + 1;
                particle.style.width = `${size}px`;
                particle.style.height = `${size}px`;
                particle.style.left = `${Math.random() * 100}%`;
                particle.style.top = `${Math.random() * 100}%`;
                // Assegna variabili CSS per animazione
                particle.style.setProperty('--x', (Math.random() - 0.5) * 150);
                particle.style.setProperty('--y', (Math.random() - 0.5) * 150);
                particle.style.animationDuration = `${Math.random() * 30 + 20}s, ${Math.random() * 30 + 20}s`;
                 particle.style.backgroundColor = i % 2 === 0 ? 'rgba(94, 96, 206, 0.08)' : 'rgba(72, 191, 227, 0.08)';
                particlesContainer.appendChild(particle);
            }
        }

        // Imposta link attivo nella navbar principale
        function setActiveNavLink() {
            // Mantenere logica originale o adattare se necessario
            // ... (codice come prima)
        }

        // Funzione per logout (dall'header)
        const logoutBtnHeader = document.getElementById('logoutBtnHeader');
        if (logoutBtnHeader) {
            logoutBtnHeader.addEventListener('click', (e) => {
                e.preventDefault();
                handleLogout(); // Usa la funzione logout generica
            });
        }

        // --- Gestione Navigazione Impostazioni ---
        function setupSettingsNav() {
            const navItems = document.querySelectorAll('.settings-nav-item');
            const sections = document.querySelectorAll('.settings-section');
            const settingsContent = document.querySelector('.settings-content'); // Contenitore delle sezioni

            if (!navItems.length || !sections.length || !settingsContent) {
                console.error("Elementi di navigazione o sezioni non trovati.");
                return;
            }

            navItems.forEach(item => {
                item.addEventListener('click', function() {
                    const targetId = `${this.dataset.target}-section`;
                    const targetSection = document.getElementById(targetId);

                    if (targetSection) {
                         // Aggiorna stato attivo nav
                         navItems.forEach(i => i.classList.remove('active'));
                         this.classList.add('active');

                         // Nascondi tutte le sezioni con transizione
                         sections.forEach(section => {
                             if (section.id !== targetId && section.classList.contains('active')) {
                                 section.style.opacity = '0';
                                 setTimeout(() => {
                                      section.classList.remove('active');
                                      section.style.opacity = ''; // Resetta per future animazioni
                                  }, 300); // Tempo per fade out
                             }
                         });

                         // Mostra sezione target con transizione
                         targetSection.style.opacity = '0'; // Inizia nascosta
                         targetSection.classList.add('active');
                         setTimeout(() => {
                              targetSection.style.opacity = '1';
                              // Scroll to section (optional, consider user experience)
                              // targetSection.scrollIntoView({ behavior: 'smooth', block: 'start' });
                          }, 50); // Leggero ritardo per rendering

                          // showToast('Navigazione', `Sezione: ${this.querySelector('span').textContent}`, 'info'); // Toast opzionale
                     } else {
                         console.warn(`Sezione con ID ${targetId} non trovata.`);
                         showToast('Errore', `Impossibile trovare la sezione '${this.dataset.target}'.`, 'error');
                     }
                });
            });
        }

        // --- Inizializzazione valori/elementi di default ---
        function initializeDefaultValues() {
            // Orari Apertura: Popola con valori di default
            const scheduleList = document.getElementById('schedule-list');
            if (scheduleList) {
                const days = ['Luned√¨', 'Marted√¨', 'Mercoled√¨', 'Gioved√¨', 'Venerd√¨', 'Sabato', 'Domenica'];
                scheduleList.innerHTML = days.map(day => createScheduleDayHTML(day, true, [{ start: '11:30', end: '15:00' }, { start: '18:30', end: '23:00' }])).join('');
                // Aggiungi listener ai nuovi bottoni "+" e "x"
                scheduleList.querySelectorAll('.add-hours-btn').forEach(btn => btn.addEventListener('click', handleAddHours));
                scheduleList.querySelectorAll('.remove-hours-btn').forEach(btn => btn.addEventListener('click', handleRemoveHours));
                scheduleList.querySelectorAll('.day-toggle input[type="checkbox"]').forEach(toggle => toggle.addEventListener('change', handleDayToggle));
                initializeTimePickers(scheduleList); // Inizializza flatpickr per gli orari
            }

            // Gestione Utenti: Popola con utenti di esempio
            const userListContainer = document.getElementById('user-list-container');
            if (userListContainer) {
                 const users = [
                     { id: 1, name: 'Mario Rossi', role: 'Capo (Tu)', avatarName: 'MR' },
                     { id: 2, name: 'Laura Bianchi', role: 'Manager', avatarName: 'LB' },
                     { id: 3, name: 'Giuseppe Verdi', role: 'Cassiere', avatarName: 'GV' }
                 ];
                 userListContainer.innerHTML = users.map(user => createUserItemHTML(user.id, user.name, user.role, user.avatarName)).join('');
                 // Aggiungi listener ai nuovi bottoni modifica/elimina
                 userListContainer.querySelectorAll('.user-action.edit').forEach(btn => btn.addEventListener('click', handleEditUser));
                 userListContainer.querySelectorAll('.user-action.delete').forEach(btn => btn.addEventListener('click', handleDeleteUser));
            }

             // Sessioni Attive: Popola con esempi
             const sessionsList = document.getElementById('active-sessions-list');
             if(sessionsList) {
                 sessionsList.innerHTML = `
                     <div class="user-item">
                         <div class="user-avatar" style="font-size: 20px; display: flex; align-items: center; justify-content: center;"><i class="fas fa-desktop"></i></div>
                         <div class="user-info">
                             <div class="user-name">Questo Browser (Chrome, Linux)</div>
                             <div class="user-role">Milano, Italia ‚Ä¢ Attivo ora</div>
                         </div>
                         <div class="user-actions"><button class="user-action delete" title="Termina sessione" data-session-id="current" disabled><i class="fas fa-times"></i></button></div>
                     </div>
                     <div class="user-item">
                          <div class="user-avatar" style="font-size: 20px; display: flex; align-items: center; justify-content: center;"><i class="fas fa-mobile-alt"></i></div>
                          <div class="user-info">
                             <div class="user-name">App Mobile (iOS)</div>
                             <div class="user-role">Roma, Italia ‚Ä¢ 2 ore fa</div>
                          </div>
                          <div class="user-actions"><button class="user-action delete" title="Termina sessione" data-session-id="mobile123"><i class="fas fa-times"></i></button></div>
                     </div>
                 `;
                 sessionsList.querySelectorAll('.user-action.delete').forEach(btn => btn.addEventListener('click', handleTerminateSession));
             }

              // Cronologia Backup: Popola con esempi
              const backupHistoryList = document.getElementById('backup-history-list');
              if(backupHistoryList) {
                  backupHistoryList.innerHTML = `
                      <li style="padding: 10px; border-bottom: 1px solid var(--gray-dark); display: flex; justify-content: space-between; align-items: center;">
                          <span>Backup Manuale - ${new Date(Date.now() - 86400000).toLocaleString('it-IT')}</span>
                          <button class="btn btn-sm btn-secondary" style="padding: 5px 10px; font-size: 12px;"><i class="fas fa-download"></i> Scarica</button>
                      </li>
                      <li style="padding: 10px; border-bottom: 1px solid var(--gray-dark); display: flex; justify-content: space-between; align-items: center;">
                          <span>Backup Automatico - ${new Date(Date.now() - 172800000).toLocaleString('it-IT')}</span>
                          <button class="btn btn-sm btn-secondary" style="padding: 5px 10px; font-size: 12px;"><i class="fas fa-download"></i> Scarica</button>
                      </li>
                  `;
              }

              // Aggiorna anteprima tema iniziale
              updateThemePreview('primary'); // Colore di default
        }

        // --- Funzioni HTML Helper ---
        function createScheduleDayHTML(dayName, isChecked, timeSlots = []) {
            const dayId = dayName.toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, ""); // Rimuovi accenti per ID
            return `
                <div class="schedule-day" data-day="${dayId}">
                    <div class="day-toggle">
                        <label class="switch">
                            <input type="checkbox" ${isChecked ? 'checked' : ''} data-day-toggle="${dayId}">
                            <span class="switch-slider"></span>
                        </label>
                    </div>
                    <div class="day-name">${dayName}</div>
                    <div class="day-hours" ${!isChecked ? 'style="display: none;"' : ''}>
                        ${timeSlots.map(slot => createTimeSlotHTML(slot.start, slot.end)).join('')}
                        <button class="add-hours-btn"> <i class="fas fa-plus-circle"></i> Aggiungi </button>
                    </div>
                </div>`;
        }

        function createTimeSlotHTML(startTime = '09:00', endTime = '17:00') {
            return `
                <div class="time-slot">
                    <input type="time" class="form-input time-input" value="${startTime}">
                    <span>-</span>
                    <input type="time" class="form-input time-input" value="${endTime}">
                    <button class="remove-hours-btn" title="Rimuovi fascia oraria"> <i class="fas fa-times"></i> </button>
                </div>`;
        }

        function createUserItemHTML(id, name, role, avatarName) {
             const avatarUrl = getAvatarUrl(avatarName || name, 50);
             return `
                 <div class="user-item" data-user-id="${id}">
                     <div class="user-avatar"> <img src="${avatarUrl}" alt="${name}" onerror="this.onerror=null; this.src=getAvatarUrl('??', 50);"> </div>
                     <div class="user-info">
                         <div class="user-name">${name}</div>
                         <div class="user-role">${role}</div>
                     </div>
                     <div class="user-actions">
                         <button class="user-action edit" title="Modifica utente"> <i class="fas fa-edit"></i> </button>
                         ${role.includes('Capo') ? '' : '<button class="user-action delete" title="Elimina utente"> <i class="fas fa-trash-alt"></i> </button>'}
                     </div>
                 </div>`;
         }


        // --- Gestione Interazioni Form ---
        function setupFormInteractions() {
            // Date/Time Pickers
            if (typeof flatpickr !== 'undefined') {
                flatpickr('input[type="date"]', { dateFormat: "Y-m-d", locale: { firstDayOfWeek: 1 }});
                // Defer time picker initialization until needed
            } else {
                 console.warn("Flatpickr non caricato.");
             }

             // Inizializza Color Picker
             const colorOptionsList = document.getElementById('color-options-list');
             if (colorOptionsList) {
                 colorOptionsList.addEventListener('click', (e) => {
                     if (e.target.classList.contains('color-option')) {
                         colorOptionsList.querySelectorAll('.color-option').forEach(opt => opt.classList.remove('selected'));
                         e.target.classList.add('selected');
                         updateThemePreview(e.target.dataset.color);
                         showToast('Info', `Tema colore selezionato: ${e.target.dataset.color}`, 'info');
                     }
                 });
             }

            // Inizializza Payment Methods Toggle
            const paymentMethodsList = document.getElementById('payment-methods-list');
            if (paymentMethodsList) {
                paymentMethodsList.addEventListener('click', (e) => {
                    const method = e.target.closest('.payment-method');
                    if (method) {
                        method.classList.toggle('active');
                        const isActive = method.classList.contains('active');
                         showToast('Info', `Metodo ${method.dataset.method} ${isActive ? 'attivato' : 'disattivato'}`, 'info');
                    }
                });
            }

            // Inizializza File Upload (solo preview)
            document.querySelectorAll('.upload-input').forEach(input => {
                input.addEventListener('change', handleFileUpload);
            });

             // Listener per bottoni Aggiungi/Rimuovi Ore (delegato)
             const scheduleContainer = document.getElementById('schedule-list');
             if (scheduleContainer) {
                 scheduleContainer.addEventListener('click', (e) => {
                     if (e.target.closest('.add-hours-btn')) {
                         handleAddHours(e);
                     } else if (e.target.closest('.remove-hours-btn')) {
                         handleRemoveHours(e);
                     }
                 });
                 scheduleContainer.addEventListener('change', (e) => {
                     if (e.target.matches('.day-toggle input[type="checkbox"]')) {
                         handleDayToggle(e);
                     }
                 });
             }

             // Listener per bottoni Azioni Utente (delegato)
             const userListContainer = document.getElementById('user-list-container');
             if (userListContainer) {
                 userListContainer.addEventListener('click', (e) => {
                     if (e.target.closest('.user-action.edit')) {
                         handleEditUser(e);
                     } else if (e.target.closest('.user-action.delete')) {
                         handleDeleteUser(e);
                     }
                 });
             }
             const addUserBtn = document.getElementById('add-user-btn');
             if(addUserBtn) addUserBtn.addEventListener('click', handleAddUser);

              // Listener per Password Strength
             const newPassInput = document.getElementById('new-password');
             if(newPassInput) newPassInput.addEventListener('input', updatePasswordStrength);

             // Listener per Azioni Sicurezza
             const terminateAllBtn = document.getElementById('terminate-all-sessions-btn');
             if(terminateAllBtn) terminateAllBtn.addEventListener('click', handleTerminateAllSessions);
             const activeSessionsList = document.getElementById('active-sessions-list');
             if(activeSessionsList) activeSessionsList.addEventListener('click', (e) => { if(e.target.closest('.user-action.delete')) handleTerminateSession(e); });

              // Listener App Mobile
              const sendPromoBtn = document.getElementById('send-promo-btn');
              if(sendPromoBtn) sendPromoBtn.addEventListener('click', handleSendPromoMessage);

              // Listener Integrazioni
              const integrationsSection = document.getElementById('integrations-section');
              if(integrationsSection) {
                  integrationsSection.addEventListener('click', (e) => {
                      if(e.target.classList.contains('connect-integration-btn')) handleConnectIntegration(e);
                      if(e.target.classList.contains('disconnect-integration-btn')) handleDisconnectIntegration(e);
                  });
                  const addWebhookBtn = document.getElementById('add-webhook-btn');
                  if(addWebhookBtn) addWebhookBtn.addEventListener('click', handleAddWebhook);
              }

               // Listener Backup & Restore
               const manualBackupBtn = document.getElementById('manual-backup-btn');
               if(manualBackupBtn) manualBackupBtn.addEventListener('click', handleManualBackup);
               const restoreBtn = document.getElementById('restore-backup-btn');
               if(restoreBtn) restoreBtn.addEventListener('click', () => document.getElementById('restore-file-input').click());
               const restoreFileInput = document.getElementById('restore-file-input');
               if(restoreFileInput) restoreFileInput.addEventListener('change', handleRestoreFromFile);

               // Listener Avanzate
               const clearCacheBtn = document.getElementById('clear-cache-btn');
               if(clearCacheBtn) clearCacheBtn.addEventListener('click', handleClearCache);
               const maintenanceToggle = document.getElementById('maintenance-mode-toggle');
               if(maintenanceToggle) maintenanceToggle.addEventListener('change', handleMaintenanceToggle);
               const regenApiKeyBtn = document.getElementById('regenerate-api-key-btn');
               if(regenApiKeyBtn) regenApiKeyBtn.addEventListener('click', handleRegenerateApiKey);
               const factoryResetBtn = document.getElementById('factory-reset-btn');
               if(factoryResetBtn) factoryResetBtn.addEventListener('click', handleFactoryReset);


            // Listener Generico per Bottoni Salva/Ripristina
            document.querySelectorAll('.btn-save').forEach(btn => btn.addEventListener('click', handleSaveSection));
            document.querySelectorAll('.btn-reset').forEach(btn => btn.addEventListener('click', handleResetSection));
        }

         // Inizializza Flatpickr su un set di elementi
         function initializeTimePickers(container) {
             if (typeof flatpickr !== 'undefined') {
                 container.querySelectorAll('input[type="time"]').forEach(input => {
                     flatpickr(input, { enableTime: true, noCalendar: true, dateFormat: "H:i", time_24hr: true });
                 });
             }
         }


        // --- Gestori Eventi Specifici ---

        function handleFileUpload(event) {
            const input = event.target;
            const previewContainer = input.closest('.upload-container')?.querySelector('.preview-container');
            if (!previewContainer) return;

            // Limita anteprime (es. max 1 per logo, 5 per immagini locale)
            const maxPreviews = input.multiple ? 5 : 1;
            if (!input.multiple) {
                 previewContainer.innerHTML = ''; // Rimuovi vecchie anteprime per upload singolo
             }

            if (input.files) {
                Array.from(input.files).slice(0, maxPreviews - previewContainer.children.length).forEach(file => {
                    if (file.size > (input.multiple ? 5 * 1024 * 1024 : 2 * 1024 * 1024)) {
                         showToast('Errore Upload', `Il file ${file.name} √® troppo grande.`, 'error');
                         return;
                     }
                    const reader = new FileReader();
                    reader.onload = (e) => {
                        const previewItem = document.createElement('div');
                        previewItem.className = 'preview-item';
                        previewItem.innerHTML = `<img src="${e.target.result}" alt="Preview ${file.name}" class="preview-image"><button class="preview-remove" title="Rimuovi">&times;</button>`;
                        previewContainer.appendChild(previewItem);
                        previewItem.querySelector('.preview-remove').addEventListener('click', () => {
                             previewItem.remove();
                             // Se era upload singolo, potremmo voler resettare l'input file qui
                             // input.value = ''; // Attenzione: questo resetta TUTTI i file selezionati
                         });
                    }
                    reader.readAsDataURL(file);
                });
                if (input.files.length > maxPreviews) {
                     showToast('Attenzione', `Mostrate solo le prime ${maxPreviews} immagini.`, 'warning');
                 }
            }
             // Reset dell'input per permettere di caricare lo stesso file di nuovo
            input.value = '';
        }

        function handleAddHours(event) {
             const dayHoursContainer = event.target.closest('.day-hours');
             if (!dayHoursContainer) return;
             const newSlotHTML = createTimeSlotHTML(); // Crea HTML nuovo slot
             const newSlotElement = document.createElement('div'); // Contenitore temporaneo
             newSlotElement.innerHTML = newSlotHTML;
             const timeSlotDiv = newSlotElement.firstElementChild; // Prendi il div time-slot

             // Inserisci prima del bottone "+"
             dayHoursContainer.insertBefore(timeSlotDiv, event.target.closest('.add-hours-btn'));

             // Inizializza Flatpickr sui nuovi input
             initializeTimePickers(timeSlotDiv);

             // Aggiungi listener al nuovo bottone "x"
             timeSlotDiv.querySelector('.remove-hours-btn').addEventListener('click', handleRemoveHours);
             showToast('Info', 'Fascia oraria aggiunta.', 'info');
        }

        function handleRemoveHours(event) {
            const timeSlot = event.target.closest('.time-slot');
            if (timeSlot) {
                timeSlot.style.transition = 'opacity 0.3s ease, transform 0.3s ease';
                timeSlot.style.opacity = '0';
                timeSlot.style.transform = 'scale(0.9)';
                setTimeout(() => timeSlot.remove(), 300);
                showToast('Info', 'Fascia oraria rimossa.', 'info');
            }
        }

        function handleDayToggle(event) {
            const checkbox = event.target;
            const dayContainer = checkbox.closest('.schedule-day');
            const hoursContainer = dayContainer?.querySelector('.day-hours');
            if (hoursContainer) {
                hoursContainer.style.display = checkbox.checked ? 'flex' : 'none';
                 showToast('Info', `Orari ${dayContainer.dataset.day} ${checkbox.checked ? 'abilitati' : 'disabilitati'}`, 'info');
            }
        }

        function handleAddUser() {
             // In un'app reale, aprirebbe un modal
             const newName = prompt("Inserisci nome nuovo utente:");
             const newRole = prompt("Inserisci ruolo (es. Manager, Cassiere):");
             if (newName && newRole) {
                  const newUser = {
                      id: generateNewId(), // Dovresti avere una funzione per ID univoci
                      name: newName,
                      role: newRole,
                      avatarName: newName.split(' ').map(n => n[0]).join('') // Iniziali
                  };
                  const userListContainer = document.getElementById('user-list-container');
                  const newItemHTML = createUserItemHTML(newUser.id, newUser.name, newUser.role, newUser.avatarName);
                  userListContainer.insertAdjacentHTML('beforeend', newItemHTML);
                  // Aggiungi listener ai bottoni del nuovo utente
                  const newItemElement = userListContainer.lastElementChild;
                  newItemElement.querySelector('.user-action.edit').addEventListener('click', handleEditUser);
                  newItemElement.querySelector('.user-action.delete').addEventListener('click', handleDeleteUser);

                  showToast('Successo', `Utente ${newName} aggiunto (simulato).`, 'success');
             } else {
                  showToast('Info', 'Aggiunta utente annullata.', 'info');
              }
        }

         function handleEditUser(event) {
            const userItem = event.target.closest('.user-item');
            const userId = userItem.dataset.userId;
            const userName = userItem.querySelector('.user-name').textContent;
            // In un'app reale, aprirebbe un modal di modifica
             const updatedName = prompt(`Modifica nome per ${userName}:`, userName);
             if(updatedName && updatedName !== userName) {
                 userItem.querySelector('.user-name').textContent = updatedName;
                 // Aggiorna anche l'avatar se basato sul nome
                 const avatarImg = userItem.querySelector('.user-avatar img');
                 if(avatarImg) avatarImg.src = getAvatarUrl(updatedName, 50);
                 showToast('Successo', `Nome utente ${userId} aggiornato (simulato).`, 'success');
              } else if (updatedName !== null) {
                  showToast('Info', 'Nessuna modifica apportata.', 'info');
              }
        }

         function handleDeleteUser(event) {
             const userItem = event.target.closest('.user-item');
             const userId = userItem.dataset.userId;
             const userName = userItem.querySelector('.user-name').textContent;
             if (confirm(`Sei sicuro di voler eliminare l'utente ${userName}?`)) {
                 userItem.style.transition = 'opacity 0.3s ease, transform 0.3s ease';
                 userItem.style.opacity = '0';
                 userItem.style.transform = 'translateX(-20px)';
                 setTimeout(() => {
                     userItem.remove();
                     showToast('Successo', `Utente ${userName} eliminato (simulato).`, 'success');
                 }, 300);
             }
         }

        function updatePasswordStrength() {
             const password = document.getElementById('new-password').value;
             const strengthBar = document.getElementById('password-strength-bar');
             let score = 0;
             if (password.length >= 8) score++;
             if (password.match(/[A-Z]/)) score++;
             if (password.match(/[a-z]/)) score++;
             if (password.match(/[0-9]/)) score++;
             if (password.match(/[^A-Za-z0-9]/)) score++;

             strengthBar.className = 'password-strength-bar'; // Reset class
             if (score <= 2) strengthBar.classList.add('weak');
             else if (score <= 4) strengthBar.classList.add('medium');
             else strengthBar.classList.add('strong');
         }

         function handleTerminateSession(event) {
             const sessionItem = event.target.closest('.user-item');
             const sessionId = event.target.closest('.user-action.delete').dataset.sessionId;
             if (sessionId === 'current') {
                 showToast('Info', 'Non puoi terminare la sessione corrente da qui.', 'info');
                 return;
             }
             if (confirm(`Terminare la sessione ${sessionId}? L'utente dovr√† effettuare nuovamente il login su quel dispositivo.`)) {
                 // Simula terminazione
                 sessionItem.style.opacity = '0';
                 setTimeout(() => sessionItem.remove(), 300);
                 showToast('Successo', `Sessione ${sessionId} terminata (simulato).`, 'success');
             }
         }

        function handleTerminateAllSessions() {
             if (confirm('Sei sicuro di voler terminare tutte le altre sessioni attive? Dovrai effettuare nuovamente il login su tutti gli altri dispositivi.')) {
                  // Simula terminazione
                 document.querySelectorAll('#active-sessions-list .user-item').forEach(item => {
                     const btn = item.querySelector('.user-action.delete');
                     if (btn && btn.dataset.sessionId !== 'current') {
                          item.style.opacity = '0';
                          setTimeout(() => item.remove(), 300);
                      }
                 });
                 showToast('Successo', 'Tutte le altre sessioni terminate (simulato).', 'success');
              }
         }

        function handleSendPromoMessage() {
             const message = document.getElementById('mobile-promo-msg').value;
             if (message.trim()) {
                 showToast('Successo', `Messaggio promozionale "${message}" inviato (simulato).`, 'success');
                 document.getElementById('mobile-promo-msg').value = ''; // Clear input
             } else {
                  showToast('Errore', 'Inserisci un messaggio promozionale.', 'error');
              }
         }

        function handleConnectIntegration(event) {
            const button = event.target;
            const item = button.closest('.integration-item');
            const serviceName = button.dataset.service;
            const statusDiv = item.querySelector('.integration-status');

            button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Connessione...';
            button.disabled = true;

             // Simula connessione API
            setTimeout(() => {
                 button.innerHTML = '<i class="fas fa-times"></i> Disconnetti';
                 button.classList.remove('btn-primary', 'connect-integration-btn');
                 button.classList.add('btn-danger', 'disconnect-integration-btn');
                 button.disabled = false;
                 statusDiv.textContent = 'Connesso';
                 statusDiv.className = 'integration-status connected';
                 showToast('Successo', `Integrazione ${serviceName} connessa (simulato).`, 'success');
             }, 1500);
        }

        function handleDisconnectIntegration(event) {
            const button = event.target;
            const item = button.closest('.integration-item');
            const serviceName = button.dataset.service;
            const statusDiv = item.querySelector('.integration-status');

             if (confirm(`Sei sicuro di voler disconnettere l'integrazione ${serviceName}?`)) {
                 button.innerHTML = '<i class="fas fa-link"></i> Connetti';
                 button.classList.remove('btn-danger', 'disconnect-integration-btn');
                 button.classList.add('btn-primary', 'connect-integration-btn');
                 statusDiv.textContent = 'Non connesso';
                 statusDiv.className = 'integration-status disconnected';
                 showToast('Info', `Integrazione ${serviceName} disconnessa (simulato).`, 'info');
             }
        }

        function handleAddWebhook() {
             const url = document.getElementById('webhook-url').value;
             if (url && url.startsWith('http')) {
                  showToast('Successo', `Webhook aggiunto per l'URL: ${url} (simulato).`, 'success');
                  document.getElementById('webhook-url').value = '';
                  // Qui potresti aggiungere l'URL a una lista visibile
              } else {
                   showToast('Errore', 'Inserisci un URL valido per il webhook.', 'error');
               }
        }

         function handleManualBackup() {
             const btn = document.getElementById('manual-backup-btn');
             const progressContainer = document.getElementById('manual-backup-progress-container');
             const progressBar = document.getElementById('manual-backup-progress-bar');

             btn.disabled = true;
             btn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Backup in corso...';
             progressContainer.style.display = 'block';
             progressBar.style.width = '0%';

             // Simula progresso backup
             let progress = 0;
             const interval = setInterval(() => {
                 progress += Math.random() * 15;
                 if (progress >= 100) {
                     progress = 100;
                     clearInterval(interval);
                     setTimeout(() => {
                         btn.disabled = false;
                         btn.innerHTML = '<i class="fas fa-download"></i> Esegui Backup Ora';
                         progressContainer.style.display = 'none';
                         showToast('Successo', 'Backup manuale completato con successo (simulato).', 'success');
                         // Aggiungi alla cronologia (simulato)
                         const historyList = document.getElementById('backup-history-list');
                          if (historyList) {
                              const firstItem = historyList.querySelector('li');
                              if(firstItem && firstItem.textContent.includes('Nessun backup')) firstItem.remove(); // Rimuovi placeholder
                              const newItem = document.createElement('li');
                              newItem.style.cssText = "padding: 10px; border-bottom: 1px solid var(--gray-dark); display: flex; justify-content: space-between; align-items: center;";
                              newItem.innerHTML = `<span>Backup Manuale - ${new Date().toLocaleString('it-IT')}</span><button class="btn btn-sm btn-secondary" style="padding: 5px 10px; font-size: 12px;"><i class="fas fa-download"></i> Scarica</button>`;
                              historyList.prepend(newItem); // Aggiungi in cima
                           }
                     }, 500);
                 }
                 progressBar.style.width = `${progress}%`;
             }, 300);
         }

        function handleRestoreFromFile(event) {
             const file = event.target.files[0];
             const btn = document.getElementById('restore-backup-btn');
             const progressContainer = document.getElementById('restore-backup-progress-container');
             const progressBar = document.getElementById('restore-backup-progress-bar');

             if (file) {
                  if (confirm(`Sei sicuro di voler ripristinare i dati dal file "${file.name}"? L'operazione sovrascriver√† i dati attuali.`)) {
                      btn.disabled = true;
                      btn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Ripristino...';
                      progressContainer.style.display = 'block';
                      progressBar.style.width = '0%';

                      // Simula progresso ripristino
                      let progress = 0;
                      const interval = setInterval(() => {
                          progress += Math.random() * 20;
                          if (progress >= 100) {
                              progress = 100;
                              clearInterval(interval);
                              setTimeout(() => {
                                   btn.disabled = false;
                                   btn.innerHTML = '<i class="fas fa-upload"></i> Seleziona File e Ripristina';
                                   progressContainer.style.display = 'none';
                                   showToast('Successo', `Ripristino dal file ${file.name} completato (simulato).`, 'success');
                                   // Potrebbe essere necessario ricaricare la pagina o i dati
                               }, 500);
                          }
                          progressBar.style.width = `${progress}%`;
                      }, 250);
                  }
              }
              // Resetta l'input file per permettere di selezionare lo stesso file di nuovo
              event.target.value = '';
          }

          function handleClearCache() {
              if (confirm('Sei sicuro di voler svuotare la cache di sistema? Potrebbe essere necessario ricaricare la pagina.')) {
                   showToast('Successo', 'Cache di sistema svuotata (simulato).', 'success');
                   // Qui potresti inviare una richiesta al backend per pulire la cache lato server
               }
          }

          function handleMaintenanceToggle(event) {
              const isActive = event.target.checked;
              const messageBox = document.getElementById('maintenance-message');
              if(messageBox) messageBox.style.display = isActive ? 'block' : 'none';
              showToast('Info', `Modalit√† manutenzione ${isActive ? 'ATTIVATA' : 'DISATTIVATA'} (simulato).`, isActive ? 'warning' : 'info');
              // Invia stato al backend
          }

         function handleRegenerateApiKey() {
              if (confirm('Sei sicuro di voler rigenerare la chiave API? La vecchia chiave smetter√† immediatamente di funzionare.')) {
                   // Simula rigenerazione
                   const newKey = 'yb_api_' + Math.random().toString(36).substring(2) + '‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢';
                   document.getElementById('yourbite-api-key').value = newKey;
                   showToast('Successo', 'Nuova chiave API generata (simulato). Ricorda di aggiornare le tue integrazioni.', 'success');
                   // Invia richiesta al backend per rigenerare e salvare la nuova chiave
               }
         }

        function handleFactoryReset() {
             if (prompt("Azione pericolosa! Digita 'RESET' per confermare il ripristino delle impostazioni di fabbrica (i dati NON verranno toccati).") === 'RESET') {
                  showToast('Successo', 'Impostazioni ripristinate ai valori di fabbrica (simulato).', 'success');
                  // Invia richiesta al backend
                  // Potrebbe essere utile ricaricare la pagina dopo questa operazione
                  // setTimeout(() => window.location.reload(), 1500);
              } else {
                   showToast('Info', 'Reset impostazioni annullato.', 'info');
               }
         }


        // --- Funzioni Generiche Save/Reset ---
        function handleSaveSection(event) {
            const button = event.target.closest('.btn-save');
            const sectionId = button.dataset.section;
            const sectionElement = document.getElementById(`${sectionId}-section`);
            if (!sectionElement) return;

            // Simula salvataggio
            const originalHtml = button.innerHTML;
            button.disabled = true;
            button.innerHTML = `<i class="fas fa-spinner fa-spin"></i> Salvo...`;

             console.log(`Simulazione salvataggio per la sezione: ${sectionId}`);
             // Qui raccoglieresti i dati dalla sezione specifica
             // const formData = gatherSectionData(sectionElement);
             // console.log("Dati raccolti:", formData);
             // E invieresti i dati al backend con fetch(...)

            setTimeout(() => {
                button.disabled = false;
                button.innerHTML = originalHtml;
                showToast('Successo', `Impostazioni ${getSectionName(sectionId)} salvate (simulato).`, 'success');
            }, 1200);
        }

        function handleResetSection(event) {
            const button = event.target.closest('.btn-reset');
            const sectionId = button.dataset.section;
            const sectionElement = document.getElementById(`${sectionId}-section`);
            if (!sectionElement) return;

            if (confirm(`Sei sicuro di voler ripristinare le impostazioni predefinite per la sezione ${getSectionName(sectionId)}? Le modifiche non salvate andranno perse.`)) {
                 console.log(`Simulazione reset per la sezione: ${sectionId}`);
                 // Qui dovresti ricaricare i valori di default per i campi della sezione
                 // resetSectionFields(sectionElement);
                 showToast('Info', `Impostazioni ${getSectionName(sectionId)} ripristinate (simulato).`, 'info');
             }
        }

         // Funzione helper per ottenere nome leggibile sezione
         function getSectionName(sectionId) {
             const navItem = document.querySelector(`.settings-nav-item[data-target="${sectionId}"] span`);
             return navItem ? navItem.textContent : sectionId;
         }


        // --- Funzione Logout Generica ---
        function handleLogout() {
             const loadingOverlay = document.createElement('div'); loadingOverlay.style.cssText = 'position:fixed;top:0;left:0;width:100%;height:100%;background:rgba(255,255,255,0.8);display:flex;flex-direction:column;justify-content:center;align-items:center;z-index:2000;backdrop-filter:blur(5px);'; const spinnerContainer = document.createElement('div'); spinnerContainer.style.cssText = 'width:60px;height:60px;position:relative;'; const spinner = document.createElement('div'); spinner.style.cssText = 'border:4px solid rgba(0,0,0,0.1);border-top-color:var(--primary);border-radius:50%;width:100%;height:100%;animation:spin 1s linear infinite;'; const style = document.createElement('style'); style.textContent = `@keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }`; document.head.appendChild(style); spinnerContainer.appendChild(spinner); const loadingText = document.createElement('p'); loadingText.textContent = 'Logout in corso...'; loadingText.style.cssText = 'margin-top:20px;color:var(--primary);font-weight:500;'; loadingOverlay.appendChild(spinnerContainer); loadingOverlay.appendChild(loadingText); document.body.appendChild(loadingOverlay);
             fetch('/logout', { method: 'POST' })
                 .then(response => response.ok ? response.json() : Promise.reject(new Error('Logout failed')))
                 .then(() => { loadingText.textContent = 'Reindirizzamento...'; setTimeout(() => window.location.href = '/login', 800); })
                 .catch(error => { console.error('Logout error:', error); loadingText.textContent = 'Errore Logout.'; setTimeout(() => loadingOverlay.remove(), 2000); });
         }

        // Aggiungi listener al bottone logout nell'header
        const logoutBtn = document.getElementById('logoutBtnHeader');
        if(logoutBtn) logoutBtn.addEventListener('click', handleLogout);

        // Funzione per aggiornare anteprima tema (con colori di fallback)
        function updateThemePreview(color) {
             const themeHeader = document.querySelector('.theme-header');
             const themePreview = document.querySelector('.theme-preview');
             if (!themeHeader || !themePreview) return;

             let primaryColor, primaryDarkColor;
             switch (color) {
                 case 'primary': primaryColor = '#5e60ce'; primaryDarkColor = '#5390d9'; break;
                 case 'blue': primaryColor = '#3498db'; primaryDarkColor = '#2980b9'; break;
                 case 'green': primaryColor = '#2ecc71'; primaryDarkColor = '#27ae60'; break;
                 case 'purple': primaryColor = '#9b59b6'; primaryDarkColor = '#8e44ad'; break;
                 case 'orange': primaryColor = '#e67e22'; primaryDarkColor = '#d35400'; break;
                 case 'red': primaryColor = '#e74c3c'; primaryDarkColor = '#c0392b'; break;
                 default: primaryColor = '#5e60ce'; primaryDarkColor = '#5390d9'; // Default
             }

             themeHeader.style.background = `linear-gradient(135deg, ${primaryColor}, ${primaryDarkColor})`;

              // Anima la preview
              themePreview.style.transition = 'transform 0.3s ease, opacity 0.3s ease';
              themePreview.style.transform = 'scale(0.97)';
              themePreview.style.opacity = '0.8';
              setTimeout(() => {
                  themePreview.style.transform = 'scale(1)';
                  themePreview.style.opacity = '1';
              }, 100);
         }

    </script>

</body>
</html>