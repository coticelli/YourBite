<!DOCTYPE html>
<html lang="it">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>YourBite - Gestione Clienti</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;500;600;700&display=swap"
        rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/luxon@3.0.4/build/global/luxon.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-luxon@1.0.0"></script>
    <style>
        /* === VARIABILI E IMPOSTAZIONI BASE === */
        :root {
            /* NUOVI COLORI PER LA NAVBAR E ELEMENTI PRINCIPALI (MODIFICATO) */
            --navbar-red-main: #EE1B1B;
            --navbar-red-gradient-dark: #D41010;

            /* Palette colori - MODIFICATO per usare i nuovi rossi/arancioni */
            --primary: var(--navbar-red-main);
            /* Era #5e60ce */
            --primary-light: var(--navbar-red-main);
            /* Era #6930c3 */
            --primary-dark: var(--navbar-red-gradient-dark);
            /* Era #5390d9 */

            --secondary: var(--navbar-red-main);
            /* Era #48bfe3 */
            --secondary-light: var(--navbar-red-main);
            /* Era #64dfdf */

            --accent: var(--accent-orange);
            /* Era #80ffdb, ora arancione */

            --accent-green: #2ecc71;
            /* Mantenuto */
            --accent-red: #e74c3c;
            /* Mantenuto */
            --accent-orange: #f39c12;
            /* Mantenuto */
            --accent-purple: #9b59b6;
            /* Mantenuto per badge VIP */
            --accent-yellow: #f1c40f;
            /* Mantenuto per badge VIP */

            --dark: #1a1a2e;
            --dark-blue: #16213e;
            --medium-dark: #252941;
            --light: #ffffff;
            --gray: #f8f9fa;
            --gray-light: #fafbfc;
            --gray-dark: #e9ecef;
            --text: #212529;
            --text-light: #6c757d;

            /* Effetti e animazioni */
            --shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            --shadow-lg: 0 20px 40px rgba(0, 0, 0, 0.15);
            /* --shadow-colored era basata su --primary, ora l'header usa ombra rossa diretta */
            --shadow-success: 0 8px 25px rgba(46, 204, 113, 0.25);
            /* Mantenuto */
            --shadow-warning: 0 8px 25px rgba(243, 156, 18, 0.25);
            /* Mantenuto */
            --shadow-danger: 0 8px 25px rgba(231, 76, 60, 0.25);
            /* Mantenuto */
            --shadow-purple: 0 8px 25px rgba(155, 89, 182, 0.25);
            /* Mantenuto */
            --radius: 16px;
            --radius-sm: 10px;
            --radius-lg: 24px;
            --radius-xl: 30px;
            --transition-fast: all 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);
            --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
            --transition-spring: all 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55);
            --transition-bounce: all 0.6s cubic-bezier(0.34, 1.56, 0.64, 1);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Montserrat', 'Arial', sans-serif;
            scroll-behavior: smooth;
        }

        body {
            background-color: var(--gray);
            /* MODIFICATO: background-image con tonalit√† rosse */
            background-image:
                radial-gradient(circle at 25% 10%, rgba(238, 27, 27, 0.05) 0%, transparent 40%),
                radial-gradient(circle at 75% 75%, rgba(212, 16, 16, 0.05) 0%, transparent 40%);
            color: var(--text);
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            overflow-x: hidden;
        }

        /* === EFFETTI DI BASE === */
        .glass {
            background: rgba(255, 255, 255, 0.7);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .card-hover-effect {
            transition: var(--transition-spring);
            transform-style: preserve-3d;
            position: relative;
        }

        .card-hover-effect:hover {
            transform: translateY(-5px) rotateX(2deg) rotateY(-2deg);
            /* MODIFICATO: ombra rossa */
            box-shadow: 0 20px 40px rgba(238, 27, 27, 0.2);
        }

        .text-gradient {
            /* MODIFICATO: gradiente rosso */
            background: linear-gradient(120deg, var(--navbar-red-main), var(--navbar-red-gradient-dark));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            display: inline-block;
        }

        .btn-glow {
            position: relative;
            overflow: hidden;
        }

        .btn-glow::after {
            content: '';
            position: absolute;
            width: 100%;
            height: 100%;
            top: 0;
            left: 0;
            background: radial-gradient(circle at center, rgba(255, 255, 255, 0.8) 0%, transparent 70%);
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .btn-glow:hover::after {
            opacity: 0.2;
            animation: glowPulse 1.5s ease infinite;
        }

        @keyframes glowPulse {
            0% {
                opacity: 0;
            }

            50% {
                opacity: 0.2;
            }

            100% {
                opacity: 0;
            }
        }

        /* === HEADER E NAVIGAZIONE (MODIFICATO) === */
        header {
            /* MODIFICATO: sfondo rosso */
            background: linear-gradient(135deg, var(--navbar-red-main), var(--navbar-red-gradient-dark));
            padding: 0;
            /* MODIFICATO: ombra rossa */
            box-shadow: 0 8px 25px rgba(238, 27, 27, 0.25);
            position: sticky;
            top: 0;
            z-index: 100;
            transition: var(--transition);
            height: 70px;
            display: flex;
            align-items: center;
        }

        header:hover {
            /* MODIFICATO: ombra rossa */
            box-shadow: 0 8px 30px rgba(238, 27, 27, 0.35);
        }

        header::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(120deg,
                    rgba(0, 0, 0, 0),
                    rgba(255, 255, 255, 0.1),
                    rgba(0, 0, 0, 0));
            background-size: 200% 100%;
            animation: headerShimmer 6s linear infinite;
            pointer-events: none;
        }

        @keyframes headerShimmer {
            0% {
                background-position: 200% 0;
            }

            100% {
                background-position: -200% 0;
            }
        }

        .header-container {
            display: flex;
            justify-content: space-between;
            align-items: center;
            width: 100%;
            max-width: 1600px;
            margin: 0 auto;
            padding: 0 25px;
        }

        .logo-container {
            display: flex;
            align-items: center;
            gap: 16px;
        }

        .logo {
            width: 42px;
            height: 42px;
            border-radius: 12px;
            object-fit: cover;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.15);
            transition: var(--transition-spring);
            position: relative;
            overflow: hidden;
            border: 2px solid rgba(255, 255, 255, 0.4);
        }

        .logo::after {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: linear-gradient(to bottom right,
                    rgba(255, 255, 255, 0),
                    rgba(255, 255, 255, 0),
                    rgba(255, 255, 255, 0.3),
                    rgba(255, 255, 255, 0));
            transform: rotate(45deg);
            transition: var(--transition);
            opacity: 0;
        }

        .logo:hover {
            transform: scale(1.1) rotate(5deg);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.25);
            border-color: rgba(255, 255, 255, 0.8);
        }

        .logo:hover::after {
            animation: logoPulse 1.5s ease-out infinite;
            opacity: 1;
        }

        @keyframes logoPulse {
            0% {
                transform: translateX(-100%) rotate(45deg);
            }

            100% {
                transform: translateX(100%) rotate(45deg);
            }
        }

        .header-title {
            color: white;
            font-size: 1.5rem;
            font-weight: 700;
            margin: 0;
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.15);
            position: relative;
            letter-spacing: 0.5px;
        }

        .header-title::after {
            content: '';
            display: block;
            width: 0;
            height: 2px;
            background: var(--accent);
            /* Ora arancione */
            transition: var(--transition);
            position: absolute;
            bottom: -5px;
            left: 0;
        }

        .header-title:hover::after {
            width: 100%;
        }

        .header-nav {
            display: flex;
            gap: 8px;
            align-items: center;
        }

        .header-nav a {
            color: white;
            text-decoration: none;
            font-weight: 500;
            padding: 10px 16px;
            border-radius: 12px;
            transition: all 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);
            font-size: 14px;
            letter-spacing: 0.5px;
            position: relative;
            overflow: hidden;
            background-color: rgba(255, 255, 255, 0.05);
            border: 1px solid rgba(255, 255, 255, 0.1);
            display: flex;
            align-items: center;
            gap: 6px;
            backdrop-filter: blur(5px);
        }

        .header-nav a i {
            transition: transform 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);
            font-size: 16px;
        }

        .header-nav a::before {
            content: '';
            position: absolute;
            width: 100%;
            height: 100%;
            background: linear-gradient(120deg,
                    rgba(255, 255, 255, 0),
                    rgba(255, 255, 255, 0.2),
                    rgba(255, 255, 255, 0));
            top: 0;
            left: -100%;
            transition: var(--transition);
            transform: skewX(-15deg);
        }

        .header-nav a:hover {
            background-color: rgba(255, 255, 255, 0.15);
            transform: translateY(-5px);
            border-color: rgba(255, 255, 255, 0.3);
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
        }

        .header-nav a:hover i {
            transform: scale(1.2) rotate(10deg);
        }

        .header-nav a:hover::before {
            left: 100%;
            transition: all 0.7s ease;
        }

        .header-nav a.active {
            background-color: rgba(255, 255, 255, 0.2);
            font-weight: 600;
            border-color: rgba(255, 255, 255, 0.4);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }

        /* Stile per il pulsante Homepage nella navbar */
        .header-nav a.home-button {
            background-color: rgba(255, 255, 255, 0.08);
            border-color: rgba(255, 255, 255, 0.25);
            position: relative;
            overflow: hidden;
        }

        .header-nav a.home-button::after {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: linear-gradient(to bottom right,
                    rgba(255, 255, 255, 0),
                    rgba(255, 255, 255, 0.1),
                    rgba(255, 255, 255, 0));
            transform: rotate(45deg);
            animation: homeButtonShimmer 3s infinite;
            opacity: 0.5;
        }

        @keyframes homeButtonShimmer {
            0% {
                transform: translateX(-100%) rotate(45deg);
            }

            50% {
                transform: translateX(100%) rotate(45deg);
            }

            100% {
                transform: translateX(-100%) rotate(45deg);
            }
        }

        .header-nav a.home-button:hover {
            background-color: rgba(255, 255, 255, 0.2);
            transform: translateY(-5px) scale(1.05);
            border-color: rgba(255, 255, 255, 0.4);
        }

        .header-nav a.home-button i {
            color: var(--accent);
            /* Ora arancione */
            transition: var(--transition-spring);
        }

        .header-nav a.home-button:hover i {
            transform: scale(1.2);
        }

        .user-role-badge {
            background-color: rgba(255, 255, 255, 0.15);
            color: white;
            padding: 8px 16px;
            border-radius: 12px;
            font-weight: 600;
            font-size: 14px;
            letter-spacing: 0.5px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            display: flex;
            align-items: center;
            gap: 8px;
            backdrop-filter: blur(5px);
            animation: badgePulse 3s infinite alternate;
            border: 2px solid rgba(255, 255, 255, 0.3);
            margin-left: 10px;
        }

        @keyframes badgePulse {
            0% {
                box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            }

            100% {
                box-shadow: 0 8px 20px rgba(0, 0, 0, 0.2);
            }
        }

        .user-role-badge i {
            font-size: 14px;
            animation: rotateIcon 5s linear infinite;
        }

        @keyframes rotateIcon {
            0% {
                transform: rotate(0deg);
            }

            25% {
                transform: rotate(10deg);
            }

            50% {
                transform: rotate(0deg);
            }

            75% {
                transform: rotate(-10deg);
            }

            100% {
                transform: rotate(0deg);
            }
        }

        #notification-badge {
            position: absolute;
            top: -5px;
            right: -5px;
            background: linear-gradient(135deg, #ff6b6b, #e63946);
            color: white;
            border-radius: 50%;
            width: 22px;
            height: 22px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 12px;
            font-weight: bold;
            box-shadow: 0 4px 10px rgba(230, 57, 70, 0.3);
            border: 2px solid white;
            animation: notificationPulse 1.5s infinite alternate;
        }

        @keyframes notificationPulse {
            from {
                transform: scale(1);
            }

            to {
                transform: scale(1.15);
            }
        }

        .user-controls {
            display: flex;
            align-items: center;
            margin-left: 20px;
        }

        .username {
            color: white;
            font-weight: 500;
            margin-right: 15px;
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.15);
            letter-spacing: 0.3px;
        }

        .logout-btn {
            background: rgba(255, 255, 255, 0.15);
            border: 1px solid rgba(255, 255, 255, 0.3);
            color: white;
            padding: 8px 15px;
            border-radius: var(--radius-sm);
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: var(--transition-spring);
            display: flex;
            align-items: center;
            gap: 5px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            position: relative;
        }

        .logout-btn::before {
            content: '';
            position: absolute;
            width: 100%;
            height: 100%;
            background: linear-gradient(120deg,
                    rgba(255, 255, 255, 0),
                    rgba(255, 255, 255, 0.2),
                    rgba(255, 255, 255, 0));
            top: 0;
            left: -100%;
            transition: var(--transition);
            transform: skewX(-15deg);
        }

        .logout-btn:hover {
            background: rgba(255, 255, 255, 0.25);
            transform: translateY(-3px);
            box-shadow: 0 8px 15px rgba(0, 0, 0, 0.15);
        }

        .logout-btn:hover::before {
            left: 100%;
            transition: all 0.7s ease;
        }

        /* === PARTICLES BACKGROUND === */
        .particles {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
            pointer-events: none;
            overflow: hidden;
        }

        .particle {
            position: absolute;
            width: 5px;
            height: 5px;
            /* MODIFICATO: rosso */
            background-color: rgba(238, 27, 27, 0.1);
            border-radius: 50%;
        }

        .particle:nth-child(odd) {
            background-color: rgba(212, 16, 16, 0.15);
        }


        @keyframes particleFloat {
            0% {
                transform: translate(0, 0);
            }

            100% {
                transform: translate(80px, -80px);
            }
        }

        @keyframes particleFade {
            0% {
                opacity: 0.05;
            }

            50% {
                opacity: 0.2;
            }

            100% {
                opacity: 0.05;
            }
        }

        /* === CUSTOMIZED SCROLLBAR === */
        ::-webkit-scrollbar {
            width: 8px;
            height: 8px;
        }

        ::-webkit-scrollbar-track {
            background: var(--gray-light);
            border-radius: 10px;
        }

        ::-webkit-scrollbar-thumb {
            /* MODIFICATO: rosso */
            background: linear-gradient(var(--navbar-red-main), var(--navbar-red-gradient-dark));
            border-radius: 10px;
            transition: var(--transition);
        }

        ::-webkit-scrollbar-thumb:hover {
            /* MODIFICATO: rosso */
            background: linear-gradient(var(--navbar-red-gradient-dark), var(--navbar-red-gradient-dark));
        }

        /* === CUSTOMERS CONTAINER === */
        .customers-container {
            padding: 30px 25px;
            max-width: 1400px;
            margin: 0 auto;
            width: 100%;
            animation: fadeIn 0.6s ease-out;
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(20px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .customers-header {
            margin-bottom: 30px;
        }

        .customers-header h1 {
            font-size: 32px;
            font-weight: 700;
            margin-bottom: 10px;
            position: relative;
            display: inline-block;
        }

        .customers-header h1::after {
            content: '';
            position: absolute;
            width: 50%;
            height: 4px;
            /* MODIFICATO: rosso */
            background: linear-gradient(90deg, var(--navbar-red-main), var(--navbar-red-gradient-dark));
            bottom: -8px;
            left: 0;
            border-radius: 2px;
        }

        .customers-header p {
            font-size: 16px;
            color: var(--text-light);
            font-weight: 500;
        }

        /* === VIEW SWITCHER === */
        .view-switcher {
            display: flex;
            align-items: center;
            margin-bottom: 25px;
            background: white;
            border-radius: var(--radius);
            padding: 8px;
            box-shadow: var(--shadow);
            width: fit-content;
            transition: var(--transition);
        }

        .view-switcher:hover {
            box-shadow: var(--shadow-lg);
        }

        .view-btn {
            padding: 8px 16px;
            border-radius: var(--radius-sm);
            border: none;
            background: transparent;
            color: var(--text-light);
            cursor: pointer;
            font-size: 14px;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 7px;
            transition: var(--transition);
        }

        .view-btn.active {
            /* MODIFICATO: rosso */
            background: linear-gradient(135deg, var(--navbar-red-main), var(--navbar-red-gradient-dark));
            color: white;
            /* MODIFICATO: ombra rossa */
            box-shadow: 0 4px 15px rgba(238, 27, 27, 0.2);
        }

        .view-btn:not(.active):hover {
            background-color: var(--gray-light);
            /* MODIFICATO: rosso */
            color: var(--navbar-red-main);
            transform: translateY(-2px);
        }

        .view-btn i {
            font-size: 16px;
        }

        /* === SEARCH AND FILTERS === */
        .search-filter-container {
            display: flex;
            justify-content: space-between;
            margin-bottom: 25px;
            flex-wrap: wrap;
            gap: 15px;
        }

        .search-box {
            position: relative;
            flex-grow: 1;
            max-width: 400px;
        }

        .search-box input {
            width: 100%;
            padding: 14px 20px;
            padding-left: 45px;
            border: 2px solid var(--gray-dark);
            border-radius: var(--radius-sm);
            background-color: white;
            font-size: 15px;
            transition: var(--transition);
        }

        .search-box input:focus {
            outline: none;
            /* MODIFICATO: rosso */
            border-color: var(--navbar-red-main);
            box-shadow: 0 0 0 4px rgba(238, 27, 27, 0.15);
        }

        .search-box i {
            position: absolute;
            left: 15px;
            top: 50%;
            transform: translateY(-50%);
            color: var(--text-light);
            font-size: 18px;
            pointer-events: none;
            transition: var(--transition);
        }

        .search-box input:focus+i {
            /* MODIFICATO: rosso */
            color: var(--navbar-red-main);
        }

        .filter-controls {
            display: flex;
            gap: 15px;
            align-items: center;
        }

        .filter-dropdown {
            position: relative;
        }

        .filter-dropdown select {
            appearance: none;
            padding: 14px 35px 14px 20px;
            border: 2px solid var(--gray-dark);
            border-radius: var(--radius-sm);
            background-color: white;
            font-size: 15px;
            min-width: 150px;
            cursor: pointer;
            transition: var(--transition);
        }

        .filter-dropdown select:focus {
            outline: none;
            /* MODIFICATO: rosso */
            border-color: var(--navbar-red-main);
            box-shadow: 0 0 0 4px rgba(238, 27, 27, 0.15);
        }

        .filter-dropdown::after {
            content: '\f078';
            font-family: 'Font Awesome 5 Free';
            font-weight: 900;
            position: absolute;
            right: 15px;
            top: 50%;
            transform: translateY(-50%);
            color: var(--text-light);
            pointer-events: none;
            transition: var(--transition);
        }

        .filter-dropdown:hover::after {
            /* MODIFICATO: rosso */
            color: var(--navbar-red-main);
        }

        .action-btn {
            padding: 12px 20px;
            border: none;
            border-radius: var(--radius-sm);
            font-size: 14px;
            font-weight: 600;
            cursor: pointer;
            transition: var(--transition-spring);
            display: flex;
            align-items: center;
            gap: 8px;
            background: white;
            color: var(--text);
            border: 2px solid var(--gray-dark);
        }

        .action-btn i {
            transition: var(--transition-spring);
        }

        .action-btn:hover {
            transform: translateY(-3px);
            box-shadow: var(--shadow);
            /* MODIFICATO: rosso */
            border-color: var(--navbar-red-main);
            color: var(--navbar-red-main);
        }

        .action-btn:hover i {
            transform: scale(1.2) rotate(10deg);
        }

        .add-customer-btn {
            /* MODIFICATO: rosso */
            background: linear-gradient(135deg, var(--navbar-red-main), var(--navbar-red-gradient-dark));
            color: white;
            border: none;
            /* MODIFICATO: ombra rossa */
            box-shadow: 0 5px 15px rgba(238, 27, 27, 0.2);
        }

        .add-customer-btn:hover {
            /* MODIFICATO: ombra rossa */
            box-shadow: 0 8px 25px rgba(238, 27, 27, 0.3);
            color: white;
        }

        .export-btn {
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 12px 20px;
            border-radius: var(--radius-sm);
            background: white;
            color: var(--text);
            font-weight: 600;
            cursor: pointer;
            transition: var(--transition-spring);
            border: 2px solid var(--gray-dark);
        }

        .export-btn:hover {
            transform: translateY(-3px);
            box-shadow: var(--shadow);
            /* Mantenuto colore secondario originale per Export, oppure cambiare in var(--accent-orange) o altro */
            border-color: var(--accent-orange);
            color: var(--accent-orange);
        }

        .export-btn:hover i {
            transform: scale(1.2) rotate(-10deg);
        }

        /* === CUSTOMER CARDS VIEW === */
        .customers-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 25px;
            margin-bottom: 30px;
        }

        .customer-card {
            background: white;
            border-radius: var(--radius);
            overflow: hidden;
            box-shadow: var(--shadow);
            transition: var(--transition-spring);
            transform-style: preserve-3d;
            perspective: 1000px;
            position: relative;
            height: 400px;
        }

        .customer-card-inner {
            width: 100%;
            height: 100%;
            transition: transform 0.8s;
            transform-style: preserve-3d;
            position: relative;
        }

        .customer-card:hover {
            box-shadow: var(--shadow-lg);
        }

        .customer-card.flipped .customer-card-inner {
            transform: rotateY(180deg);
        }

        .customer-card-front,
        .customer-card-back {
            position: absolute;
            width: 100%;
            height: 100%;
            backface-visibility: hidden;
            border-radius: var(--radius);
            overflow: hidden;
        }

        .customer-card-back {
            transform: rotateY(180deg);
            padding: 20px;
            /* MODIFICATO: rosso */
            background: linear-gradient(135deg, var(--navbar-red-gradient-dark), var(--navbar-red-main));
            color: white;
        }

        .customer-card-header {
            height: 120px;
            /* MODIFICATO: rosso */
            background: linear-gradient(135deg, var(--navbar-red-main), var(--navbar-red-gradient-dark));
            padding: 20px;
            color: white;
            position: relative;
            overflow: hidden;
        }

        .customer-card-header::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(45deg, transparent, rgba(255, 255, 255, 0.1), transparent);
            animation: shimmer 2s infinite;
        }

        @keyframes shimmer {
            0% {
                transform: translateX(-100%);
            }

            100% {
                transform: translateX(100%);
            }
        }

        .customer-card-body {
            padding: 20px;
            position: relative;
            z-index: 1;
        }

        .vip-badge {
            /* Mantenuto Giallo/Arancio */
            position: absolute;
            top: 15px;
            right: 15px;
            background: linear-gradient(135deg, #f1c40f, #e67e22);
            color: white;
            border-radius: 30px;
            padding: 5px 15px;
            font-size: 12px;
            font-weight: 700;
            box-shadow: 0 5px 15px rgba(241, 196, 15, 0.3);
            display: flex;
            align-items: center;
            gap: 5px;
            z-index: 10;
        }

        .vip-badge i {
            font-size: 12px;
        }

        .customer-avatar-container {
            position: absolute;
            top: 75px;
            left: 50%;
            transform: translateX(-50%);
            width: 100px;
            height: 100px;
            border-radius: 50%;
            overflow: hidden;
            border: 4px solid white;
            box-shadow: var(--shadow);
            z-index: 10;
            transition: var(--transition-spring);
        }

        .customer-card:hover .customer-avatar-container {
            transform: translateX(-50%) scale(1.05);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
        }

        .customer-avatar {
            width: 100%;
            height: 100%;
            object-fit: cover;
            border-radius: 50%;
            transition: var(--transition);
        }

        .customer-card:hover .customer-avatar {
            transform: scale(1.1) rotate(5deg);
        }

        .customer-info {
            margin-top: 50px;
            text-align: center;
        }

        .customer-name {
            font-size: 18px;
            font-weight: 700;
            margin: 10px 0 5px;
            color: var(--text);
        }

        .customer-email {
            font-size: 14px;
            color: var(--text-light);
            margin-bottom: 15px;
        }

        .customer-stats {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 10px;
            margin-top: 20px;
        }

        .customer-stat {
            background: var(--gray-light);
            padding: 10px;
            border-radius: var(--radius-sm);
            text-align: center;
            transition: var(--transition);
        }

        .customer-stat:hover {
            background: white;
            box-shadow: var(--shadow);
            transform: translateY(-3px);
        }

        .stat-value {
            font-size: 20px;
            font-weight: 700;
            /* MODIFICATO: rosso */
            color: var(--navbar-red-main);
            margin-bottom: 3px;
        }

        .stat-label {
            font-size: 12px;
            color: var(--text-light);
            font-weight: 600;
        }

        .customer-actions {
            position: absolute;
            bottom: 20px;
            left: 20px;
            right: 20px;
            display: flex;
            justify-content: center;
            gap: 10px;
        }

        .flip-btn,
        .detail-btn,
        .edit-btn {
            padding: 8px 15px;
            border-radius: var(--radius-sm);
            font-size: 13px;
            font-weight: 600;
            cursor: pointer;
            transition: var(--transition-spring);
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 5px;
            border: none;
            flex: 1;
        }

        .flip-btn {
            background-color: rgba(238, 27, 27, 0.1);
            color: var(--navbar-red-main);
        }

        /* MODIFICATO: rosso */
        .detail-btn {
            background-color: rgba(46, 204, 113, 0.1);
            color: var(--accent-green);
        }

        /* Verde ok */
        .edit-btn {
            background-color: rgba(243, 156, 18, 0.1);
            color: var(--accent-orange);
        }

        /* Arancione ok */

        .flip-btn:hover,
        .detail-btn:hover,
        .edit-btn:hover {
            transform: translateY(-3px);
            box-shadow: var(--shadow);
        }

        .flip-btn:hover {
            background-color: var(--navbar-red-main);
            color: white;
        }

        /* MODIFICATO: rosso */
        .detail-btn:hover {
            background-color: var(--accent-green);
            color: white;
        }

        /* Verde ok */
        .edit-btn:hover {
            background-color: var(--accent-orange);
            color: white;
        }

        /* Arancione ok */

        /* Card back styles */
        .card-back-header {
            text-align: center;
            margin-bottom: 20px;
        }

        .card-back-header h3 {
            font-size: 20px;
            margin-bottom: 5px;
        }

        .card-back-header p {
            font-size: 14px;
            opacity: 0.8;
        }

        .stats-chart-container-card {
            position: relative;
            height: 180px;
            margin-bottom: 20px;
        }

        .loyalty-progress {
            margin-bottom: 20px;
        }

        .loyalty-title {
            display: flex;
            justify-content: space-between;
            margin-bottom: 5px;
            font-size: 14px;
        }

        .loyalty-bar {
            height: 12px;
            background: rgba(255, 255, 255, 0.2);
            border-radius: 6px;
            overflow: hidden;
            position: relative;
        }

        .loyalty-progress-bar {
            height: 100%;
            /* MODIFICATO: gradiente arancione/rosso */
            background: linear-gradient(to right, var(--accent-orange), var(--navbar-red-main));
            border-radius: 6px;
            position: relative;
            animation: growWidth 1.5s ease-out;
        }

        @keyframes growWidth {
            from {
                width: 0;
            }
        }

        .loyalty-rewards {
            margin-top: 5px;
            font-size: 12px;
            display: flex;
            justify-content: space-between;
        }

        .loyalty-point {
            position: relative;
            width: 15px;
            height: 15px;
        }

        .loyalty-point::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 6px;
            height: 6px;
            background: rgba(255, 255, 255, 0.5);
            border-radius: 50%;
            transform: translate(-50%, -50%);
        }

        .loyalty-point.active::before {
            /* MODIFICATO: arancione */
            background: var(--accent-orange);
            box-shadow: 0 0 10px var(--accent-orange);
            animation: pulseOrange 2s infinite;
        }

        /* Rinominato animazione */

        @keyframes pulseOrange {

            /* Nuova animazione per arancio */
            0% {
                box-shadow: 0 0 0 0 rgba(243, 156, 18, 0.7);
            }

            70% {
                box-shadow: 0 0 0 8px rgba(243, 156, 18, 0);
            }

            100% {
                box-shadow: 0 0 0 0 rgba(243, 156, 18, 0);
            }
        }

        .card-back-footer {
            display: flex;
            justify-content: center;
        }

        .back-to-front-btn {
            padding: 10px 20px;
            background: rgba(255, 255, 255, 0.2);
            border: 1px solid rgba(255, 255, 255, 0.4);
            color: white;
            border-radius: var(--radius-sm);
            cursor: pointer;
            transition: var(--transition);
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .back-to-front-btn:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: translateY(-3px);
        }

        /* === CUSTOMER TABLE VIEW === */
        .customers-table-container {
            background: white;
            border-radius: var(--radius);
            overflow: hidden;
            box-shadow: var(--shadow);
            margin-bottom: 30px;
        }

        .customers-table {
            width: 100%;
            border-collapse: collapse;
        }

        .customers-table th,
        .customers-table td {
            padding: 16px 20px;
            text-align: left;
        }

        .customers-table th {
            background-color: var(--gray-light);
            color: var(--text);
            font-weight: 600;
            position: sticky;
            top: 0;
            z-index: 10;
            box-shadow: 0 1px 0 rgba(0, 0, 0, 0.05);
            transition: var(--transition);
        }

        .customers-table th:hover {
            background-color: var(--gray);
        }

        .customers-table tbody tr {
            border-bottom: 1px solid var(--gray-light);
            transition: var(--transition);
        }

        .customers-table tbody tr:hover {
            /* MODIFICATO: rosso tenue */
            background-color: rgba(238, 27, 27, 0.03);
        }

        .customers-table tbody tr:last-child {
            border-bottom: none;
        }

        .customer-table-info {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .table-customer-avatar {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            object-fit: cover;
            border: 2px solid var(--gray-dark);
            transition: var(--transition-spring);
        }

        .customers-table tr:hover .table-customer-avatar {
            transform: scale(1.1) rotate(10deg);
            /* MODIFICATO: rosso */
            border-color: var(--navbar-red-main);
            box-shadow: 0 5px 15px rgba(238, 27, 27, 0.2);
        }

        .table-customer-name {
            font-weight: 600;
            color: var(--text);
            transition: var(--transition);
        }

        .table-customer-name:hover {
            /* MODIFICATO: rosso */
            color: var(--navbar-red-main);
        }

        .table-customer-email {
            font-size: 14px;
            color: var(--text-light);
        }

        .customer-status {
            padding: 6px 12px;
            border-radius: 30px;
            font-size: 13px;
            font-weight: 600;
            display: inline-flex;
            align-items: center;
            gap: 5px;
        }

        .status-active {
            background-color: rgba(46, 204, 113, 0.15);
            color: var(--accent-green);
        }

        /* Verde ok */
        .status-inactive {
            background-color: rgba(0, 0, 0, 0.05);
            color: var(--text-light);
        }

        /* Grigio ok */
        .status-vip {
            background-color: rgba(241, 196, 15, 0.15);
            color: var(--accent-yellow);
        }

        /* Giallo ok */

        .table-loyalty-points {
            /* Arancione ok */
            background: rgba(243, 156, 18, 0.15);
            color: var(--accent-orange);
            padding: 6px 12px;
            border-radius: 30px;
            font-size: 13px;
            font-weight: 600;
            display: inline-flex;
            align-items: center;
            gap: 5px;
        }

        .table-actions {
            display: flex;
            gap: 10px;
        }

        .table-action-btn {
            width: 36px;
            height: 36px;
            border-radius: var(--radius-sm);
            display: flex;
            align-items: center;
            justify-content: center;
            border: none;
            cursor: pointer;
            transition: var(--transition-spring);
            font-size: 15px;
        }

        .table-view-btn {
            background-color: rgba(238, 27, 27, 0.1);
            color: var(--navbar-red-main);
        }

        /* MODIFICATO: rosso */
        .table-edit-btn {
            background-color: rgba(243, 156, 18, 0.1);
            color: var(--accent-orange);
        }

        /* Arancione ok */
        .table-delete-btn {
            background-color: rgba(231, 76, 60, 0.1);
            color: var(--accent-red);
        }

        /* Rosso ok */

        .table-action-btn:hover {
            transform: translateY(-3px) scale(1.1);
        }

        .table-view-btn:hover {
            background-color: var(--navbar-red-main);
            color: white;
            box-shadow: 0 5px 15px rgba(238, 27, 27, 0.2);
        }

        /* MODIFICATO: rosso */
        .table-edit-btn:hover {
            background-color: var(--accent-orange);
            color: white;
            box-shadow: 0 5px 15px rgba(243, 156, 18, 0.2);
        }

        /* Arancione ok */
        .table-delete-btn:hover {
            background-color: var(--accent-red);
            color: white;
            box-shadow: 0 5px 15px rgba(231, 76, 60, 0.2);
        }

        /* Rosso ok */

        /* === MAP VIEW === */
        .customers-map-container {
            background: white;
            border-radius: var(--radius);
            overflow: hidden;
            box-shadow: var(--shadow);
            padding: 20px;
            margin-bottom: 30px;
        }

        .map-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .map-title {
            font-size: 18px;
            font-weight: 700;
            color: var(--text);
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .map-filters {
            display: flex;
            gap: 10px;
        }

        .map-filter-btn {
            padding: 8px 15px;
            border: 1px solid var(--gray-dark);
            border-radius: 30px;
            background: white;
            color: var(--text);
            font-size: 13px;
            font-weight: 600;
            cursor: pointer;
            transition: var(--transition);
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .map-filter-btn:hover {
            /* MODIFICATO: rosso */
            border-color: var(--navbar-red-main);
            color: var(--navbar-red-main);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
            transform: translateY(-2px);
        }

        .map-filter-btn.active {
            /* MODIFICATO: rosso */
            background: var(--navbar-red-main);
            color: white;
            border-color: var(--navbar-red-main);
            box-shadow: 0 5px 15px rgba(238, 27, 27, 0.2);
        }

        .map-canvas-container {
            position: relative;
            height: 500px;
            border-radius: var(--radius);
            overflow: hidden;
            box-shadow: inset 0 0 15px rgba(0, 0, 0, 0.1);
        }

        .map-canvas {
            width: 100%;
            height: 100%;
            border-radius: var(--radius);
            background-color: var(--gray-light);
            background-image: url('https://picsum.photos/seed/citymap/1200/500');
            background-position: center;
            background-size: cover;
        }

        .customer-marker {
            position: absolute;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background-color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
            /* MODIFICATO: rosso */
            border: 2px solid var(--navbar-red-main);
            cursor: pointer;
            transition: var(--transition-spring), opacity 0.3s ease;
            z-index: 5;
            opacity: 1;
        }

        .customer-marker.filtered-out {
            opacity: 0.3;
            transform: scale(0.8);
        }

        .customer-marker::after {
            content: '';
            position: absolute;
            width: 10px;
            height: 10px;
            /* MODIFICATO: rosso */
            background: var(--navbar-red-main);
            border-radius: 50%;
            bottom: -15px;
            transform: translateX(-50%);
            box-shadow: 0 5px 10px rgba(0, 0, 0, 0.1);
            left: 50%;
        }

        .customer-marker::before {
            content: '';
            position: absolute;
            border-width: 10px;
            border-style: solid;
            /* MODIFICATO: rosso */
            border-color: var(--navbar-red-main) transparent transparent transparent;
            bottom: -25px;
            left: calc(50% - 10px);
            filter: drop-shadow(0 5px 5px rgba(0, 0, 0, 0.1));
        }

        .customer-marker img {
            width: 30px;
            height: 30px;
            border-radius: 50%;
            object-fit: cover;
        }

        .customer-marker:hover {
            transform: scale(1.2);
            z-index: 10;
        }

        .customer-marker.marker-vip {
            border-color: var(--accent-yellow);
        }

        /* Giallo VIP ok */
        .customer-marker.marker-vip::after {
            background: var(--accent-yellow);
        }

        .customer-marker.marker-vip::before {
            border-top-color: var(--accent-yellow);
        }

        .marker-active {
            position: absolute;
            width: 50px;
            height: 50px;
            background-color: white;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            /* MODIFICATO: rosso */
            box-shadow: 0 10px 30px rgba(238, 27, 27, 0.3);
            border: 3px solid var(--navbar-red-main);
            z-index: 20;
            transition: var(--transition-spring);
            animation: markerPulseRed 2s infinite;
            transform-origin: center bottom;
        }

        /* Nuova animazione rossa */
        @keyframes markerPulseRed {

            /* Nuova animazione rossa */
            0% {
                transform: scale(1);
            }

            50% {
                transform: scale(1.05);
            }

            100% {
                transform: scale(1);
            }
        }

        .marker-active img {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            object-fit: cover;
        }

        .marker-active::after {
            content: '';
            position: absolute;
            width: 15px;
            height: 15px;
            /* MODIFICATO: rosso */
            background: var(--navbar-red-main);
            border-radius: 50%;
            bottom: -20px;
            transform: translateX(-50%);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
            left: 50%;
        }

        .marker-active::before {
            content: '';
            position: absolute;
            border-width: 15px;
            border-style: solid;
            /* MODIFICATO: rosso */
            border-color: var(--navbar-red-main) transparent transparent transparent;
            bottom: -35px;
            left: calc(50% - 15px);
            filter: drop-shadow(0 5px 10px rgba(0, 0, 0, 0.2));
        }

        .marker-info {
            position: absolute;
            bottom: 70px;
            left: 50%;
            transform: translateX(-50%);
            background: white;
            width: 200px;
            border-radius: var(--radius-sm);
            padding: 15px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
            z-index: 30;
            text-align: center;
            opacity: 0;
            visibility: hidden;
            transition: opacity 0.3s ease, visibility 0.3s ease;
        }

        .customer-marker:hover .marker-info,
        .marker-active .marker-info {
            opacity: 1;
            visibility: visible;
        }

        .marker-info::after {
            content: '';
            position: absolute;
            border-width: 10px;
            border-style: solid;
            border-color: white transparent transparent transparent;
            bottom: -20px;
            left: calc(50% - 10px);
        }

        .marker-info h3 {
            font-size: 16px;
            font-weight: 700;
            margin-bottom: 5px;
            color: var(--text);
        }

        .marker-info p {
            font-size: 14px;
            color: var(--text-light);
            margin-bottom: 10px;
        }

        .marker-info-actions {
            display: flex;
            justify-content: center;
            gap: 10px;
        }

        .marker-info-btn {
            padding: 5px 10px;
            border-radius: var(--radius-sm);
            background: var(--gray-light);
            color: var(--text);
            border: none;
            font-size: 12px;
            font-weight: 600;
            cursor: pointer;
            transition: var(--transition);
        }

        .marker-info-btn:hover {
            /* MODIFICATO: rosso */
            background: var(--navbar-red-main);
            color: white;
        }

        /* === STATS VIEW === */
        .customers-stats-container {
            margin-bottom: 30px;
        }

        .stats-row {
            display: flex;
            gap: 20px;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }

        .stats-card {
            flex: 1;
            min-width: 250px;
            background: white;
            border-radius: var(--radius);
            padding: 25px;
            box-shadow: var(--shadow);
            transition: var(--transition-spring);
            position: relative;
            overflow: hidden;
        }

        .stats-card:hover {
            transform: translateY(-10px);
            box-shadow: var(--shadow-lg);
        }

        .stats-card::after {
            content: '';
            position: absolute;
            width: 100%;
            height: 5px;
            bottom: 0;
            left: 0;
            /* MODIFICATO: rosso */
            background: linear-gradient(90deg, var(--navbar-red-main), var(--navbar-red-gradient-dark));
            transform: translateY(5px);
            transition: var(--transition);
        }

        .stats-card:hover::after {
            transform: translateY(0);
        }

        .stats-card-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .stats-card-title {
            font-weight: 700;
            color: var(--text);
            font-size: 16px;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .stats-card-icon {
            width: 40px;
            height: 40px;
            border-radius: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            /* MODIFICATO: rosso */
            background: linear-gradient(135deg, var(--navbar-red-main), var(--navbar-red-gradient-dark));
            color: white;
            /* MODIFICATO: rosso */
            box-shadow: 0 5px 15px rgba(238, 27, 27, 0.2);
            font-size: 20px;
            transition: var(--transition-spring);
        }

        .stats-card:hover .stats-card-icon {
            transform: rotateY(180deg);
        }

        .stats-card-body {
            text-align: center;
        }

        .stats-card-value {
            font-size: 36px;
            font-weight: 800;
            /* MODIFICATO: rosso */
            color: var(--navbar-red-main);
            margin-bottom: 5px;
            /* MODIFICATO: rosso */
            background: linear-gradient(120deg, var(--navbar-red-main), var(--navbar-red-gradient-dark));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .stats-card-trend {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 5px;
            font-size: 14px;
            font-weight: 600;
        }

        .trend-up {
            color: var(--accent-green);
        }

        /* Verde ok */
        .trend-down {
            color: var(--accent-red);
        }

        /* Rosso ok */

        .stats-chart-container {
            background: white;
            border-radius: var(--radius);
            padding: 25px;
            box-shadow: var(--shadow);
            transition: var(--transition);
            margin-bottom: 20px;
        }

        .stats-chart-container:hover {
            box-shadow: var(--shadow-lg);
            transform: translateY(-5px);
        }

        .stats-chart-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .stats-chart-title {
            font-weight: 700;
            color: var(--text);
            font-size: 18px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .stats-chart-filters {
            display: flex;
            gap: 10px;
        }

        .chart-filter-btn {
            padding: 8px 15px;
            border: 1px solid var(--gray-dark);
            border-radius: var(--radius-sm);
            background: white;
            color: var(--text);
            font-size: 13px;
            font-weight: 600;
            cursor: pointer;
            transition: var(--transition);
        }

        .chart-filter-btn:hover {
            /* MODIFICATO: rosso */
            border-color: var(--navbar-red-main);
            color: var(--navbar-red-main);
        }

        .chart-filter-btn.active {
            /* MODIFICATO: rosso */
            background: var(--navbar-red-main);
            color: white;
            border-color: var(--navbar-red-main);
        }

        .chart-wrapper {
            height: 350px;
            position: relative;
        }

        /* === PAGINATION === */
        .pagination {
            display: flex;
            justify-content: center;
            align-items: center;
            margin: 30px 0;
            gap: 8px;
        }

        .pagination a,
        .pagination span {
            display: flex;
            align-items: center;
            justify-content: center;
            width: 40px;
            height: 40px;
            border: 2px solid var(--gray-dark);
            border-radius: 50%;
            color: var(--text);
            text-decoration: none;
            font-weight: 600;
            transition: var(--transition-spring);
            cursor: pointer;
        }

        .pagination span {
            border-color: transparent;
            color: var(--text-light);
        }

        .pagination a:hover {
            /* MODIFICATO: rosso */
            border-color: var(--navbar-red-main);
            color: var(--navbar-red-main);
            transform: translateY(-3px) scale(1.1);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
        }

        .pagination a.active {
            /* MODIFICATO: rosso */
            background: linear-gradient(135deg, var(--navbar-red-main), var(--navbar-red-gradient-dark));
            color: white;
            border-color: transparent;
            /* MODIFICATO: ombra rossa */
            box-shadow: 0 5px 15px rgba(238, 27, 27, 0.2);
        }

        .pagination a.disabled {
            color: var(--gray-dark);
            border-color: var(--gray-dark);
            cursor: not-allowed;
            pointer-events: none;
        }

        /* === TOAST NOTIFICATION === */
        .toast-notification {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background: white;
            border-radius: var(--radius);
            padding: 15px 20px;
            box-shadow: var(--shadow-lg);
            z-index: 1000;
            display: flex;
            align-items: center;
            gap: 15px;
            transform: translateY(100px);
            opacity: 0;
            transition: all 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);
            max-width: 350px;
        }

        .toast-notification.show {
            transform: translateY(0);
            opacity: 1;
        }

        .toast-icon {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 20px;
            flex-shrink: 0;
        }

        .toast-success .toast-icon {
            background-color: rgba(46, 204, 113, 0.15);
            color: var(--accent-green);
        }

        /* Verde ok */
        .toast-error .toast-icon {
            background-color: rgba(231, 76, 60, 0.15);
            color: var(--accent-red);
        }

        /* Rosso ok */
        .toast-warning .toast-icon {
            background-color: rgba(243, 156, 18, 0.15);
            color: var(--accent-orange);
        }

        /* Arancio ok */
        .toast-info .toast-icon {
            /* Rosso per info */
            background-color: rgba(238, 27, 27, 0.15);
            color: var(--navbar-red-main);
        }

        .toast-content {
            flex-grow: 1;
        }

        .toast-title {
            font-weight: 600;
            margin-bottom: 5px;
        }

        .toast-message {
            font-size: 14px;
            color: var(--text-light);
        }

        .toast-close {
            cursor: pointer;
            font-size: 18px;
            color: var(--text-light);
            transition: var(--transition);
            padding: 5px;
        }

        .toast-close:hover {
            color: var(--text);
            transform: rotate(90deg);
        }

        /* === MODAL === */
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(5px);
            z-index: 1000;
            display: flex;
            align-items: center;
            justify-content: center;
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s ease;
        }

        .modal-overlay.open {
            opacity: 1;
            visibility: visible;
        }

        .modal {
            width: 90%;
            max-width: 600px;
            background-color: white;
            border-radius: var(--radius);
            overflow: hidden;
            box-shadow: var(--shadow-lg);
            transform: scale(0.9);
            opacity: 0;
            transition: all 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);
        }

        .modal-overlay.open .modal {
            transform: scale(1);
            opacity: 1;
        }

        .modal-header {
            padding: 20px 25px;
            /* MODIFICATO: rosso */
            background: linear-gradient(135deg, var(--navbar-red-main), var(--navbar-red-gradient-dark));
            color: white;
            position: relative;
        }

        .modal-header h3 {
            margin: 0;
            font-size: 20px;
            font-weight: 600;
        }

        .modal-close {
            position: absolute;
            right: 20px;
            top: 20px;
            background: transparent;
            border: none;
            color: white;
            font-size: 24px;
            cursor: pointer;
            transition: var(--transition);
        }

        .modal-close:hover {
            transform: rotate(90deg);
        }

        .modal-body {
            padding: 25px;
            max-height: 70vh;
            overflow-y: auto;
        }

        .modal-footer {
            padding: 20px 25px;
            display: flex;
            justify-content: flex-end;
            gap: 15px;
            border-top: 1px solid var(--gray-dark);
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
            color: var(--text);
        }

        .form-control {
            width: 100%;
            padding: 12px 15px;
            border: 2px solid var(--gray-dark);
            border-radius: var(--radius-sm);
            font-size: 15px;
            transition: var(--transition);
        }

        .form-control:focus {
            outline: none;
            /* MODIFICATO: rosso */
            border-color: var(--navbar-red-main);
            box-shadow: 0 0 0 3px rgba(238, 27, 27, 0.2);
        }

        /* Customer profile modal */
        .customer-profile-modal .modal {
            max-width: 800px;
        }

        .profile-header {
            /* MODIFICATO: rosso */
            background: linear-gradient(135deg, var(--navbar-red-gradient-dark), var(--navbar-red-main));
            color: white;
            padding: 30px;
            position: relative;
            overflow: hidden;
        }

        .profile-header::before {
            content: '';
            position: absolute;
            top: 0;
            right: 0;
            bottom: 0;
            left: 0;
            background: url('https://picsum.photos/seed/profilebg/800/200');
            opacity: 0.1;
        }

        .profile-header-content {
            display: flex;
            align-items: center;
            gap: 20px;
            position: relative;
            z-index: 5;
        }

        .profile-avatar {
            width: 100px;
            height: 100px;
            border-radius: 50%;
            border: 4px solid rgba(255, 255, 255, 0.3);
            object-fit: cover;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }

        .profile-info h3 {
            font-size: 24px;
            margin-bottom: 5px;
        }

        .profile-info p {
            opacity: 0.8;
            margin: 0;
        }

        .profile-meta {
            display: flex;
            margin-top: 10px;
            gap: 15px;
        }

        .profile-meta-item {
            display: flex;
            align-items: center;
            gap: 5px;
            background: rgba(255, 255, 255, 0.2);
            padding: 5px 10px;
            border-radius: 20px;
            font-size: 14px;
        }

        .profile-tabs {
            display: flex;
            background: white;
            padding: 0 30px;
            border-bottom: 1px solid var(--gray-dark);
        }

        .profile-tab {
            padding: 15px 20px;
            border-bottom: 3px solid transparent;
            cursor: pointer;
            font-weight: 600;
            color: var(--text-light);
            transition: var(--transition);
        }

        .profile-tab:hover {
            /* MODIFICATO: rosso */
            color: var(--navbar-red-main);
        }

        .profile-tab.active {
            /* MODIFICATO: rosso */
            border-color: var(--navbar-red-main);
            color: var(--navbar-red-main);
        }

        .profile-content {
            padding: 30px;
            min-height: 200px;
        }

        .profile-content .profile-tab-content:not([data-tab="info"]) {
            display: none;
        }

        .profile-section {
            margin-bottom: 30px;
        }

        .profile-section-title {
            font-size: 18px;
            font-weight: 700;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 1px solid var(--gray-dark);
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .profile-order-list {
            display: grid;
            gap: 15px;
        }

        .profile-order-item {
            padding: 15px;
            border-radius: var(--radius-sm);
            background: var(--gray-light);
            display: flex;
            justify-content: space-between;
            align-items: center;
            transition: var(--transition);
        }

        .profile-order-item:hover {
            background: white;
            box-shadow: var(--shadow);
            transform: translateY(-3px);
        }

        .profile-order-info {
            display: flex;
            flex-direction: column;
            gap: 5px;
        }

        .profile-order-id {
            font-weight: 700;
            /* MODIFICATO: rosso */
            color: var(--navbar-red-main);
        }

        .profile-order-date {
            font-size: 14px;
            color: var(--text-light);
        }

        .profile-order-amount {
            font-weight: 700;
            font-size: 18px;
            color: var(--text);
        }

        .profile-order-status {
            padding: 5px 10px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 600;
        }

        .profile-stats {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 15px;
        }

        .profile-stat-card {
            background: var(--gray-light);
            border-radius: var(--radius-sm);
            padding: 20px;
            text-align: center;
            transition: var(--transition);
        }

        .profile-stat-card:hover {
            background: white;
            box-shadow: var(--shadow);
            transform: translateY(-3px);
        }

        .profile-stat-value {
            font-size: 24px;
            font-weight: 700;
            /* MODIFICATO: rosso */
            color: var(--navbar-red-main);
            margin-bottom: 5px;
        }

        .profile-stat-label {
            color: var(--text-light);
            font-weight: 500;
        }

        .no-data-message {
            text-align: center;
            padding: 20px;
            color: var(--text-light);
            font-style: italic;
        }


        /* === RESPONSIVE DESIGN === */
        @media (max-width: 1200px) {
            .header-nav a span {
                display: none;
            }

            .header-nav a {
                padding: 10px;
                font-size: 16px;
                justify-content: center;
            }

            .header-nav a i {
                margin: 0;
            }

            .user-role-badge {
                padding: 8px 12px;
            }

            .customers-grid {
                grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            }

            .stats-row {
                flex-wrap: wrap;
            }

            .stats-card {
                flex: 0 0 calc(50% - 10px);
                margin-bottom: 10px;
            }
        }

        @media (max-width: 992px) {
            .header-container {
                flex-wrap: wrap;
                justify-content: center;
                gap: 10px;
            }

            .logo-container {
                margin-right: auto;
            }

            .user-controls {
                margin-left: auto;
            }

            header {
                height: auto;
                padding: 10px 0;
            }

            /* Gi√† modificato per colore */
            .customers-container {
                padding: 20px 15px;
            }

            .search-filter-container {
                flex-direction: column;
            }

            .search-box {
                max-width: 100%;
            }

            .filter-controls {
                justify-content: space-between;
                width: 100%;
                flex-wrap: wrap;
            }

            .filter-dropdown select {
                width: auto;
                min-width: 150px;
            }

            /* Allow shrinking */
            .action-btn {
                flex-grow: 1;
                justify-content: center;
            }

            /* Make buttons take space */
        }

        @media (max-width: 768px) {
            .header-container {
                padding: 0 15px;
                flex-direction: column;
                gap: 15px;
            }

            .header-nav {
                flex-wrap: wrap;
                justify-content: center;
                gap: 8px;
                margin: 10px 0;
            }

            .logo-container,
            .user-controls {
                margin: 0;
                justify-content: center;
                width: 100%;
            }

            .customers-grid {
                grid-template-columns: 1fr;
            }

            .stats-card {
                flex: 0 0 100%;
            }

            .customers-table th:nth-child(n+4),
            .customers-table td:nth-child(n+4) {
                display: none;
            }

            /* Hide less important columns */
            .table-actions {
                flex-direction: row;
            }

            /* Keep actions horizontal if possible */
            .view-switcher {
                margin-bottom: 15px;
            }

            .pagination a,
            .pagination span {
                width: 35px;
                height: 35px;
                font-size: 14px;
            }

            .profile-header-content {
                flex-direction: column;
                text-align: center;
            }

            .profile-tabs {
                justify-content: center;
                flex-wrap: wrap;
            }
        }

        @media (max-width: 480px) {
            .customers-header h1 {
                font-size: 24px;
            }

            .search-filter-container {
                gap: 10px;
            }

            .filter-controls {
                flex-direction: column;
            }

            .add-customer-btn,
            .export-btn {
                width: 100%;
                justify-content: center;
            }

            .filter-dropdown {
                width: 100%;
            }

            .filter-dropdown select {
                width: 100%;
            }

            .map-filters {
                flex-direction: column;
                gap: 10px;
            }

            .chart-filter-btn {
                padding: 6px 10px;
                font-size: 12px;
            }

            .stats-chart-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 10px;
            }

            .pagination {
                flex-wrap: wrap;
            }

            .table-actions {
                flex-wrap: wrap;
            }

            /* Allow table actions to wrap */
            .modal {
                max-width: 95%;
            }

            .modal-body {
                padding: 15px;
                max-height: calc(90vh - 130px);
            }

            .modal-footer {
                padding: 15px;
                flex-direction: column;
                gap: 10px;
            }

            .modal-footer button {
                width: 100%;
            }
        }
    </style>
</head>

<body class="capo-role">
    <!-- Particle Background -->
    <div class="particles" id="particles"></div>

    <!-- Header migliorato -->
    <header>
        <div class="header-container">
            <div class="logo-container">
                <img src="/img/logo.png" alt="YourBite Logo" class="logo">
                <h1 class="header-title">YourBite</h1>
            </div>

            <div class="header-nav">
                <!-- Pulsante Homepage con effetto speciale -->
                <a href="/homepage_capo" class="home-button">
                    <i class="fas fa-home"></i> <span>Homepage</span>
                </a>
                <a href="/dashboard">
                    <i class="fas fa-chart-line"></i> <span>Dashboard</span>
                </a>
                <a href="/ordini">
                    <i class="fas fa-shopping-bag"></i> <span>Ordini</span>
                </a>
                <a href="/menu">
                    <i class="fas fa-utensils"></i> <span>Menu</span>
                </a>
                <a href="/clienti" class="active"> <!-- Gi√† active -->
                    <i class="fas fa-users"></i> <span>Clienti</span>
                </a>
                <a href="/impostazioni">
                    <i class="fas fa-cog"></i> <span>Impostazioni</span>
                </a>

                <div style="position: relative; margin-left: 10px;">
                    <span id="notification-badge" style="display: none;">0</span>
                    <span class="user-role-badge">
                        <i class="fas fa-crown"></i> Capo
                    </span>
                </div>
            </div>

            <div class="user-controls">
                <span class="username">Admin</span> <!-- Username placeholder -->
                <button class="logout-btn btn-glow" onclick="logout()">
                    <i class="fas fa-sign-out-alt"></i> Logout
                </button>
            </div>
        </div>
    </header>

    <div class="customers-container">
        <!-- Customers Header -->
        <div class="customers-header animate-in">
            <h1 class="text-gradient">Gestione Clienti</h1> <!-- Rosso -->
            <p>Visualizza, analizza e gestisci i clienti del tuo locale</p>
        </div>

        <!-- Customer Overview Stats -->
        <div class="stats-row animate-in animate-delay-1">
            <div class="stats-card card-hover-effect">
                <div class="stats-card-header">
                    <span class="stats-card-title">Clienti Totali</span>
                    <div class="stats-card-icon"><i class="fas fa-users"></i></div> <!-- Rosso -->
                </div>
                <div class="stats-card-body">
                    <div class="stats-card-value" id="total-customers-value">0</div> <!-- Rosso -->
                    <div class="stats-card-trend trend-up">
                        <i class="fas fa-arrow-up"></i> +12% questo mese
                    </div>
                </div>
            </div>

            <div class="stats-card card-hover-effect">
                <div class="stats-card-header">
                    <span class="stats-card-title">Clienti Attivi</span>
                    <div class="stats-card-icon" style="background: linear-gradient(135deg, #2ecc71, #27ae60);">
                        <!-- Verde -->
                        <i class="fas fa-user-check"></i>
                    </div>
                </div>
                <div class="stats-card-body">
                    <div class="stats-card-value" id="active-customers-value"
                        style="background: linear-gradient(120deg, #2ecc71, #27ae60); -webkit-background-clip: text;">0
                    </div> <!-- Verde -->
                    <div class="stats-card-trend trend-up">
                        <i class="fas fa-arrow-up"></i> +8% questo mese
                    </div>
                </div>
            </div>

            <div class="stats-card card-hover-effect">
                <div class="stats-card-header">
                    <span class="stats-card-title">Spesa Media</span>
                    <div class="stats-card-icon" style="background: linear-gradient(135deg, #f39c12, #e67e22);">
                        <!-- Arancione -->
                        <i class="fas fa-euro-sign"></i>
                    </div>
                </div>
                <div class="stats-card-body">
                    <div class="stats-card-value" id="average-spend-value"
                        style="background: linear-gradient(120deg, #f39c12, #e67e22); -webkit-background-clip: text;">
                        ‚Ç¨24,70</div> <!-- Arancione -->
                    <div class="stats-card-trend trend-up">
                        <i class="fas fa-arrow-up"></i> +5.5% questo mese
                    </div>
                </div>
            </div>

            <div class="stats-card card-hover-effect">
                <div class="stats-card-header">
                    <span class="stats-card-title">Clienti VIP</span>
                    <div class="stats-card-icon" style="background: linear-gradient(135deg, #f1c40f, #e67e22);">
                        <!-- Giallo/Arancio -->
                        <i class="fas fa-crown"></i>
                    </div>
                </div>
                <div class="stats-card-body">
                    <div class="stats-card-value" id="vip-customers-value"
                        style="background: linear-gradient(120deg, #f1c40f, #e67e22); -webkit-background-clip: text;">0
                    </div> <!-- Giallo/Arancio -->
                    <div class="stats-card-trend trend-up">
                        <i class="fas fa-arrow-up"></i> +15% questo mese
                    </div>
                </div>
            </div>
        </div>

        <!-- View Switcher -->
        <div class="view-switcher animate-in animate-delay-1">
            <button class="view-btn active" data-view="cards"> <!-- Rosso -->
                <i class="fas fa-id-card"></i> Schede
            </button>
            <button class="view-btn" data-view="table">
                <i class="fas fa-table"></i> Tabella
            </button>
            <button class="view-btn" data-view="map">
                <i class="fas fa-map-marker-alt"></i> Mappa
            </button>
            <button class="view-btn" data-view="stats">
                <i class="fas fa-chart-pie"></i> Statistiche
            </button>
        </div>

        <!-- Search and Filter -->
        <div class="search-filter-container animate-in animate-delay-2">
            <div class="search-box">
                <input type="text" id="customer-search-input" placeholder="Cerca cliente per nome, email...">
                <!-- Rosso on focus -->
                <i class="fas fa-search"></i>
            </div>

            <div class="filter-controls">
                <div class="filter-dropdown">
                    <select id="status-filter">
                        <option value="all">Tutti gli stati</option>
                        <option value="active">Attivi</option>
                        <option value="inactive">Inattivi</option>
                        <option value="vip">VIP</option>
                    </select>
                </div>

                <div class="filter-dropdown">
                    <select id="sort-filter">
                        <option value="newest">Pi√π recenti (ID)</option>
                        <option value="spend-high">Spesa maggiore</option>
                        <option value="spend-low">Spesa minore</option>
                        <option value="orders-high">Pi√π ordini</option>
                        <option value="loyalty-high">Pi√π punti fedelt√†</option>
                        <option value="name-asc">Nome (A-Z)</option>
                    </select>
                </div>

                <button class="add-customer-btn action-btn"> <!-- Rosso -->
                    <i class="fas fa-plus"></i> Nuovo Cliente
                </button>

                <button class="export-btn"> <!-- Arancione/Originale -->
                    <i class="fas fa-file-export"></i> Esporta
                </button>
            </div>
        </div>

        <!-- CARDS VIEW -->
        <div id="cards-view" class="view-content animate-in animate-delay-3">
            <div class="customers-grid" id="customers-grid-container">
                <!-- Le schede cliente verranno generate qui da JavaScript -->
                <p class="no-data-message" style="display:none;">Nessun cliente trovato per i filtri selezionati.</p>
            </div>
        </div>

        <!-- TABLE VIEW (hidden by default) -->
        <div id="table-view" class="view-content" style="display: none;">
            <div class="customers-table-container animate-in">
                <table class="customers-table">
                    <thead>
                        <tr>
                            <th>Cliente</th>
                            <th>Contatti</th>
                            <th>Ordini</th>
                            <th>Punti Fedelt√†</th>
                            <th>Stato</th>
                            <th>Azioni</th>
                        </tr>
                    </thead>
                    <tbody id="customers-table-body">
                        <!-- Le righe della tabella verranno generate qui da JavaScript -->
                    </tbody>
                </table>
                <p class="no-data-message" id="table-no-data-message" style="display:none;">Nessun cliente trovato per i
                    filtri selezionati.</p>
            </div>
        </div>

        <!-- MAP VIEW (hidden by default) -->
        <div id="map-view" class="view-content" style="display: none;">
            <div class="customers-map-container animate-in">
                <div class="map-header">
                    <div class="map-title">
                        <i class="fas fa-map-marker-alt"></i> Distribuzione Clienti
                    </div>
                    <div class="map-filters">
                        <button class="map-filter-btn active" data-map-filter="all"> <!-- Rosso -->
                            <i class="fas fa-users"></i> Tutti
                        </button>
                        <button class="map-filter-btn" data-map-filter="active">
                            <i class="fas fa-user-check"></i> Attivi
                        </button>
                        <button class="map-filter-btn" data-map-filter="inactive">
                            <i class="fas fa-user-slash"></i> Inattivi
                        </button>
                        <button class="map-filter-btn" data-map-filter="vip">
                            <i class="fas fa-crown"></i> VIP
                        </button>
                    </div>
                </div>

                <div class="map-canvas-container">
                    <div class="map-canvas" id="map-canvas-markers">
                        <!-- Customer Markers verranno generati qui da JS (bordo rosso) -->
                    </div>
                </div>
                <p class="no-data-message" id="map-no-data-message" style="display:none;">Nessun cliente da mostrare
                    sulla mappa.</p>
            </div>
        </div>

        <!-- STATS VIEW (hidden by default) -->
        <div id="stats-view" class="view-content" style="display: none;">
            <!-- Customer Demographics Chart -->
            <div class="stats-chart-container animate-in">
                <div class="stats-chart-header">
                    <div class="stats-chart-title">
                        <i class="fas fa-chart-pie"></i> Demografia Clienti
                    </div>
                    <div class="stats-chart-filters" id="demographics-filters">
                        <button class="chart-filter-btn active" data-chart="demographics" data-filter="age">Et√†</button>
                        <!-- Rosso -->
                        <button class="chart-filter-btn" data-chart="demographics" data-filter="gender">Genere</button>
                        <button class="chart-filter-btn" data-chart="demographics"
                            data-filter="location">Localit√†</button>
                    </div>
                </div>
                <div class="chart-wrapper">
                    <canvas id="demographics-chart"></canvas>
                    <!-- Usare colori rossi/arancio/giallo/verde per differenziare se necessario -->
                </div>
            </div>

            <!-- Customer Acquisition Chart -->
            <div class="stats-chart-container animate-in animate-delay-1">
                <div class="stats-chart-header">
                    <div class="stats-chart-title">
                        <i class="fas fa-chart-line"></i> Acquisizione Clienti
                    </div>
                    <div class="stats-chart-filters" id="acquisition-filters">
                        <button class="chart-filter-btn active" data-chart="acquisition"
                            data-filter="month">Mensile</button>
                        <button class="chart-filter-btn" data-chart="acquisition"
                            data-filter="quarter">Trimestrale</button>
                        <button class="chart-filter-btn" data-chart="acquisition" data-filter="year">Annuale</button>
                    </div>
                </div>
                <div class="chart-wrapper">
                    <canvas id="acquisition-chart"></canvas> <!-- Colori rossi per barre/linee -->
                </div>
            </div>

            <!-- Ordering Habits Chart -->
            <div class="stats-chart-container animate-in animate-delay-2">
                <div class="stats-chart-header">
                    <div class="stats-chart-title">
                        <i class="fas fa-utensils"></i> Abitudini Ordini
                    </div>
                    <div class="stats-chart-filters" id="habits-filters">
                        <button class="chart-filter-btn active" data-chart="habits"
                            data-filter="category">Categoria</button>
                        <button class="chart-filter-btn" data-chart="habits" data-filter="time">Ora</button>
                        <button class="chart-filter-btn" data-chart="habits" data-filter="day">Giorno</button>
                    </div>
                </div>
                <div class="chart-wrapper">
                    <canvas id="habits-chart"></canvas> <!-- Colori rossi/arancio per radar -->
                </div>
            </div>

            <!-- Customer Retention Rate -->
            <div class="stats-chart-container animate-in animate-delay-3">
                <div class="stats-chart-header">
                    <div class="stats-chart-title">
                        <i class="fas fa-user-clock"></i> Tasso di Fidelizzazione
                    </div>
                    <div class="stats-chart-filters" id="retention-filters">
                        <button class="chart-filter-btn active" data-chart="retention" data-filter="3m">3 mesi</button>
                        <button class="chart-filter-btn" data-chart="retention" data-filter="6m">6 mesi</button>
                        <button class="chart-filter-btn" data-chart="retention" data-filter="1y">1 anno</button>
                    </div>
                </div>
                <div class="chart-wrapper">
                    <canvas id="retention-chart"></canvas> <!-- Mantenere verde per retention? O rosso? -->
                </div>
            </div>
        </div>

        <!-- Pagination -->
        <div class="pagination" id="pagination-controls">
            <!-- I controlli di paginazione verranno generati qui da JavaScript -->
        </div>
    </div>

    <!-- Customer Profile Modal (Hidden) -->
    <div class="modal-overlay customer-profile-modal" id="customerProfileModal">
        <div class="modal">
            <div class="profile-header"> <!-- Rosso -->
                <div class="profile-header-content">
                    <img src="https://randomuser.me/api/portraits/men/1.jpg" alt="Nome Cliente" class="profile-avatar"
                        id="modal-profile-avatar">
                    <div class="profile-info">
                        <h3 id="modal-profile-name">Nome Cliente</h3>
                        <p id="modal-profile-member-since">Cliente dal DD/MM/YYYY</p>
                        <div class="profile-meta" id="modal-profile-meta">
                            <!-- Meta info (badge VIP giallo) -->
                        </div>
                    </div>
                </div>
                <button class="modal-close" id="customerProfileModalClose">&times;</button> <!-- Hover arancio -->
            </div>

            <div class="profile-tabs" id="profile-tabs-container">
                <div class="profile-tab active" data-tab="info">Informazioni</div> <!-- Rosso -->
                <div class="profile-tab" data-tab="orders">Ordini</div>
                <div class="profile-tab" data-tab="stats_individual">Statistiche</div>
                <div class="profile-tab" data-tab="notes">Note</div>
            </div>

            <div class="profile-content">
                <div class="profile-section profile-tab-content" data-tab="info" id="profile-tab-info">
                    <div class="profile-section-title"><i class="fas fa-user"></i> Dettagli Personali</div>
                    <p><strong>Email:</strong> <span id="modal-info-email">-</span></p>
                    <p><strong>Telefono:</strong> <span id="modal-info-phone">-</span></p>
                    <p><strong>Indirizzo:</strong> <span id="modal-info-address">-</span></p>
                    <p><strong>Data Registrazione:</strong> <span id="modal-info-registration-date">-</span></p>
                    <p><strong>Ultimo Ordine:</strong> <span id="modal-info-last-order">-</span></p>
                </div>
                <div class="profile-section profile-tab-content" data-tab="orders" id="profile-tab-orders">
                    <div class="profile-section-title"><i class="fas fa-shopping-bag"></i> Cronologia Ordini</div>
                    <div class="profile-order-list" id="modal-orders-list">
                        <p class="no-data-message">Nessun ordine trovato.</p>
                    </div>
                </div>
                <div class="profile-section profile-tab-content" data-tab="stats_individual" id="profile-tab-stats">
                    <div class="profile-section-title"><i class="fas fa-chart-bar"></i> Statistiche Cliente</div>
                    <div class="profile-stats" id="modal-stats-cards">
                        <p class="no-data-message">Nessuna statistica disponibile.</p>
                    </div>
                    <div class="chart-wrapper" style="height: 250px; margin-top: 20px;">
                        <canvas id="modal-customer-spend-chart"></canvas> <!-- Rosso -->
                    </div>
                </div>
                <div class="profile-section profile-tab-content" data-tab="notes" id="profile-tab-notes">
                    <div class="profile-section-title"><i class="fas fa-sticky-note"></i> Note Cliente</div>
                    <textarea class="form-control" id="modal-customer-notes" rows="5"
                        placeholder="Aggiungi note su questo cliente..."></textarea>
                    <button class="action-btn add-customer-btn" style="margin-top:15px;" id="save-customer-notes-btn">
                        <!-- Rosso -->
                        <i class="fas fa-save"></i> Salva Note
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Imposta username (se disponibile)
            const currentUser = { username: "Admin" }; // Placeholder
            const usernameSpan = document.querySelector('.user-controls .username');
            if (usernameSpan && usernameSpan.textContent === '{{user.username}}') {
                usernameSpan.textContent = currentUser.username;
            }

            // Constants
            const ITEMS_PER_PAGE = 6;

            // State
            let currentPage = 1;
            let allCustomersData = []; // Sar√† popolato
            let currentCustomers = []; // Clienti filtrati/ordinati
            let currentView = 'cards'; // 'cards', 'table', 'map', 'stats'
            let activeChartInstances = {};


            // --- DEMO DATA ---
            allCustomersData = [
                { id: 1, name: "Marco Rossi", email: "marco.rossi@email.com", avatar: "https://randomuser.me/api/portraits/men/11.jpg", orders: 12, loyaltyPoints: 250, totalSpend: 320, monthsActive: 8, status: "active", isVip: true, phone: "+39 333 1234567", address: "Via Roma 1, Milano", registrationDate: "2023-03-15", lastOrderDate: "2024-07-10", mapX: 25, mapY: 30, notes: "Preferisce Coca-Cola Zero." },
                { id: 2, name: "Laura Bianchi", email: "laura.bianchi@email.com", avatar: "https://randomuser.me/api/portraits/women/22.jpg", orders: 8, loyaltyPoints: 180, totalSpend: 210, monthsActive: 5, status: "active", isVip: false, phone: "+39 333 2345678", address: "Corso Garibaldi 10, Milano", registrationDate: "2023-10-01", lastOrderDate: "2024-07-05", mapX: 35, mapY: 38, notes: "" },
                { id: 3, name: "Giuseppe Verdi", email: "g.verdi@email.com", avatar: "https://randomuser.me/api/portraits/men/33.jpg", orders: 15, loyaltyPoints: 320, totalSpend: 420, monthsActive: 10, status: "active", isVip: true, phone: "+39 333 3456789", address: "Piazza Duomo 5, Milano", registrationDate: "2023-01-20", lastOrderDate: "2024-07-12", mapX: 42, mapY: 60, notes: "Allergico alle noci." },
                { id: 4, name: "Francesca Neri", email: "francesca.n@email.com", avatar: "https://randomuser.me/api/portraits/women/44.jpg", orders: 5, loyaltyPoints: 90, totalSpend: 85, monthsActive: 3, status: "active", isVip: false, phone: "+39 333 4567890", address: "Via Montenapoleone 20, Milano", registrationDate: "2024-04-01", lastOrderDate: "2024-06-28", mapX: 15, mapY: 50, notes: "" },
                { id: 5, name: "Antonio Russo", email: "a.russo@email.com", avatar: "https://randomuser.me/api/portraits/men/55.jpg", orders: 3, loyaltyPoints: 60, totalSpend: 75, monthsActive: 2, status: "inactive", isVip: false, phone: "+39 333 5678901", address: "Viale Monza 100, Milano", registrationDate: "2024-05-10", lastOrderDate: "2024-05-20", mapX: 28, mapY: 70, notes: "Ha chiesto info su eventi." },
                { id: 6, name: "Elena Martini", email: "elena.martini@email.com", avatar: "https://randomuser.me/api/portraits/women/66.jpg", orders: 10, loyaltyPoints: 210, totalSpend: 280, monthsActive: 7, status: "active", isVip: true, phone: "+39 333 6789012", address: "Via Dante 3, Milano", registrationDate: "2023-06-05", lastOrderDate: "2024-07-08", mapX: 22, mapY: 60, notes: "" },
                { id: 7, name: "Paolo Ferrari", email: "paolo.f@email.it", avatar: "https://randomuser.me/api/portraits/men/7.jpg", orders: 22, loyaltyPoints: 450, totalSpend: 580, monthsActive: 12, status: "active", isVip: true, phone: "+39 334 1112233", address: "Corso Como 8, Milano", registrationDate: "2022-07-01", lastOrderDate: "2024-07-11", mapX: 50, mapY: 25, notes: "Cliente abituale, molto esigente sulla cottura della carne." },
                { id: 8, name: "Sofia Romano", email: "sofia.r@email.it", avatar: "https://randomuser.me/api/portraits/women/8.jpg", orders: 6, loyaltyPoints: 120, totalSpend: 150, monthsActive: 4, status: "active", isVip: false, phone: "+39 334 2223344", address: "Via Brera 12, Milano", registrationDate: "2024-03-10", lastOrderDate: "2024-07-01", mapX: 60, mapY: 55, notes: "" },
                { id: 9, name: "Giovanni De Luca", email: "giovanni.dl@email.com", avatar: "https://randomuser.me/api/portraits/men/9.jpg", orders: 1, loyaltyPoints: 10, totalSpend: 25, monthsActive: 1, status: "inactive", isVip: false, phone: "+39 334 3334455", address: "Via Torino 50, Milano", registrationDate: "2024-06-15", lastOrderDate: "2024-06-15", mapX: 70, mapY: 30, notes: "Primo ordine, non pi√π tornato." },
                { id: 10, name: "Chiara Marino", email: "chiara.marino@email.com", avatar: "https://randomuser.me/api/portraits/women/10.jpg", orders: 9, loyaltyPoints: 190, totalSpend: 230, monthsActive: 6, status: "active", isVip: false, phone: "+39 334 4445566", address: "Largo Cairoli 1, Milano", registrationDate: "2023-09-22", lastOrderDate: "2024-07-03", mapX: 30, mapY: 80, notes: "" },
                { id: 11, name: "Alessandro Conti", email: "alex.conti@email.it", avatar: "https://randomuser.me/api/portraits/men/21.jpg", orders: 18, loyaltyPoints: 380, totalSpend: 480, monthsActive: 11, status: "active", isVip: true, phone: "+39 335 1212121", address: "Via Paolo Sarpi 25, Milano", registrationDate: "2022-08-10", lastOrderDate: "2024-07-14", mapX: 65, mapY: 70, notes: "Organizza spesso cene con amici." },
                { id: 12, name: "Isabella Greco", email: "isabella.g@email.it", avatar: "https://randomuser.me/api/portraits/women/23.jpg", orders: 4, loyaltyPoints: 70, totalSpend: 95, monthsActive: 3, status: "active", isVip: false, phone: "+39 335 2323232", address: "Naviglio Grande 5, Milano", registrationDate: "2024-04-18", lastOrderDate: "2024-06-20", mapX: 10, mapY: 15, notes: "Richiede sempre il tavolo vicino alla finestra." },
                { id: 13, name: "Davide Lombardi", email: "davide.lombardi@email.com", avatar: "https://randomuser.me/api/portraits/men/31.jpg", orders: 7, loyaltyPoints: 150, totalSpend: 190, monthsActive: 5, status: "active", isVip: false, phone: "+39 335 3434343", address: "Piazzale Loreto 3, Milano", registrationDate: "2023-11-05", lastOrderDate: "2024-07-02", mapX: 80, mapY: 40, notes: "" },
                { id: 14, name: "Valentina Galli", email: "vale.galli@email.com", avatar: "https://randomuser.me/api/portraits/women/41.jpg", orders: 11, loyaltyPoints: 230, totalSpend: 300, monthsActive: 9, status: "active", isVip: true, phone: "+39 335 4545454", address: "Via Vitruvio 15, Milano", registrationDate: "2023-02-10", lastOrderDate: "2024-07-09", mapX: 55, mapY: 85, notes: "Festeggia il compleanno qui ogni anno." },
                { id: 15, name: "Riccardo Moretti", email: "r.moretti@email.it", avatar: "https://randomuser.me/api/portraits/men/51.jpg", orders: 2, loyaltyPoints: 30, totalSpend: 50, monthsActive: 1, status: "inactive", isVip: false, phone: "+39 335 5656565", address: "Corso Sempione 30, Milano", registrationDate: "2024-06-01", lastOrderDate: "2024-06-05", mapX: 20, mapY: 22, notes: "Studente." },
                { id: 16, name: "Martina Rizzo", email: "marty.rizzo@email.com", avatar: "https://randomuser.me/api/portraits/women/61.jpg", orders: 14, loyaltyPoints: 290, totalSpend: 390, monthsActive: 10, status: "active", isVip: false, phone: "+39 335 6767676", address: "Via Washington 7, Milano", registrationDate: "2023-01-15", lastOrderDate: "2024-07-13", mapX: 40, mapY: 10, notes: "" },
                { id: 17, name: "Federico Barbieri", email: "fede.barbieri@email.it", avatar: "https://randomuser.me/api/portraits/men/71.jpg", orders: 5, loyaltyPoints: 100, totalSpend: 120, monthsActive: 4, status: "active", isVip: false, phone: "+39 338 1010101", address: "Via Mecenate 22, Milano", registrationDate: "2024-03-20", lastOrderDate: "2024-06-25", mapX: 90, mapY: 50, notes: "Vegetariano." },
                { id: 18, name: "Silvia Pellegrini", email: "silvia.pelle@email.com", avatar: "https://randomuser.me/api/portraits/women/81.jpg", orders: 20, loyaltyPoints: 410, totalSpend: 550, monthsActive: 11, status: "active", isVip: true, phone: "+39 338 2020202", address: "Piazza Gae Aulenti 4, Milano", registrationDate: "2022-09-01", lastOrderDate: "2024-07-15", mapX: 48, mapY: 48, notes: "Preferisce tavoli all'aperto se disponibili." }
            ];
            currentCustomers = [...allCustomersData];

            // --- UI ELEMENTS ---
            const customersGridContainer = document.getElementById('customers-grid-container');
            const customersTableBody = document.getElementById('customers-table-body');
            const paginationControls = document.getElementById('pagination-controls');
            const searchInput = document.getElementById('customer-search-input');
            const statusFilterSelect = document.getElementById('status-filter');
            const sortFilterSelect = document.getElementById('sort-filter');
            const totalCustomersValueEl = document.getElementById('total-customers-value');
            const activeCustomersValueEl = document.getElementById('active-customers-value');
            const vipCustomersValueEl = document.getElementById('vip-customers-value');
            const mapCanvasMarkers = document.getElementById('map-canvas-markers');
            const mapNoDataMessage = document.getElementById('map-no-data-message');
            const cardsNoDataMessage = customersGridContainer.querySelector('.no-data-message');
            const tableNoDataMessage = document.getElementById('table-no-data-message');

            // --- INITIALIZATION ---
            createParticles();
            setActiveNavLink();
            loadNotifications();
            updateOverviewStats();
            applyFiltersAndSort();
            setupViewSwitcher();
            initializeAllCharts();
            setupActionButtons(); // Sets up delegation for card/table/map buttons
            setupMap();
            setupModals();

            setTimeout(() => { showToast('Clienti caricati', 'Gestione clienti pronta!', 'success'); }, 1000);

            // --- EVENT LISTENERS ---
            searchInput.addEventListener('input', debounce(applyFiltersAndSort, 300));
            statusFilterSelect.addEventListener('change', applyFiltersAndSort);
            sortFilterSelect.addEventListener('change', applyFiltersAndSort);

            document.querySelectorAll('.stats-chart-filters .chart-filter-btn').forEach(button => {
                button.addEventListener('click', function () {
                    const chartName = this.dataset.chart; const filterType = this.dataset.filter;
                    this.parentElement.querySelectorAll('.chart-filter-btn').forEach(btn => btn.classList.remove('active'));
                    this.classList.add('active'); updateChart(chartName, filterType);
                });
            });

            document.querySelectorAll('.map-filters .map-filter-btn').forEach(button => {
                button.addEventListener('click', function () {
                    document.querySelectorAll('.map-filters .map-filter-btn').forEach(btn => btn.classList.remove('active'));
                    this.classList.add('active'); const filter = this.dataset.mapFilter;
                    renderMapMarkers(currentCustomers, filter); // Render ALL filtered customers on map, not just paginated
                });
            });

            // --- FUNCTIONS ---
            function debounce(func, delay) { let timeout; return function (...args) { clearTimeout(timeout); timeout = setTimeout(() => func.apply(this, args), delay); }; }


            function setActiveNavLink() {
                const navLinks = document.querySelectorAll('.header-nav a');
                const currentPath = window.location.pathname; // Get the current page path

                navLinks.forEach(link => {
                    link.classList.remove('active'); // Remove active from all links first
                    // Check if the link's href matches the current path
                    // Or specifically check for the '/clienti' link for this page
                    if (link.getAttribute('href') === '/clienti') {
                        link.classList.add('active');
                    }
                    // Optional: More robust matching if needed
                    // else if (currentPath === link.getAttribute('href')) {
                    //    link.classList.add('active');
                    // }
                });
            }
            function applyFiltersAndSort() {
                let filtered = [...allCustomersData]; const searchTerm = searchInput.value.toLowerCase(); const statusFilter = statusFilterSelect.value; const sortFilter = sortFilterSelect.value;
                if (searchTerm) { filtered = filtered.filter(c => c.name.toLowerCase().includes(searchTerm) || c.email.toLowerCase().includes(searchTerm)); }
                if (statusFilter !== "all") { if (statusFilter === "vip") { filtered = filtered.filter(c => c.isVip); } else { filtered = filtered.filter(c => c.status === statusFilter); } }
                switch (sortFilter) {
                    case 'newest': filtered.sort((a, b) => b.id - a.id); break; case 'spend-high': filtered.sort((a, b) => b.totalSpend - a.totalSpend); break; case 'spend-low': filtered.sort((a, b) => a.totalSpend - b.totalSpend); break;
                    case 'orders-high': filtered.sort((a, b) => b.orders - a.orders); break; case 'loyalty-high': filtered.sort((a, b) => b.loyaltyPoints - a.loyaltyPoints); break; case 'name-asc': filtered.sort((a, b) => a.name.localeCompare(b.name)); break;
                }
                currentCustomers = filtered; currentPage = 1;
                renderCurrentPageData(); renderPagination();
                // Render map with ALL filtered customers, not just paginated ones
                renderMapMarkers(currentCustomers, document.querySelector('.map-filters .active')?.dataset.mapFilter || 'all');
            }

            function getPaginatedData() { const startIndex = (currentPage - 1) * ITEMS_PER_PAGE; const endIndex = startIndex + ITEMS_PER_PAGE; return currentCustomers.slice(startIndex, endIndex); }

            function renderCurrentPageData() {
                const customersToDisplay = getPaginatedData();
                const noData = customersToDisplay.length === 0;
                if (currentView === 'cards') {
                    renderCustomerCards(customersToDisplay);
                    cardsNoDataMessage.style.display = noData ? 'block' : 'none';
                    if (noData) customersGridContainer.innerHTML = cardsNoDataMessage.outerHTML;
                } else if (currentView === 'table') {
                    renderCustomerTable(customersToDisplay);
                    tableNoDataMessage.style.display = noData ? 'block' : 'none';
                    if (noData) customersTableBody.innerHTML = ''; // Clear if no data, message is separate
                }
            }


            function createParticles() {
                const particles = document.getElementById('particles');
                if (!particles) return;
                particles.innerHTML = ''; // Clear existing
                const particleCount = 50; // Or your desired number

                for (let i = 0; i < particleCount; i++) {
                    const particle = document.createElement('div');
                    particle.className = 'particle';
                    const posX = Math.random() * 100;
                    const posY = Math.random() * 100;
                    const size = Math.random() * 10 + 2;
                    const opacity = Math.random() * 0.5 + 0.1;
                    const duration = Math.random() * 60 + 30;

                    particle.style.left = `${posX}%`;
                    particle.style.top = `${posY}%`;
                    particle.style.width = `${size}px`;
                    particle.style.height = `${size}px`;
                    particle.style.opacity = opacity;

                    // Use the updated red colors for particles
                    if (i % 2 === 0) {
                        particle.style.backgroundColor = 'rgba(238, 27, 27, 0.15)'; // Main red tone
                    } else {
                        particle.style.backgroundColor = 'rgba(212, 16, 16, 0.15)'; // Darker red tone
                    }

                    particle.style.animation = `
            particleFloat ${duration}s infinite alternate ease-in-out ${Math.random() * 10}s,
            particleFade ${duration * 1.5}s infinite alternate ease-in-out ${Math.random() * 10}s
        `;
                    particles.appendChild(particle);
                }
            }




            function loadNotifications() {
    try {
        // Qui andrebbe una fetch reale a '/notifiche' o simile
        // fetch('/notifiche').then(response => response.json())...

        // Simulazione per demo:
        console.log("Simulazione caricamento notifiche...");
        setTimeout(() => {
            const badge = document.getElementById('notification-badge');
            if (badge) {
                const unreadCount = Math.floor(Math.random() * 5); // Numero casuale per demo
                badge.textContent = unreadCount;
                badge.style.display = unreadCount > 0 ? 'flex' : 'none';
                /*if (unreadCount > 0) {
                    // Potresti voler evitare un toast qui se disturba troppo
                    // showToast('Nuove notifiche', `Hai ${unreadCount} notifiche non lette`, 'warning');
                }*/
                console.log(`Badge notifiche aggiornato a: ${unreadCount}`);
            }
        }, 1500); // Simula un ritardo di rete
    } catch (e) {
        console.error('Errore in loadNotifications (o funzione non implementata):', e);
    }
}

            function renderCustomerCards(customers) {
                customersGridContainer.innerHTML = ''; // Clear first
                if (customers.length === 0) {
                    customersGridContainer.innerHTML = '<p class="no-data-message">Nessun cliente trovato.</p>';
                    return;
                }
                customers.forEach(customer => { /* ... card creation logic as before ... */
                    const card = document.createElement('div');
                    card.className = 'customer-card card-hover-effect animate-in';
                    card.dataset.customerId = customer.id;
                    let vipBadgeHtml = customer.isVip ? `<div class="vip-badge"><i class="fas fa-crown"></i> VIP</div>` : '';
                    card.innerHTML = `<div class="customer-card-inner"><div class="customer-card-front">${vipBadgeHtml}<div class="customer-card-header"></div><div class="customer-avatar-container"><img src="${customer.avatar}" alt="${customer.name}" class="customer-avatar"></div><div class="customer-card-body"><div class="customer-info"><h3 class="customer-name">${customer.name}</h3><p class="customer-email">${customer.email}</p><div class="customer-stats"><div class="customer-stat"><div class="stat-value">${customer.orders}</div><div class="stat-label">Ordini</div></div><div class="customer-stat"><div class="stat-value">${customer.loyaltyPoints}</div><div class="stat-label">Punti</div></div><div class="customer-stat"><div class="stat-value">‚Ç¨${customer.totalSpend.toFixed(2)}</div><div class="stat-label">Totale</div></div><div class="customer-stat"><div class="stat-value">${customer.monthsActive}</div><div class="stat-label">Mesi</div></div></div></div><div class="customer-actions"><button class="flip-btn"><i class="fas fa-chart-line"></i> Statistiche</button><button class="detail-btn"><i class="fas fa-user"></i> Profilo</button><button class="edit-btn"><i class="fas fa-edit"></i> Modifica</button></div></div></div><div class="customer-card-back"><div class="card-back-header"><h3>${customer.name}</h3><p>Statistiche del cliente</p></div><div class="stats-chart-container-card"><canvas id="customer-chart-${customer.id}"></canvas></div><div class="loyalty-progress"><div class="loyalty-title"><span>Programma Fedelt√†</span><span>${customer.loyaltyPoints}/500 punti</span></div><div class="loyalty-bar"><div class="loyalty-progress-bar" style="width: ${(customer.loyaltyPoints / 500 * 100).toFixed(0)}%"></div></div><div class="loyalty-rewards">${[...Array(5)].map((_, i) => `<span class="loyalty-point ${i < Math.floor(customer.loyaltyPoints / 100) ? 'active' : ''}"></span>`).join('')}</div></div><div class="card-back-footer"><button class="back-to-front-btn"><i class="fas fa-arrow-left"></i> Indietro</button></div></div></div>`;
                    customersGridContainer.appendChild(card);
                });
                // setupDynamicCardButtons(); // Actions handled by delegation now
            }

            function renderCustomerTable(customers) {
                customersTableBody.innerHTML = ''; // Clear first
                if (customers.length === 0) {
                    tableNoDataMessage.style.display = 'block';
                    return;
                }
                tableNoDataMessage.style.display = 'none';
                customers.forEach(customer => { /* ... row creation logic as before ... */
                    const row = customersTableBody.insertRow(); row.className = 'animate-in'; row.dataset.customerId = customer.id;
                    let statusClass = customer.status === 'active' ? 'status-active' : 'status-inactive'; if (customer.isVip) statusClass = 'status-vip'; let statusText = customer.status.charAt(0).toUpperCase() + customer.status.slice(1); if (customer.isVip) statusText = "VIP";
                    row.innerHTML = `<td><div class="customer-table-info"><img src="${customer.avatar}" alt="${customer.name}" class="table-customer-avatar"><div><div class="table-customer-name">${customer.name}</div><div class="table-customer-email">${customer.email}</div></div></div></td><td>${customer.phone || '-'}</td><td>${customer.orders} ordini - ‚Ç¨${customer.totalSpend.toFixed(2)}</td><td><span class="table-loyalty-points"><i class="fas fa-star"></i> ${customer.loyaltyPoints} punti</span></td><td><span class="customer-status ${statusClass}"><i class="fas ${customer.isVip ? 'fa-crown' : 'fa-circle'}"></i> ${statusText}</span></td><td><div class="table-actions"><button class="table-action-btn table-view-btn" title="Visualizza profilo"><i class="fas fa-user"></i></button><button class="table-action-btn table-edit-btn" title="Modifica cliente"><i class="fas fa-edit"></i></button><button class="table-action-btn table-delete-btn" title="Elimina cliente"><i class="fas fa-trash-alt"></i></button></div></td>`;
                });
                // setupDynamicTableButtons(); // Actions handled by delegation now
            }

            function renderPagination() { /* ... as before ... */
                paginationControls.innerHTML = ''; const totalPages = Math.ceil(currentCustomers.length / ITEMS_PER_PAGE); if (totalPages <= 1) return;
                const prevButton = document.createElement('a'); prevButton.href = '#'; prevButton.innerHTML = '<i class="fas fa-chevron-left"></i>'; if (currentPage === 1) { prevButton.classList.add('disabled'); } else { prevButton.addEventListener('click', (e) => { e.preventDefault(); if (currentPage > 1) { currentPage--; renderCurrentPageData(); renderPagination(); renderMapMarkers(getPaginatedData(), document.querySelector('.map-filters .active')?.dataset.mapFilter || 'all'); } }); } paginationControls.appendChild(prevButton);
                let startPage = Math.max(1, currentPage - 1); let endPage = Math.min(totalPages, currentPage + 1); if (currentPage === 1) endPage = Math.min(totalPages, 3); if (currentPage === totalPages) startPage = Math.max(1, totalPages - 2);
                if (startPage > 1) { const firstPageLink = document.createElement('a'); firstPageLink.href = '#'; firstPageLink.textContent = '1'; firstPageLink.addEventListener('click', (e) => { e.preventDefault(); currentPage = 1; renderCurrentPageData(); renderPagination(); renderMapMarkers(getPaginatedData(), document.querySelector('.map-filters .active')?.dataset.mapFilter || 'all'); }); paginationControls.appendChild(firstPageLink); if (startPage > 2) { const ellipsis = document.createElement('span'); ellipsis.textContent = '...'; paginationControls.appendChild(ellipsis); } }
                for (let i = startPage; i <= endPage; i++) { const pageLink = document.createElement('a'); pageLink.href = '#'; pageLink.textContent = i; if (i === currentPage) { pageLink.classList.add('active'); } pageLink.addEventListener('click', (e) => { e.preventDefault(); currentPage = i; renderCurrentPageData(); renderPagination(); renderMapMarkers(getPaginatedData(), document.querySelector('.map-filters .active')?.dataset.mapFilter || 'all'); }); paginationControls.appendChild(pageLink); }
                if (endPage < totalPages) { if (endPage < totalPages - 1) { const ellipsis = document.createElement('span'); ellipsis.textContent = '...'; paginationControls.appendChild(ellipsis); } const lastPageLink = document.createElement('a'); lastPageLink.href = '#'; lastPageLink.textContent = totalPages; lastPageLink.addEventListener('click', (e) => { e.preventDefault(); currentPage = totalPages; renderCurrentPageData(); renderPagination(); renderMapMarkers(getPaginatedData(), document.querySelector('.map-filters .active')?.dataset.mapFilter || 'all'); }); paginationControls.appendChild(lastPageLink); }
                const nextButton = document.createElement('a'); nextButton.href = '#'; nextButton.innerHTML = '<i class="fas fa-chevron-right"></i>'; if (currentPage === totalPages) { nextButton.classList.add('disabled'); } else { nextButton.addEventListener('click', (e) => { e.preventDefault(); if (currentPage < totalPages) { currentPage++; renderCurrentPageData(); renderPagination(); renderMapMarkers(getPaginatedData(), document.querySelector('.map-filters .active')?.dataset.mapFilter || 'all'); } }); } paginationControls.appendChild(nextButton);
            }

            function setupActionButtons() {
                const containers = [customersGridContainer, customersTableBody, mapCanvasMarkers]; // Add map container
                containers.forEach(container => {
                    if (!container) return;
                    container.addEventListener('click', function (e) {
                        const target = e.target;

                        // Card Flip Buttons
                        if (target.closest('.flip-btn')) {
                            const card = target.closest('.customer-card');
                            if (card) {
                                card.classList.add('flipped');
                                const customerId = parseInt(card.dataset.customerId);
                                initializeCustomerCardChart(customerId);
                            }
                        } else if (target.closest('.back-to-front-btn')) {
                            const card = target.closest('.customer-card');
                            if (card) card.classList.remove('flipped');
                        }
                        // Profile Detail Buttons (Card, Table, Map)
                        else if (target.closest('.detail-btn') || target.closest('.table-view-btn') || target.closest('.profile-map-btn')) {
                            const cardOrRow = target.closest('[data-customer-id]');
                            if (cardOrRow) {
                                const customerId = parseInt(cardOrRow.dataset.customerId);
                                showProfileModal(customerId);
                            }
                        }
                        // Edit Buttons (Card, Table)
                        else if (target.closest('.edit-btn') || target.closest('.table-edit-btn')) {
                            const cardOrRow = target.closest('[data-customer-id]');
                            if (cardOrRow) {
                                const customerId = parseInt(cardOrRow.dataset.customerId);
                                const customer = allCustomersData.find(c => c.id === customerId);
                                if (customer) showToast('Modifica Cliente', `Apertura editor per ${customer.name}`, 'info');
                            }
                        }
                        // Delete Buttons (Table)
                        else if (target.closest('.table-delete-btn')) {
                            const row = target.closest('tr');
                            if (row) {
                                const customerId = parseInt(row.dataset.customerId);
                                const customer = allCustomersData.find(c => c.id === customerId);
                                if (customer && confirm(`Sei sicuro di voler eliminare ${customer.name}? Questa azione non √® reversibile.`)) {
                                    allCustomersData = allCustomersData.filter(c => c.id !== customerId);
                                    applyFiltersAndSort();
                                    updateOverviewStats();
                                    showToast('Cliente Eliminato', `${customer.name} √® stato eliminato.`, 'success');
                                }
                            }
                        }
                    });
                });
            }

            function updateOverviewStats() { /* ... as before ... */
                totalCustomersValueEl.textContent = allCustomersData.length; activeCustomersValueEl.textContent = allCustomersData.filter(c => c.status === 'active').length; vipCustomersValueEl.textContent = allCustomersData.filter(c => c.isVip).length; const totalSpendAll = allCustomersData.reduce((sum, c) => sum + c.totalSpend, 0); const avgSpend = allCustomersData.length > 0 ? (totalSpendAll / allCustomersData.length) : 0; document.getElementById('average-spend-value').textContent = `‚Ç¨${avgSpend.toFixed(2)}`;
            }

            // --- VIEW SWITCHER ---
            function setupViewSwitcher() { /* ... as before ... */
                const viewButtons = document.querySelectorAll('.view-btn'); const viewContents = document.querySelectorAll('.view-content');
                viewButtons.forEach(button => { button.addEventListener('click', function () { currentView = this.dataset.view; viewButtons.forEach(btn => btn.classList.remove('active')); this.classList.add('active'); viewContents.forEach(content => content.style.display = 'none'); const selectedView = document.getElementById(`${currentView}-view`); if (selectedView) { selectedView.style.display = 'block'; if (currentView === 'cards' || currentView === 'table') { applyFiltersAndSort(); } else if (currentView === 'map') { renderMapMarkers(currentCustomers, document.querySelector('.map-filters .active')?.dataset.mapFilter || 'all'); } else if (currentView === 'stats') { initializeAllCharts(); } } showToast('Vista cambiata', `Visualizzazione: ${getViewName(currentView)}`, 'success'); }); });
            }
            function getViewName(view) { /* ... as before ... */
                switch (view) { case 'cards': return 'Schede Cliente'; case 'table': return 'Tabella Cliente'; case 'map': return 'Mappa Distribuzione'; case 'stats': return 'Statistiche Cliente'; default: return view; }
            }

            // --- CHARTS (Card and Stats View) ---
            function initializeCustomerCardChart(customerId) { /* ... as before, but maybe use orange/red colors? */
                const chartCanvasId = `customer-chart-${customerId}`; const ctx = document.getElementById(chartCanvasId); if (!ctx) return; const customer = allCustomersData.find(c => c.id === customerId); if (!customer) return; if (activeChartInstances[chartCanvasId]) { activeChartInstances[chartCanvasId].destroy(); }
                const months = ['Gen', 'Feb', 'Mar', 'Apr', 'Mag', 'Giu']; const data = months.map(() => Math.floor(Math.random() * (customer.totalSpend / 3)) + 10);
                activeChartInstances[chartCanvasId] = new Chart(ctx, {
                    type: 'line', data: { labels: months, datasets: [{ label: 'Spesa Mensile', data: data, borderColor: 'rgba(255, 255, 255, 0.8)', tension: 0.4, fill: true, backgroundColor: 'rgba(255, 255, 255, 0.2)', pointBackgroundColor: '#ffffff', pointBorderColor: 'rgba(255, 255, 255, 0.8)', pointRadius: 4, pointHoverRadius: 6 }] },
                    options: { responsive: true, maintainAspectRatio: false, scales: { x: { grid: { color: 'rgba(255,255,255,0.1)' }, ticks: { color: 'rgba(255,255,255,0.7)' } }, y: { grid: { color: 'rgba(255,255,255,0.1)' }, ticks: { color: 'rgba(255,255,255,0.7)', callback: value => '‚Ç¨' + value } } }, plugins: { legend: { display: false } } }
                });
            }

            function initializeAllCharts() { /* ... as before, but adjust colors ... */
                Object.values(activeChartInstances).forEach(chart => { if (chart.canvas.id.startsWith('customer-chart-')) return; chart.destroy(); }); activeChartInstances = {};
                updateChart('demographics', 'age'); updateChart('acquisition', 'month'); updateChart('habits', 'category'); updateChart('retention', '3m');
            }

            function updateChart(chartName, filterType) { /* ... as before, adjust colors below ... */
                const ctx = document.getElementById(`${chartName}-chart`)?.getContext('2d'); if (!ctx) return; if (activeChartInstances[chartName]) { activeChartInstances[chartName].destroy(); }
                let chartData = {}; let chartOptions = { responsive: true, maintainAspectRatio: false, plugins: { legend: { position: 'right', labels: { font: { family: 'Montserrat' } } } }, animation: { duration: 800, easing: 'easeOutBounce' } }; let chartType = 'pie';
                // Example Color Palette for Charts: Main Red, Dark Red, Orange, Yellow, Green (for contrast if needed)
                const redColors = ['#EE1B1B', '#D41010', '#f39c12', '#f1c40f', '#2ecc71', '#9b59b6'];

                if (chartName === 'demographics') {
                    chartType = 'pie'; chartOptions.plugins.legend.position = 'bottom';
                    if (filterType === 'age') { chartData = { labels: ['18-25', '26-35', '36-45', '46-55', '56+'], datasets: [{ data: [25, 35, 20, 15, 5], backgroundColor: [redColors[0], redColors[2], redColors[3], redColors[4], redColors[1]], borderColor: '#fff', borderWidth: 2 }] }; chartOptions.plugins.title = { display: true, text: 'Distribuzione Clienti per Et√†', font: { size: 16, family: 'Montserrat', weight: 'bold' } }; }
                    else if (filterType === 'gender') { chartData = { labels: ['Uomini', 'Donne', 'Altro'], datasets: [{ data: [48, 45, 7], backgroundColor: [redColors[1], redColors[2], redColors[0]], borderColor: '#fff', borderWidth: 2 }] }; chartOptions.plugins.title = { display: true, text: 'Distribuzione Clienti per Genere', font: { size: 16, family: 'Montserrat', weight: 'bold' } }; }
                    else if (filterType === 'location') { chartData = { labels: ['Milano', 'Hinterland', 'Fuori Provincia'], datasets: [{ data: [60, 25, 15], backgroundColor: [redColors[0], redColors[2], redColors[3]], borderColor: '#fff', borderWidth: 2 }] }; chartOptions.plugins.title = { display: true, text: 'Provenienza Clienti', font: { size: 16, family: 'Montserrat', weight: 'bold' } }; }
                } else if (chartName === 'acquisition') {
                    chartType = 'bar'; let labels = ['Gen', 'Feb', 'Mar', 'Apr', 'Mag', 'Giu']; let data = [12, 19, 14, 15, 22, 18]; if (filterType === 'quarter') { labels = ['T1', 'T2']; data = [45, 55]; } else if (filterType === 'year') { labels = ['2023']; data = [248]; }
                    chartData = {
                        labels: labels, datasets: [{
                            label: 'Nuovi Clienti', data: data,
                            backgroundColor: 'rgba(238, 27, 27, 0.7)', /* Rosso */
                            borderColor: '#D41010', /* Rosso Scuro */
                            borderWidth: 1, borderRadius: 5
                        }]
                    }; chartOptions.scales = { y: { beginAtZero: true } }; chartOptions.plugins.title = { display: true, text: `Acquisizione Clienti (${filterType})`, font: { size: 16, family: 'Montserrat', weight: 'bold' } }; chartOptions.plugins.legend.display = false;
                } else if (chartName === 'habits') {
                    chartType = 'radar'; let labels = ['Panini', 'Pizze', 'Patatine', 'Bevande', 'Dessert']; let data = [65, 75, 45, 80, 32]; if (filterType === 'time') { labels = ['Pranzo', 'Pomeriggio', 'Cena', 'Notte']; data = [30, 10, 50, 10]; } else if (filterType === 'day') { labels = ['Lun-Gio', 'Ven', 'Sab', 'Dom']; data = [40, 25, 25, 10]; }
                    chartData = {
                        labels: labels, datasets: [{
                            label: 'Popolarit√†', data: data,
                            backgroundColor: 'rgba(238, 27, 27, 0.3)', /* Rosso trasparente */
                            borderColor: '#EE1B1B', /* Rosso pieno */
                            borderWidth: 2, pointBackgroundColor: '#EE1B1B'
                        }]
                    }; chartOptions.scales = { r: { angleLines: { color: 'rgba(0,0,0,0.1)' }, grid: { color: 'rgba(0,0,0,0.1)' }, ticks: { backdropColor: 'transparent', font: { size: 10 } } } }; chartOptions.plugins.title = { display: true, text: `Abitudini Ordini (${filterType})`, font: { size: 16, family: 'Montserrat', weight: 'bold' } }; chartOptions.plugins.legend.display = true;
                } else if (chartName === 'retention') {
                    chartType = 'line'; let labels = ['Gen', 'Feb', 'Mar', 'Apr', 'Mag', 'Giu']; let data = [85, 82, 88, 90, 92, 95]; if (filterType === '6m') { data = [70, 75, 72, 78, 80, 82]; } else if (filterType === '1y') { data = [60, 62, 65, 63, 68, 70, 72, 75, 73, 77, 79, 80].slice(0, 12); labels = ['G', 'F', 'M', 'A', 'M', 'G', 'L', 'A', 'S', 'O', 'N', 'D']; }
                    chartData = {
                        labels: labels, datasets: [{
                            label: 'Tasso Fidelizzazione %', data: data,
                            backgroundColor: 'rgba(46, 204, 113, 0.2)', borderColor: '#2ecc71', /* Mantenuto verde per positivo? */
                            tension: 0.3, fill: true
                        }]
                    }; chartOptions.scales = { y: { suggestedMin: 50, suggestedMax: 100, ticks: { callback: v => v + "%" } } }; chartOptions.plugins.title = { display: true, text: `Tasso di Fidelizzazione (${filterType})`, font: { size: 16, family: 'Montserrat', weight: 'bold' } }; chartOptions.plugins.legend.display = false;
                }
                if (Object.keys(chartData).length > 0) { activeChartInstances[chartName] = new Chart(ctx, { type: chartType, data: chartData, options: chartOptions }); }
            }

            // --- MAP FUNCTIONS ---
            function setupMap() { /* ... as before ... */ renderMapMarkers(getPaginatedData(), 'all'); }
            function renderMapMarkers(customers, filter = 'all') { /* ... as before ... */
                mapCanvasMarkers.innerHTML = ''; if (customers.length === 0) { mapNoDataMessage.style.display = 'block'; return; } mapNoDataMessage.style.display = 'none';
                customers.forEach(customer => { let isVisible = true; if (filter !== 'all') { if (filter === 'active' && customer.status !== 'active') isVisible = false; if (filter === 'inactive' && customer.status !== 'inactive') isVisible = false; if (filter === 'vip' && !customer.isVip) isVisible = false; } const marker = document.createElement('div'); marker.className = 'customer-marker animate-in'; if (customer.isVip) marker.classList.add('marker-vip'); if (!isVisible) marker.classList.add('filtered-out'); marker.style.top = `calc(${customer.mapY}% - 20px)`; marker.style.left = `calc(${customer.mapX}% - 20px)`; marker.dataset.customerId = customer.id; marker.innerHTML = `<img src="${customer.avatar}" alt="${customer.name}"><div class="marker-info"><h3>${customer.name}</h3><p>${customer.address || 'Indirizzo non disponibile'}</p><div class="marker-info-actions"><button class="marker-info-btn profile-map-btn"><i class="fas fa-user"></i> Profilo</button></div></div>`; mapCanvasMarkers.appendChild(marker); });
                // setupActionButtons() now handles delegation, no need to re-add listeners here.
            }

            // --- MODALS ---
            function setupModals() { /* ... as before ... */
                const modalOverlay = document.getElementById('customerProfileModal'); const closeBtn = document.getElementById('customerProfileModalClose'); const profileTabsContainer = document.getElementById('profile-tabs-container');
                closeBtn.addEventListener('click', () => closeModal(modalOverlay)); modalOverlay.addEventListener('click', (e) => { if (e.target === modalOverlay) closeModal(modalOverlay); });
                profileTabsContainer.addEventListener('click', function (e) { if (e.target.classList.contains('profile-tab')) { const tabId = e.target.dataset.tab; profileTabsContainer.querySelectorAll('.profile-tab').forEach(t => t.classList.remove('active')); e.target.classList.add('active'); modalOverlay.querySelectorAll('.profile-tab-content').forEach(content => content.style.display = 'none'); const selectedContent = modalOverlay.querySelector(`.profile-tab-content[data-tab="${tabId}"]`); if (selectedContent) selectedContent.style.display = 'block'; } });
                document.getElementById('save-customer-notes-btn').addEventListener('click', function () { const customerId = parseInt(modalOverlay.dataset.customerId); const notes = document.getElementById('modal-customer-notes').value; const customer = allCustomersData.find(c => c.id === customerId); if (customer) { customer.notes = notes; showToast('Note salvate', `Note per ${customer.name} aggiornate.`, 'success'); } });
            }
            function showProfileModal(customerId) { /* ... as before, maybe adjust chart colors ... */
                const modal = document.getElementById('customerProfileModal'); const customer = allCustomersData.find(c => c.id === customerId); if (!customer || !modal) return; modal.dataset.customerId = customerId;
                document.getElementById('modal-profile-avatar').src = customer.avatar; document.getElementById('modal-profile-avatar').alt = customer.name; document.getElementById('modal-profile-name').textContent = customer.name; document.getElementById('modal-profile-member-since').textContent = `Cliente dal ${new Date(customer.registrationDate).toLocaleDateString('it-IT')}`;
                const metaContainer = document.getElementById('modal-profile-meta'); metaContainer.innerHTML = ''; if (customer.isVip) metaContainer.innerHTML += `<div class="profile-meta-item"><i class="fas fa-crown"></i> VIP</div>`; metaContainer.innerHTML += `<div class="profile-meta-item"><i class="fas fa-star"></i> ${customer.loyaltyPoints} Punti</div>`; metaContainer.innerHTML += `<div class="profile-meta-item"><i class="fas fa-shopping-bag"></i> ${customer.orders} Ordini</div>`;
                document.getElementById('modal-info-email').textContent = customer.email; document.getElementById('modal-info-phone').textContent = customer.phone || '-'; document.getElementById('modal-info-address').textContent = customer.address || '-'; document.getElementById('modal-info-registration-date').textContent = new Date(customer.registrationDate).toLocaleDateString('it-IT'); document.getElementById('modal-info-last-order').textContent = customer.lastOrderDate ? new Date(customer.lastOrderDate).toLocaleDateString('it-IT') : '-';
                const ordersList = document.getElementById('modal-orders-list'); ordersList.innerHTML = ''; if (customer.orders > 0) { for (let i = 1; i <= Math.min(customer.orders, 5); i++) { const randomAmount = (Math.random() * 50 + 15).toFixed(2); const randomDate = new Date(new Date(customer.lastOrderDate || Date.now()) - (i * 15 * 24 * 60 * 60 * 1000)).toLocaleDateString('it-IT'); const orderItem = `<div class="profile-order-item"><div class="profile-order-info"><span class="profile-order-id">Ordine #${Math.floor(Math.random() * 10000 + customer.id * 1000 + i)}</span><span class="profile-order-date">Data: ${randomDate}</span></div><div class="profile-order-amount">‚Ç¨${randomAmount}</div><span class="profile-order-status status-active" style="background-color: rgba(46,204,113,0.15); color: var(--accent-green);">Completato</span></div>`; ordersList.innerHTML += orderItem; } } else { ordersList.innerHTML = '<p class="no-data-message">Nessun ordine trovato.</p>'; }
                const statsCardsContainer = document.getElementById('modal-stats-cards'); statsCardsContainer.innerHTML = `<div class="profile-stat-card"><div class="profile-stat-value">‚Ç¨${(customer.totalSpend / customer.orders || 0).toFixed(2)}</div><div class="profile-stat-label">Spesa Media/Ordine</div></div><div class="profile-stat-card"><div class="profile-stat-value">${customer.monthsActive}</div><div class="profile-stat-label">Mesi Attivit√†</div></div><div class="profile-stat-card"><div class="profile-stat-value">${(customer.loyaltyPoints / (customer.monthsActive || 1)).toFixed(1)}</div><div class="profile-stat-label">Punti/Mese</div></div>`; initializeModalCustomerSpendChart(customer);
                document.getElementById('modal-customer-notes').value = customer.notes || '';
                modal.querySelectorAll('.profile-tab').forEach(t => t.classList.remove('active')); modal.querySelector('.profile-tab[data-tab="info"]').classList.add('active'); modal.querySelectorAll('.profile-tab-content').forEach(c => c.style.display = 'none'); modal.querySelector('.profile-tab-content[data-tab="info"]').style.display = 'block'; modal.classList.add('open');
            }
            function initializeModalCustomerSpendChart(customer) { /* ... as before, maybe change colors */
                const chartId = 'modal-customer-spend-chart'; const ctx = document.getElementById(chartId)?.getContext('2d'); if (!ctx) return; if (activeChartInstances[chartId]) activeChartInstances[chartId].destroy();
                const spendData = [(Math.random() * customer.totalSpend * 0.1).toFixed(0), (Math.random() * customer.totalSpend * 0.2).toFixed(0), (Math.random() * customer.totalSpend * 0.15).toFixed(0), (Math.random() * customer.totalSpend * 0.25).toFixed(0), (Math.random() * customer.totalSpend * 0.1).toFixed(0), (Math.random() * customer.totalSpend * 0.2).toFixed(0)];
                activeChartInstances[chartId] = new Chart(ctx, {
                    type: 'bar', data: {
                        labels: ['Mese 1', 'Mese 2', 'Mese 3', 'Mese 4', 'Mese 5', 'Mese 6'], datasets: [{
                            label: 'Spesa Mensile', data: spendData,
                            backgroundColor: 'rgba(238, 27, 27, 0.7)', borderColor: '#D41010', /* Rosso */
                            borderWidth: 1
                        }]
                    },
                    options: { responsive: true, maintainAspectRatio: false, scales: { y: { beginAtZero: true, ticks: { callback: value => '‚Ç¨' + value } } }, plugins: { legend: { display: false }, title: { display: true, text: 'Spesa ultimi 6 mesi (Esempio)' } } }
                });
            }
            function closeModal(modal) { /* ... as before ... */
                modal.classList.remove('open'); if (activeChartInstances['modal-customer-spend-chart']) { activeChartInstances['modal-customer-spend-chart'].destroy(); delete activeChartInstances['modal-customer-spend-chart']; }
            }

            // --- GENERIC ACTION BUTTONS (Add, Export) & TOAST ---
            function setupActionButtons() { /* ... Updated logic using delegation ... */
                const containers = [document.getElementById('customers-grid-container'), document.getElementById('customers-table-body'), document.getElementById('map-canvas-markers')];
                containers.forEach(container => { if (!container) return; container.addEventListener('click', handleActionClick); });
                document.querySelector('.add-customer-btn.action-btn').addEventListener('click', handleAddCustomer);
                document.querySelector('.export-btn').addEventListener('click', handleExport);
            }
            function handleActionClick(e) { /* ... Logic from setupDynamicCardButtons/setupDynamicTableButtons moved here ... */
                const target = e.target;
                const card = target.closest('.customer-card'); const row = target.closest('tr[data-customer-id]'); const marker = target.closest('.customer-marker');
                const cardOrRow = card || row || marker;
                if (!cardOrRow && !target.closest('.add-customer-btn') && !target.closest('.export-btn')) return; // Exit if not relevant click

                if (target.closest('.flip-btn') && card) { card.classList.add('flipped'); const customerId = parseInt(card.dataset.customerId); initializeCustomerCardChart(customerId); }
                else if (target.closest('.back-to-front-btn') && card) { card.classList.remove('flipped'); }
                else if (target.closest('.detail-btn') || target.closest('.table-view-btn') || target.closest('.profile-map-btn')) { if (cardOrRow) { const customerId = parseInt(cardOrRow.dataset.customerId); showProfileModal(customerId); } }
                else if (target.closest('.edit-btn') || target.closest('.table-edit-btn')) { if (cardOrRow) { const customerId = parseInt(cardOrRow.dataset.customerId); const customer = allCustomersData.find(c => c.id === customerId); if (customer) showToast('Modifica Cliente', `Apertura editor per ${customer.name}`, 'info'); } }
                else if (target.closest('.table-delete-btn') && row) { const customerId = parseInt(row.dataset.customerId); const customer = allCustomersData.find(c => c.id === customerId); if (customer && confirm(`Sei sicuro di voler eliminare ${customer.name}?`)) { allCustomersData = allCustomersData.filter(c => c.id !== customerId); applyFiltersAndSort(); updateOverviewStats(); showToast('Cliente Eliminato', `${customer.name} √® stato eliminato.`, 'success'); } }
            }
            function handleAddCustomer() { /* ... Logic from previous setupActionButtons ... */
                const newId = Math.max(...allCustomersData.map(c => c.id), 0) + 1; const newCustomer = { id: newId, name: "Nuovo Cliente " + newId, email: `cliente${newId}@email.com`, avatar: `https://randomuser.me/api/portraits/${newId % 2 === 0 ? 'women' : 'men'}/${newId % 99}.jpg`, orders: 0, loyaltyPoints: 0, totalSpend: 0, monthsActive: 0, status: "active", isVip: false, phone: "", address: "", registrationDate: new Date().toISOString().split('T')[0], lastOrderDate: null, mapX: Math.floor(Math.random() * 80 + 10), mapY: Math.floor(Math.random() * 80 + 10), notes: "" }; allCustomersData.unshift(newCustomer); applyFiltersAndSort(); updateOverviewStats(); showToast('Nuovo Cliente', `${newCustomer.name} aggiunto!`, 'success'); showProfileModal(newId);
            }
            function handleExport() { /* ... Logic from previous setupActionButtons ... */
                showToast('Esporta Dati', 'Esportazione in CSV (simulata)...', 'info'); setTimeout(() => { let csvContent = "data:text/csv;charset=utf-8,ID,Nome,Email,Ordini,Punti,Spesa Totale,Stato,VIP\n"; currentCustomers.forEach(c => { csvContent += `${c.id},"${c.name}","${c.email}",${c.orders},${c.loyaltyPoints},${c.totalSpend},${c.status},${c.isVip}\n`; }); const encodedUri = encodeURI(csvContent); const link = document.createElement("a"); link.setAttribute("href", encodedUri); link.setAttribute("download", "clienti_yourbite.csv"); document.body.appendChild(link); link.click(); document.body.removeChild(link); showToast('Esportazione Completata', 'Dati clienti esportati.', 'success'); }, 1500);
            }
            function showToast(title, message, type = 'success') { /* ... as before, with red 'info' ... */
                const existingToasts = document.querySelectorAll('.toast-notification'); existingToasts.forEach(toast => toast.remove()); const toast = document.createElement('div'); toast.className = `toast-notification toast-${type}`; let icon = 'info-circle'; if (type === 'success') icon = 'check-circle'; if (type === 'error') icon = 'exclamation-circle'; if (type === 'warning') icon = 'exclamation-triangle'; let iconBgColor = ''; let iconColor = ''; if (type === 'success') { iconBgColor = 'rgba(46, 204, 113, 0.15)'; iconColor = 'var(--accent-green)'; } else if (type === 'error') { iconBgColor = 'rgba(231, 76, 60, 0.15)'; iconColor = 'var(--accent-red)'; } else if (type === 'warning') { iconBgColor = 'rgba(243, 156, 18, 0.15)'; iconColor = 'var(--accent-orange)'; } else { iconBgColor = 'rgba(238, 27, 27, 0.15)'; iconColor = 'var(--navbar-red-main)'; } toast.innerHTML = `<div class="toast-icon" style="background-color:${iconBgColor}; color:${iconColor};"><i class="fas fa-${icon}"></i></div><div class="toast-content"><div class="toast-title">${title}</div><div class="toast-message">${message}</div></div><div class="toast-close"><i class="fas fa-times"></i></div>`; document.body.appendChild(toast); setTimeout(() => toast.classList.add('show'), 10); toast.querySelector('.toast-close').addEventListener('click', () => { toast.classList.remove('show'); setTimeout(() => toast.remove(), 300); }); setTimeout(() => { if (document.body.contains(toast)) { toast.classList.remove('show'); setTimeout(() => { if (document.body.contains(toast)) toast.remove(); }, 300); } }, 5000);
            }

            // Logout Function (simplified)
            function logout() { /* ... as before, with red colors ... */
                const loadingOverlay = document.createElement('div'); loadingOverlay.style.cssText = 'position:fixed;top:0;left:0;width:100%;height:100%;background-color:rgba(255,255,255,0.8);display:flex;flex-direction:column;justify-content:center;align-items:center;z-index:2000;backdrop-filter:blur(5px);'; const spinnerContainer = document.createElement('div'); spinnerContainer.style.cssText = 'width:60px;height:60px;position:relative;'; const spinner = document.createElement('div'); spinner.style.cssText = 'border:4px solid rgba(0,0,0,0.1);border-top-color:var(--navbar-red-main);border-radius:50%;width:100%;height:100%;animation:spin 1s linear infinite;'; const style = document.createElement('style'); style.textContent = `@keyframes spin{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}`; document.head.appendChild(style); spinnerContainer.appendChild(spinner); const loadingText = document.createElement('p'); loadingText.textContent = 'Logout in corso...'; loadingText.style.cssText = 'margin-top:20px;color:var(--navbar-red-main);font-weight:500;'; loadingOverlay.appendChild(spinnerContainer); loadingOverlay.appendChild(loadingText); document.body.appendChild(loadingOverlay); fetch('/logout', { method: 'POST', headers: { 'Content-Type': 'application/json' } }).then(response => { if (response.ok) { loadingText.textContent = 'Reindirizzamento...'; setTimeout(() => { window.location.href = '/login'; }, 800); } else { throw new Error('Errore logout'); } }).catch(error => { console.error('Errore:', error); loadingText.textContent = 'Si √® verificato un errore.'; const retryButton = document.createElement('button'); retryButton.textContent = 'Riprova'; retryButton.style.cssText = 'margin-top:15px;padding:8px 20px;background:var(--navbar-red-main);color:white;border:none;border-radius:var(--radius-sm);cursor:pointer;'; retryButton.onclick = function () { document.body.removeChild(loadingOverlay); logout(); }; loadingOverlay.appendChild(retryButton); });
            }

        }); // END DOMContentLoaded
    </script>
</body>

</html>