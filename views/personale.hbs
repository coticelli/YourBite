<!DOCTYPE html>
<html lang="it">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gestione Personale - YourBite</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap"
        rel="stylesheet">
    <script src="/socket.io/socket.io.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <style>
        :root {
            /* Palette colori moderna e vibrante */
            --primary: #5e60ce;
            --primary-light: #6930c3;
            --primary-dark: #5390d9;
            --secondary: #48bfe3;
            --secondary-light: #64dfdf;
            --accent: #80ffdb;
            --accent-green: #2ecc71;
            --accent-red: #e74c3c;
            --accent-orange: #f39c12;
            --dark: #212529;
            --dark-blue: #1a1a2e;
            --medium-dark: #252941;
            --light: #ffffff;
            --gray: #f8f9fa;
            --gray-light: #fafbff;
            --gray-dark: #e9ecef;
            --text: #212529;
            --text-light: #6c757d;

            /* Effetti e animazioni */
            --shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            --shadow-lg: 0 20px 40px rgba(0, 0, 0, 0.15);
            --shadow-colored: 0 8px 25px rgba(94, 96, 206, 0.25);
            --radius-sm: 12px;
            --radius: 16px;
            --radius-lg: 24px;
            --transition-fast: all 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);
            --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
            --transition-spring: all 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Poppins', sans-serif;
        }

        body {
            background-color: var(--gray);
            color: var(--text);
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            overflow-x: hidden;
        }

        /* Particles */
        .particles {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: -1;
        }

        .particle {
            position: absolute;
            border-radius: 50%;
        }

        @keyframes particleFloat {
            0% {
                transform: translateY(0) rotate(0deg);
            }

            100% {
                transform: translateY(-20px) rotate(360deg);
            }
        }

        @keyframes particleFade {
            0% {
                opacity: 0.3;
            }

            100% {
                opacity: 0.6;
            }
        }

        /* Header */
        header {
            background: linear-gradient(135deg, var(--primary), var(--primary-dark));
            color: var(--light);
            padding: 1rem 0;
            box-shadow: var(--shadow);
            position: sticky;
            top: 0;
            z-index: 100;
        }

        .header-container {
            width: 100%;
            max-width: 1400px;
            margin: 0 auto;
            padding: 0 1.5rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .logo-wrapper {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .logo {
            height: 40px;
            width: auto;
        }

        .site-title {
            font-size: 1.8rem;
            font-weight: 700;
            color: var(--light);
            text-decoration: none;
        }

        .nav-menu {
            display: flex;
            gap: 1rem;
            align-items: center;
        }

        .nav-link {
            color: rgba(255, 255, 255, 0.85);
            text-decoration: none;
            padding: 8px 16px;
            border-radius: var(--radius-sm);
            transition: var(--transition);
            font-weight: 500;
        }

        .nav-link:hover {
            background: rgba(255, 255, 255, 0.1);
            color: var(--light);
        }

        .nav-link.active {
            background: rgba(255, 255, 255, 0.2);
            color: var(--light);
            font-weight: 600;
        }

        .user-menu {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .notifications-btn {
            background: rgba(255, 255, 255, 0.1);
            border: none;
            color: var(--light);
            width: 40px;
            height: 40px;
            border-radius: var(--radius-sm);
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
            cursor: pointer;
            transition: var(--transition);
        }

        .notifications-btn:hover {
            background: rgba(255, 255, 255, 0.2);
        }

        .notification-badge {
            position: absolute;
            top: -5px;
            right: -5px;
            background-color: var(--accent-red);
            color: var(--light);
            border-radius: 50%;
            padding: 2px;
            min-width: 18px;
            height: 18px;
            font-size: 12px;
            font-weight: 700;
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
            border: 2px solid var(--primary);
        }

        .user-profile {
            display: flex;
            align-items: center;
            gap: 10px;
            background: rgba(255, 255, 255, 0.1);
            padding: 6px 15px 6px 6px;
            border-radius: var(--radius-sm);
            cursor: pointer;
            transition: var(--transition);
        }

        .user-profile:hover {
            background: rgba(255, 255, 255, 0.2);
        }

        .user-avatar {
            width: 32px;
            height: 32px;
            border-radius: var(--radius-sm);
            object-fit: cover;
            background-color: var(--gray-light); /* Background for avatar */
        }

        .user-name {
            font-weight: 600;
            font-size: 14px;
        }

        /* Main Content */
        .main-container {
            flex: 1;
            display: flex;
            width: 100%;
            max-width: 1400px;
            margin: 0 auto;
            padding: 1.5rem;
            gap: 1.5rem;
        }

        /* Sidebar */
        .sidebar {
            width: 280px;
            flex-shrink: 0;
            background: var(--light);
            border-radius: var(--radius);
            box-shadow: var(--shadow);
            padding: 1.5rem;
            display: flex;
            flex-direction: column;
            gap: 1.5rem;
        }

        .sidebar-header {
            display: flex;
            align-items: center;
            gap: 10px;
            padding-bottom: 15px;
            border-bottom: 1px solid var(--gray-dark);
        }

        .sidebar-title {
            font-size: 1.2rem;
            font-weight: 600;
            color: var(--dark);
        }

        .sidebar-section {
            margin-bottom: 1rem;
        }

        .section-title {
            font-size: 0.9rem;
            font-weight: 600;
            color: var(--text-light);
            text-transform: uppercase;
            letter-spacing: 0.5px;
            margin-bottom: 10px;
        }

        .menu-list {
            list-style: none;
            display: flex;
            flex-direction: column;
            gap: 5px;
        }

        .menu-item {
            display: flex;
            align-items: center;
            padding: 10px 15px;
            border-radius: var(--radius-sm);
            cursor: pointer;
            transition: var(--transition);
            color: var(--text);
            text-decoration: none;
            font-weight: 500;
        }

        .menu-item:hover {
            background-color: var(--gray-light);
        }

        .menu-item.active {
            background-color: rgba(94, 96, 206, 0.1);
            color: var(--primary);
            font-weight: 600;
        }

        .menu-item i {
            margin-right: 10px;
            width: 20px;
            text-align: center;
            color: var(--text-light);
        }

        .menu-item.active i {
            color: var(--primary);
        }

        .sidebar-stats {
            margin-top: auto;
            padding-top: 1rem;
            border-top: 1px solid var(--gray-dark);
        }

        .stat-item {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 10px;
        }

        .stat-label {
            font-size: 0.9rem;
            color: var(--text-light);
        }

        .stat-value {
            font-weight: 600;
            color: var(--dark);
        }

        /* Content Area */
        .content-area {
            flex: 1;
            display: flex;
            flex-direction: column;
            gap: 1.5rem;
        }

        /* Staff Overview Cards */
        .overview-cards {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));
            gap: 1.5rem;
        }

        .overview-card {
            background: var(--light);
            border-radius: var(--radius);
            box-shadow: var(--shadow);
            padding: 1.5rem;
            display: flex;
            flex-direction: column;
            gap: 10px;
            transition: var(--transition);
            cursor: pointer;
        }

        .overview-card:hover {
            transform: translateY(-5px);
            box-shadow: var(--shadow-lg);
        }

        .card-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
        }

        .card-title {
            font-size: 0.9rem;
            color: var(--text-light);
            font-weight: 500;
        }

        .card-icon {
            width: 40px;
            height: 40px;
            border-radius: var(--radius-sm);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.2rem;
        }

        .card-icon.staff {
            background-color: rgba(94, 96, 206, 0.1);
            color: var(--primary);
        }

        .card-icon.active {
            background-color: rgba(72, 191, 227, 0.1);
            color: var(--secondary);
        }

        .card-icon.hours {
            background-color: rgba(46, 204, 113, 0.1);
            color: var(--accent-green);
        }

        .card-icon.performance {
            background-color: rgba(243, 156, 18, 0.1);
            color: var(--accent-orange);
        }

        .card-value {
            font-size: 1.5rem;
            font-weight: 700;
            color: var(--dark);
        }

        .card-footer {
            display: flex;
            align-items: center;
            gap: 5px;
            font-size: 0.8rem;
        }

        .trend-up {
            color: var(--accent-green);
        }

        .trend-down {
            color: var(--accent-red);
        }

        /* Staff Management Section */
        .staff-management {
            background: var(--light);
            border-radius: var(--radius);
            box-shadow: var(--shadow);
            overflow: hidden;
            display: flex;
            flex-direction: column;
        }

        .section-header {
            padding: 1.5rem;
            border-bottom: 1px solid var(--gray-dark);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .section-title-main {
            font-size: 1.2rem;
            font-weight: 600;
            color: var(--dark);
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .section-title-main i {
            color: var(--primary);
        }

        .section-actions {
            display: flex;
            gap: 10px;
        }

        .action-btn {
            background: var(--gray-light);
            border: none;
            padding: 8px 16px;
            border-radius: var(--radius-sm);
            display: flex;
            align-items: center;
            gap: 8px;
            color: var(--text);
            font-weight: 500;
            cursor: pointer;
            transition: var(--transition);
        }

        .action-btn:hover {
            background: rgba(94, 96, 206, 0.1);
            color: var(--primary);
        }

        .action-btn.primary {
            background: var(--primary);
            color: var(--light);
        }

        .action-btn.primary:hover {
            background: var(--primary-dark);
        }

        .filter-bar {
            display: flex;
            align-items: center;
            padding: 1rem 1.5rem;
            background: var(--gray-light);
            gap: 15px;
            flex-wrap: wrap;
        }

        .search-box {
            flex: 1;
            min-width: 200px;
            position: relative;
        }

        .search-input {
            width: 100%;
            padding: 10px 15px 10px 40px;
            border-radius: var(--radius-sm);
            border: 1px solid var(--gray-dark);
            background: var(--light);
            font-size: 0.9rem;
            transition: var(--transition);
        }

        .search-icon {
            position: absolute;
            left: 15px;
            top: 50%;
            transform: translateY(-50%);
            color: var(--text-light);
        }

        .search-input:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(94, 96, 206, 0.1);
        }

        .filter-dropdown {
            position: relative;
        }

        .filter-btn {
            background: var(--light);
            border: 1px solid var(--gray-dark);
            padding: 9px 15px;
            border-radius: var(--radius-sm);
            display: flex;
            align-items: center;
            gap: 8px;
            font-weight: 500;
            cursor: pointer;
            transition: var(--transition);
            font-size: 0.9rem;
            color: var(--text);
        }

        .filter-btn:hover {
            border-color: var(--primary);
        }

        .filter-dropdown-content {
            position: absolute;
            top: 100%;
            left: 0;
            background: var(--light);
            border-radius: var(--radius-sm);
            box-shadow: var(--shadow);
            min-width: 180px;
            z-index: 10;
            padding: 0.5rem 0;
            margin-top: 5px;
            display: none;
        }

        .filter-dropdown.active .filter-dropdown-content {
            display: block;
            animation: fadeIn 0.2s forwards;
        }

        .filter-item {
            padding: 8px 15px;
            cursor: pointer;
            transition: var(--transition-fast);
        }

        .filter-item:hover {
            background: var(--gray-light);
        }

        .filter-item.active {
            background: rgba(94, 96, 206, 0.1);
            color: var(--primary);
            font-weight: 500;
        }

        .staff-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 1rem;
            padding: 1.5rem;
        }
         .no-results {
            grid-column: 1 / -1; /* Span all columns */
            text-align: center;
            padding: 2rem;
            color: var(--text-light);
            font-style: italic;
        }

        .staff-card {
            background: var(--light);
            border-radius: var(--radius);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
            overflow: hidden;
            transition: var(--transition);
        }

        .staff-card:hover {
            transform: translateY(-5px);
            box-shadow: var(--shadow-lg);
        }

        .staff-card-header {
            padding: 1.5rem;
            text-align: center;
            position: relative;
        }

        .staff-status {
            position: absolute;
            top: 1rem;
            right: 1rem;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            background: var(--accent-green);
            box-shadow: 0 0 0 3px rgba(46, 204, 113, 0.2);
        }

        .staff-status.offline {
            background: var(--accent-red);
            box-shadow: 0 0 0 3px rgba(231, 76, 60, 0.2);
        }

        .staff-status.break {
            background: var(--accent-orange);
            box-shadow: 0 0 0 3px rgba(243, 156, 18, 0.2);
        }

        .staff-avatar {
            width: 80px;
            height: 80px;
            border-radius: 50%;
            object-fit: cover;
            margin: 0 auto 15px;
            border: 3px solid var(--light);
            box-shadow: var(--shadow);
            background-color: var(--gray-light); /* Added background */
        }

        .staff-name {
            font-size: 1.2rem;
            font-weight: 600;
            margin-bottom: 5px;
        }

        .staff-position {
            font-size: 0.9rem;
            color: var(--text-light);
        }

        .staff-card-body {
            padding: 0 1.5rem 1rem;
        }

        .staff-stats {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 10px;
            margin-bottom: 15px;
        }

        .staff-stat {
            text-align: center;
            padding: 8px;
            background: var(--gray-light);
            border-radius: var(--radius-sm);
        }

        .stat-label-card {
            font-size: 0.8rem;
            color: var(--text-light);
            margin-bottom: 5px;
        }

        .stat-value-card {
            font-size: 1.1rem;
            font-weight: 600;
            color: var(--dark);
        }

        .staff-card-footer {
            padding: 1rem 1.5rem;
            background: var(--gray-light);
            display: flex;
            justify-content: space-between;
            border-top: 1px solid var(--gray-dark);
        }

        .staff-card-action {
            background: none;
            border: none;
            color: var(--text-light);
            font-size: 1rem;
            cursor: pointer;
            transition: var(--transition);
            padding: 5px;
        }

        .staff-card-action:hover {
            color: var(--primary);
        }

        /* Modal Styles */
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 1000;
            padding: 1rem;
            opacity: 0;
            visibility: hidden;
            transition: var(--transition);
        }

        .modal-overlay.active {
            opacity: 1;
            visibility: visible;
        }

        .modal {
            background: var(--light);
            border-radius: var(--radius);
            max-width: 600px;
            width: 100%;
            max-height: 90vh;
            overflow-y: auto;
            box-shadow: var(--shadow-lg);
            transform: translateY(20px);
            transition: var(--transition-spring);
        }

        .modal-overlay.active .modal {
            transform: translateY(0);
        }

        .modal-header {
            padding: 1.5rem;
            border-bottom: 1px solid var(--gray-dark);
            position: relative;
        }

        .modal-title {
            font-size: 1.2rem;
            font-weight: 600;
            color: var(--dark);
        }

        .modal-close {
            position: absolute;
            top: 1.5rem;
            right: 1.5rem;
            background: none;
            border: none;
            font-size: 1.2rem;
            color: var(--text-light);
            cursor: pointer;
            transition: var(--transition);
        }

        .modal-close:hover {
            color: var(--accent-red);
        }

        .modal-body {
            padding: 1.5rem;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
        }

        .form-control {
            width: 100%;
            padding: 10px 15px;
            border-radius: var(--radius-sm);
            border: 1px solid var(--gray-dark);
            font-size: 0.95rem;
            transition: var(--transition);
        }

        .form-control:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(94, 96, 206, 0.1);
        }

        .form-select {
            width: 100%;
            padding: 10px 15px;
            border-radius: var(--radius-sm);
            border: 1px solid var(--gray-dark);
            font-size: 0.95rem;
            transition: var(--transition);
            background-color: var(--light);
        }

        .form-select:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(94, 96, 206, 0.1);
        }

        .form-check {
            display: flex;
            align-items: center;
            gap: 8px;
            margin-bottom: 10px;
        }

        .form-check-input {
            width: 18px;
            height: 18px;
            accent-color: var(--primary);
        }

        .form-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 1rem;
        }

        .modal-footer {
            padding: 1rem 1.5rem;
            border-top: 1px solid var(--gray-dark);
            display: flex;
            justify-content: flex-end;
            gap: 10px;
        }

        .btn {
            padding: 8px 16px;
            border-radius: var(--radius-sm);
            font-weight: 500;
            cursor: pointer;
            transition: var(--transition);
            border: none;
            font-size: 0.95rem;
        }

        .btn-default {
            background: var(--gray-light);
            color: var(--text);
        }

        .btn-default:hover {
            background: var(--gray-dark);
        }

        .btn-primary {
            background: var(--primary);
            color: var(--light);
        }

        .btn-primary:hover {
            background: var(--primary-dark);
        }

        .btn-danger {
            background: var(--accent-red);
            color: var(--light);
        }

        .btn-danger:hover {
            background: #c0392b;
        }

        /* Staff Details Modal */
        .staff-details-header {
            display: flex;
            align-items: center;
            gap: 20px;
            margin-bottom: 20px;
        }

        .staff-details-avatar {
            width: 80px;
            height: 80px;
            border-radius: 50%;
            object-fit: cover;
             background-color: var(--gray-light); /* Added background */
        }

        .staff-details-info h3 {
            font-size: 1.3rem;
            font-weight: 600;
            margin-bottom: 5px;
        }

        .staff-details-info p {
            color: var(--text-light);
        }

        .staff-details-badge {
            display: inline-block;
            padding: 3px 10px;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 500;
            margin-top: 5px;
        }

        .badge-active {
            background-color: rgba(46, 204, 113, 0.1);
            color: var(--accent-green);
        }

        .badge-break {
            background-color: rgba(243, 156, 18, 0.1);
            color: var(--accent-orange);
        }

        .badge-offline {
            background-color: rgba(231, 76, 60, 0.1);
            color: var(--accent-red);
        }

        .staff-details-section {
            margin-bottom: 20px;
        }

        .staff-details-section h4 {
            font-size: 1rem;
            font-weight: 600;
            margin-bottom: 10px;
            color: var(--text);
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .staff-details-section h4 i {
            color: var(--primary);
        }

        .details-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 15px;
        }

        .details-item {
            display: flex;
            flex-direction: column;
        }

        .details-label {
            font-size: 0.85rem;
            color: var(--text-light);
            margin-bottom: 3px;
        }

        .details-value {
            font-size: 0.95rem;
            font-weight: 500;
        }

        .schedule-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 10px;
        }

        .schedule-table th,
        .schedule-table td {
            padding: 8px 10px;
            text-align: left;
            font-size: 0.9rem;
            border-bottom: 1px solid var(--gray-dark);
        }

        .schedule-table th {
            font-weight: 500;
            color: var(--text-light);
            background-color: var(--gray-light);
        }

        .schedule-table tr:last-child td {
            border-bottom: none;
        }

        .skills-container {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
            margin-top: 10px;
        }

        .skill-badge {
            background-color: var(--gray-light);
            border-radius: 20px;
            padding: 3px 12px;
            font-size: 0.85rem;
        }

        .performance-meter {
            width: 100%;
            height: 8px;
            background-color: var(--gray-light);
            border-radius: 4px;
            margin-top: 5px;
            overflow: hidden;
        }

        .performance-bar {
            height: 100%;
            border-radius: 4px;
            background: linear-gradient(to right, var(--accent-green), var(--secondary));
        }

        /* Turn Switch Styles */
        .switch-container {
            display: flex;
            gap: 10px;
            margin-top: 10px;
            overflow-x: auto;
            padding-bottom: 10px;
        }

        .day-switch {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 5px;
        }

        .day-label {
            font-size: 0.8rem;
            color: var(--text-light);
        }

        .switch {
            position: relative;
            display: inline-block;
            width: 44px;
            height: 22px;
        }

        .switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

        .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: var(--gray-dark);
            transition: .4s;
            border-radius: 34px;
        }

        .slider:before {
            position: absolute;
            content: "";
            height: 16px;
            width: 16px;
            left: 3px;
            bottom: 3px;
            background-color: white;
            transition: .4s;
            border-radius: 50%;
        }

        input:checked+.slider {
            background-color: var(--accent-green);
        }

        input:checked+.slider:before {
            transform: translateX(22px);
        }

        /* Animation Keyframes */
        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(10px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        /* Schedule Calendar */
        .calendar-container {
            margin-top: 15px;
        }

        .calendar-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }

        .calendar-title {
            font-size: 1.1rem;
            font-weight: 600;
        }

        .calendar-nav {
            display: flex;
            gap: 10px;
        }

        .calendar-nav-btn {
            background: var(--gray-light);
            border: none;
            width: 32px;
            height: 32px;
            border-radius: var(--radius-sm);
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: var(--transition);
        }

        .calendar-nav-btn:hover {
            background: rgba(94, 96, 206, 0.1);
            color: var(--primary);
        }

        .calendar-grid {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            gap: 5px;
        }

        .calendar-day-header {
            text-align: center;
            font-weight: 500;
            padding: 5px;
            font-size: 0.85rem;
            color: var(--text-light);
        }

        .calendar-day {
            aspect-ratio: 1;
            background: var(--light);
            border-radius: var(--radius-sm);
            padding: 5px;
            display: flex;
            flex-direction: column;
            align-items: center;
            border: 1px solid var(--gray-dark);
            cursor: pointer;
            transition: var(--transition);
        }

        .calendar-day:hover {
            border-color: var(--primary);
        }

        .calendar-day.today {
            background: rgba(94, 96, 206, 0.1);
            border-color: var(--primary);
        }

        .calendar-day.other-month {
            opacity: 0.5;
        }

        .day-number {
            font-size: 0.9rem;
            font-weight: 500;
            margin-bottom: 3px;
        }

        .day-staff {
            font-size: 0.7rem;
            color: var(--text-light);
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            width: 100%;
            text-align: center;
        }

        /* Tabbed Navigation */
        .tabs-container {
            margin-bottom: 20px;
        }

        .tabs-nav {
            display: flex;
            border-bottom: 1px solid var(--gray-dark);
            margin-bottom: 20px;
        }

        .tab-item {
            padding: 10px 20px;
            cursor: pointer;
            font-weight: 500;
            color: var(--text-light);
            border-bottom: 2px solid transparent;
            transition: var(--transition);
        }

        .tab-item.active {
            color: var(--primary);
            border-bottom-color: var(--primary);
        }

        .tab-content {
            display: none;
        }

        .tab-content.active {
            display: block;
        }

        /* Passi assunzione */
        .hiring-steps {
            display: flex;
            justify-content: space-between;
            margin-bottom: 30px;
            position: relative;
        }

        .hiring-steps::before {
            content: '';
            position: absolute;
            top: 25px;
            left: 0;
            right: 0;
            height: 3px;
            background: var(--gray-dark);
            z-index: 1;
        }

        .hiring-step {
            display: flex;
            flex-direction: column;
            align-items: center;
            position: relative;
            z-index: 2;
            flex: 1;
            text-align: center;
        }

        .step-number {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            background: var(--gray-dark);
            color: var(--text-light);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.2rem;
            font-weight: 600;
            margin-bottom: 10px;
            border: 3px solid var(--light);
            transition: var(--transition);
        }

        .hiring-step.active .step-number {
            background: var(--primary);
            color: var(--light);
        }

        .hiring-step.completed .step-number {
            background: var(--accent-green);
            color: var(--light);
        }

        .step-title {
            font-size: 0.85rem;
            font-weight: 500;
            margin-bottom: 5px;
        }

        .step-desc {
            font-size: 0.8rem;
            color: var(--text-light);
        }

        /* Progress bars */
        .progress-container {
            width: 100%;
            margin: 10px 0;
        }

        .progress-label {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 5px;
        }

        .progress-title {
            font-size: 0.85rem;
            font-weight: 500;
        }

        .progress-percentage {
            font-size: 0.85rem;
            color: var(--text-light);
        }

        .progress-bar-container {
            height: 8px;
            background: var(--gray-light);
            border-radius: 4px;
            overflow: hidden;
        }

        .progress-bar-fill {
            height: 100%;
            background: linear-gradient(to right, var(--secondary-light), var(--primary));
            border-radius: 4px;
            transition: width 0.5s ease;
        }

        /* Toast Notifications */
        .toast-container {
            position: fixed;
            bottom: 20px;
            right: 20px;
            display: flex;
            flex-direction: column;
            gap: 10px;
            z-index: 1000;
        }

        .toast {
            background: var(--light);
            border-left: 4px solid var(--primary);
            border-radius: var(--radius-sm);
            box-shadow: var(--shadow);
            padding: 15px 20px;
            display: flex;
            align-items: center;
            gap: 15px;
            min-width: 300px;
            max-width: 400px;
            animation: slideIn 0.3s forwards;
            transform: translateX(100%);
        }

        .toast.success {
            border-left-color: var(--accent-green);
        }

        .toast.error {
            border-left-color: var(--accent-red);
        }

        .toast.warning {
            border-left-color: var(--accent-orange);
        }

        .toast-icon {
            font-size: 1.5rem;
        }

        .toast.success .toast-icon {
            color: var(--accent-green);
        }

        .toast.error .toast-icon {
            color: var(--accent-red);
        }

        .toast.warning .toast-icon {
            color: var(--accent-orange);
        }

        .toast-content {
            flex: 1;
        }

        .toast-title {
            font-weight: 600;
            margin-bottom: 3px;
        }

        .toast-message {
            font-size: 0.9rem;
            color: var(--text-light);
        }

        .toast-close {
            background: none;
            border: none;
            color: var(--text-light);
            cursor: pointer;
            font-size: 1rem;
            padding: 5px;
            transition: var(--transition);
        }

        .toast-close:hover {
            color: var(--accent-red);
        }

        @keyframes slideIn {
            to {
                transform: translateX(0);
            }
        }

        @keyframes slideOut {
            from {
                transform: translateX(0);
            }

            to {
                transform: translateX(120%);
                opacity: 0;
            }
        }

        /* Charts container */
        .chart-container {
            padding: 15px;
            background: var(--light);
            border-radius: var(--radius);
            box-shadow: var(--shadow);
            margin-bottom: 20px;
        }

        /* Responsive CSS */
        @media (max-width: 1200px) {
            .main-container {
                flex-direction: column;
            }

            .sidebar {
                width: 100%;
            }
        }

        @media (max-width: 768px) {
            .header-container {
                flex-direction: column;
                gap: 10px;
                padding: 1rem;
            }

            .nav-menu {
                width: 100%;
                overflow-x: auto;
                padding-bottom: 10px;
                -ms-overflow-style: none;
                scrollbar-width: none;
            }

            .nav-menu::-webkit-scrollbar {
                display: none;
            }

            .nav-link {
                white-space: nowrap;
            }

            .main-container {
                padding: 1rem;
            }

            .staff-grid {
                grid-template-columns: 1fr;
            }

            .form-grid {
                grid-template-columns: 1fr;
            }

            .details-grid {
                grid-template-columns: 1fr;
            }

            .filter-bar {
                flex-direction: column;
                align-items: stretch;
            }

            .calendar-day {
                font-size: 0.8rem;
            }

            .calendar-grid {
                gap: 2px;
            }
        }

        @media (max-width: 480px) {
            .section-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 10px;
            }

            .section-actions {
                width: 100%;
                justify-content: space-between;
            }

            .tabs-nav {
                overflow-x: auto;
                -ms-overflow-style: none;
                scrollbar-width: none;
            }

            .tabs-nav::-webkit-scrollbar {
                display: none;
            }

            .tab-item {
                padding: 10px 15px;
                white-space: nowrap;
            }

            .hiring-steps {
                flex-direction: column;
                gap: 20px;
            }

            .hiring-steps::before {
                display: none;
            }
        }
    </style>
</head>

<body>
    <!-- Connection status indicator (nascosto come richiesto) -->
    <div class="connection-status" id="connectionStatus" style="display: none;">
        <i class="fas fa-sync-alt connection-icon"></i>
        <span id="connectionText">Connessione in corso...</span>
    </div>

    <!-- Particle Background -->
    <div class="particles" id="particles"></div>

    <!-- Header -->
    <header>
        <div class="header-container">
            <div class="logo-wrapper">
                <img src="/img/logo.png" alt="YourBite Logo" class="logo">
                <a href="#" class="site-title">YourBite</a>
            </div>

            <nav class="nav-menu">
                <a href="/homepage_capo" class="nav-link">Dashboard</a>
                <a href="/ordini" class="nav-link">Ordini</a>
                <a href="/menu" class="nav-link">Menu</a>
                <a href="#" class="nav-link">Statistiche</a>
                <a href="/personale" class="nav-link active">Personale</a>
            </nav>

            <div class="user-menu">
                <button class="notifications-btn">
                    <i class="far fa-bell"></i>
                    <span class="notification-badge">3</span>
                </button>
                <div class="user-profile" id="userProfileBtn">
                     <!-- Avatar utente (potrebbe usare lo stesso sistema o essere fisso) -->
                    <img src="https://ui-avatars.com/api/?name=Manager&background=random&color=fff&size=32" alt="User" class="user-avatar">
                    <span class="user-name">Manager</span>
                </div>
            </div>
        </div>
    </header>

    <!-- Main Content -->
    <main class="main-container">
        <!-- Sidebar -->
        <aside class="sidebar">
            <div class="sidebar-header">
                <i class="fas fa-users"></i>
                <h2 class="sidebar-title">Personale</h2>
            </div>

            <div class="sidebar-section">
                <h3 class="section-title">Menu</h3>
                <ul class="menu-list">
                    <li>
                        <a href="/homepage_capo" class="menu-item">
                            <i class="fas fa-home"></i>
                            Dashboard
                        </a>
                    </li>
                    <li>
                        <a href="/ordini" class="menu-item">
                            <i class="fas fa-shopping-bag"></i>
                            Ordini
                        </a>
                    </li>
                    <li>
                        <a href="/menu" class="menu-item">
                            <i class="fas fa-utensils"></i>
                            Menu
                        </a>
                    </li>
                    <li>
                        <a href="#" class="menu-item">
                            <i class="fas fa-chart-bar"></i>
                            Statistiche
                        </a>
                    </li>
                    <li>
                        <a href="/personale" class="menu-item active">
                            <i class="fas fa-users"></i>
                            Personale
                        </a>
                    </li>
                </ul>
            </div>

            <div class="sidebar-section">
                <h3 class="section-title">Gestione Personale</h3>
                <ul class="menu-list">
                    <li>
                        <a href="#" class="menu-item" id="showAllStaffBtn">
                            <i class="fas fa-user-friends"></i>
                            Tutti i dipendenti
                        </a>
                    </li>
                    <li>
                        <a href="#" class="menu-item" id="schedulesBtn">
                            <i class="fas fa-calendar-alt"></i>
                            Turni di lavoro
                        </a>
                    </li>
                    <li>
                        <a href="#" class="menu-item" id="performanceBtn">
                            <i class="fas fa-chart-line"></i>
                            Performance
                        </a>
                    </li>
                    <li>
                        <a href="#" class="menu-item" id="addNewStaffBtn">
                            <i class="fas fa-user-plus"></i>
                            Aggiungi dipendente
                        </a>
                    </li>
                </ul>
            </div>

            <div class="sidebar-stats">
                <div class="stat-item">
                    <span class="stat-label">Dipendenti attivi</span>
                    <span class="stat-value" id="activeStaffCount">0</span> <!-- Updated dynamically -->
                </div>
                <div class="stat-item">
                    <span class="stat-label">In servizio oggi</span>
                    <span class="stat-value" id="onDutyTodayCount">0</span> <!-- Updated dynamically -->
                </div>
                <div class="stat-item">
                    <span class="stat-label">Totale Dipendenti</span>
                    <span class="stat-value" id="totalStaffCount">0</span> <!-- Updated dynamically -->
                </div>
            </div>
        </aside>

        <!-- Content Area -->
        <div class="content-area">
            <!-- Staff Overview Cards -->
            <div class="overview-cards">
                <div class="overview-card">
                    <div class="card-header">
                        <h3 class="card-title">Totale Personale</h3>
                        <div class="card-icon staff">
                            <i class="fas fa-users"></i>
                        </div>
                    </div>
                    <div class="card-value" id="overviewTotalStaff">0</div>
                    <div class="card-footer">
                        <!-- Trend info (statico per ora) -->
                    </div>
                </div>

                <div class="overview-card">
                    <div class="card-header">
                        <h3 class="card-title">In servizio</h3>
                        <div class="card-icon active">
                            <i class="fas fa-user-check"></i>
                        </div>
                    </div>
                    <div class="card-value" id="overviewOnDuty">0</div>
                     <div class="card-footer">
                        <!-- Trend info (statico per ora) -->
                    </div>
                </div>

                <div class="overview-card">
                    <div class="card-header">
                        <h3 class="card-title">In Pausa</h3>
                        <div class="card-icon performance"> <!-- Usiamo icona performance per pausa -->
                           <i class="fas fa-mug-hot"></i>
                        </div>
                    </div>
                    <div class="card-value" id="overviewOnBreak">0</div>
                     <div class="card-footer">
                        <!-- Trend info (statico per ora) -->
                    </div>
                </div>

                <div class="overview-card">
                     <div class="card-header">
                        <h3 class="card-title">Fuori Servizio</h3>
                        <div class="card-icon hours"> <!-- Usiamo icona hours per offline -->
                            <i class="fas fa-user-clock"></i>
                        </div>
                    </div>
                    <div class="card-value" id="overviewOffline">0</div>
                    <div class="card-footer">
                       <!-- Trend info (statico per ora) -->
                    </div>
                </div>
            </div>

            <!-- Staff Management Section -->
            <div class="staff-management">
                <div class="section-header">
                    <h3 class="section-title-main">
                        <i class="fas fa-user-friends"></i>
                        Gestione Personale
                    </h3>
                    <div class="section-actions">
                        <button class="action-btn" id="viewScheduleBtn">
                            <i class="fas fa-calendar-alt"></i>
                            Visualizza Turni
                        </button>
                        <button class="action-btn primary" id="addStaffBtn">
                            <i class="fas fa-plus"></i>
                            Aggiungi Dipendente
                        </button>
                    </div>
                </div>

                <div class="filter-bar">
                    <div class="search-box">
                        <i class="fas fa-search search-icon"></i>
                        <input type="text" class="search-input" id="staffSearch" placeholder="Cerca personale...">
                    </div>

                    <div class="filter-dropdown" id="departmentFilter">
                        <button class="filter-btn">
                            <i class="fas fa-building"></i>
                            Reparto
                            <i class="fas fa-chevron-down"></i>
                        </button>
                        <div class="filter-dropdown-content">
                            <div class="filter-item active" data-filter="all">Tutti i reparti</div>
                            <div class="filter-item" data-filter="cucina">Cucina</div>
                            <div class="filter-item" data-filter="servizio">Servizio</div>
                            <div class="filter-item" data-filter="consegna">Consegna</div>
                            <div class="filter-item" data-filter="cassa">Cassa</div>
                            <div class="filter-item" data-filter="pulizie">Pulizie</div>
                        </div>
                    </div>

                    <div class="filter-dropdown" id="statusFilter">
                        <button class="filter-btn">
                            <i class="fas fa-circle"></i>
                            Stato
                            <i class="fas fa-chevron-down"></i>
                        </button>
                        <div class="filter-dropdown-content">
                            <div class="filter-item active" data-filter="all">Tutti gli stati</div>
                            <div class="filter-item" data-filter="active">In servizio</div>
                            <div class="filter-item" data-filter="break">In pausa</div>
                            <div class="filter-item" data-filter="offline">Fuori servizio</div>
                        </div>
                    </div>

                    <div class="filter-dropdown" id="shiftFilter">
                        <button class="filter-btn">
                            <i class="fas fa-clock"></i>
                            Turno
                            <i class="fas fa-chevron-down"></i>
                        </button>
                        <div class="filter-dropdown-content">
                            <div class="filter-item active" data-filter="all">Tutti i turni</div>
                            <div class="filter-item" data-filter="morning">Mattina</div>
                            <div class="filter-item" data-filter="afternoon">Pomeriggio</div>
                            <div class="filter-item" data-filter="evening">Sera</div>
                            <div class="filter-item" data-filter="night">Notte</div>
                        </div>
                    </div>
                </div>

                <div class="staff-grid" id="staffGrid">
                    <!-- Staff cards are generated dynamically -->
                </div>
            </div>
        </div>
    </main>

    <!-- Add/Edit Staff Modal -->
    <div class="modal-overlay" id="staffModal">
        <div class="modal">
            <div class="modal-header">
                <h3 class="modal-title" id="modalTitle">Aggiungi nuovo dipendente</h3>
                <button class="modal-close" id="closeModal">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="modal-body">
                <form id="staffForm">
                    <div class="form-grid">
                        <div class="form-group">
                            <label class="form-label" for="staffName">Nome</label>
                            <input type="text" class="form-control" id="staffName" placeholder="Nome" required>
                        </div>
                        <div class="form-group">
                            <label class="form-label" for="staffSurname">Cognome</label>
                            <input type="text" class="form-control" id="staffSurname" placeholder="Cognome" required>
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="form-label" for="staffEmail">Email</label>
                        <input type="email" class="form-control" id="staffEmail" placeholder="email@esempio.com" required>
                    </div>

                    <div class="form-grid">
                        <div class="form-group">
                            <label class="form-label" for="staffPhone">Telefono</label>
                            <input type="tel" class="form-control" id="staffPhone" placeholder="+39 123 456 7890">
                        </div>
                        <div class="form-group">
                            <label class="form-label" for="staffBirthdate">Data di nascita</label>
                            <input type="date" class="form-control" id="staffBirthdate">
                        </div>
                    </div>

                    <div class="form-grid">
                        <div class="form-group">
                            <label class="form-label" for="staffPosition">Posizione</label>
                            <select class="form-select" id="staffPosition" required>
                                <option value="">Seleziona posizione</option>
                                <option value="cuoco">Cuoco</option>
                                <option value="cameriere">Cameriere</option>
                                <option value="cassiere">Cassiere</option>
                                <option value="rider">Rider</option>
                                <option value="pulizie">Addetto alle pulizie</option>
                                <option value="manager">Manager</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label class="form-label" for="staffDepartment">Reparto</label>
                            <select class="form-select" id="staffDepartment" required>
                                <option value="">Seleziona reparto</option>
                                <option value="cucina">Cucina</option>
                                <option value="servizio">Servizio</option>
                                <option value="consegna">Consegna</option>
                                <option value="cassa">Cassa</option>
                                <option value="pulizie">Pulizie</option>
                            </select>
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="form-label" for="staffHireDate">Data di assunzione</label>
                        <input type="date" class="form-control" id="staffHireDate">
                    </div>

                    <div class="form-group">
                        <label class="form-label">Giorni di disponibilità</label>
                        <div class="switch-container">
                            <div class="day-switch">
                                <span class="day-label">Lun</span>
                                <label class="switch">
                                    <input type="checkbox" name="availability[]" value="monday" checked>
                                    <span class="slider"></span>
                                </label>
                            </div>
                            <div class="day-switch">
                                <span class="day-label">Mar</span>
                                <label class="switch">
                                    <input type="checkbox" name="availability[]" value="tuesday" checked>
                                    <span class="slider"></span>
                                </label>
                            </div>
                            <div class="day-switch">
                                <span class="day-label">Mer</span>
                                <label class="switch">
                                    <input type="checkbox" name="availability[]" value="wednesday" checked>
                                    <span class="slider"></span>
                                </label>
                            </div>
                            <div class="day-switch">
                                <span class="day-label">Gio</span>
                                <label class="switch">
                                    <input type="checkbox" name="availability[]" value="thursday" checked>
                                    <span class="slider"></span>
                                </label>
                            </div>
                            <div class="day-switch">
                                <span class="day-label">Ven</span>
                                <label class="switch">
                                    <input type="checkbox" name="availability[]" value="friday" checked>
                                    <span class="slider"></span>
                                </label>
                            </div>
                            <div class="day-switch">
                                <span class="day-label">Sab</span>
                                <label class="switch">
                                    <input type="checkbox" name="availability[]" value="saturday">
                                    <span class="slider"></span>
                                </label>
                            </div>
                            <div class="day-switch">
                                <span class="day-label">Dom</span>
                                <label class="switch">
                                    <input type="checkbox" name="availability[]" value="sunday">
                                    <span class="slider"></span>
                                </label>
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="form-label" for="staffNotes">Note</label>
                        <textarea class="form-control" id="staffNotes" rows="3"
                            placeholder="Inserisci eventuali note..."></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" id="cancelStaffBtn">Annulla</button>
                <button type="button" class="btn btn-primary" id="saveStaffBtn">Salva</button>
            </div>
        </div>
    </div>

    <!-- Staff Details Modal -->
    <div class="modal-overlay" id="staffDetailsModal">
        <div class="modal">
            <div class="modal-header">
                <h3 class="modal-title">Dettagli Dipendente</h3>
                <button class="modal-close" id="closeDetailsModal">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="modal-body">
                <div class="staff-details-header">
                     <!-- Immagine generata da UI Avatars -->
                    <img src="" alt="Staff Avatar" class="staff-details-avatar" id="detailsAvatar">
                    <div class="staff-details-info">
                        <h3 id="detailsName">Nome Dipendente</h3>
                        <p id="detailsPosition">Posizione</p>
                        <span class="staff-details-badge badge-active" id="detailsStatus">In servizio</span>
                    </div>
                </div>

                <div class="tabs-container">
                    <div class="tabs-nav">
                        <div class="tab-item active" data-tab="info">Informazioni</div>
                        <div class="tab-item" data-tab="schedule">Turni</div>
                        <div class="tab-item" data-tab="performance">Performance</div>
                        <div class="tab-item" data-tab="documents">Documenti</div>
                    </div>

                    <div class="tab-content active" id="tab-info">
                        <div class="staff-details-section">
                            <h4><i class="fas fa-info-circle"></i> Informazioni Personali</h4>
                            <div class="details-grid">
                                <div class="details-item">
                                    <span class="details-label">Email</span>
                                    <span class="details-value" id="detailsEmail">email@esempio.com</span>
                                </div>
                                <div class="details-item">
                                    <span class="details-label">Telefono</span>
                                    <span class="details-value" id="detailsPhone">+39 123 456 7890</span>
                                </div>
                                <div class="details-item">
                                    <span class="details-label">Data di nascita</span>
                                    <span class="details-value" id="detailsBirthdate">01/01/1990</span>
                                </div>
                                <div class="details-item">
                                    <span class="details-label">Età</span>
                                    <span class="details-value" id="detailsAge">33 anni</span>
                                </div>
                            </div>
                        </div>

                        <div class="staff-details-section">
                            <h4><i class="fas fa-briefcase"></i> Informazioni Lavorative</h4>
                            <div class="details-grid">
                                <div class="details-item">
                                    <span class="details-label">Posizione</span>
                                    <span class="details-value" id="detailsJobPosition">Cameriere</span>
                                </div>
                                <div class="details-item">
                                    <span class="details-label">Reparto</span>
                                    <span class="details-value" id="detailsDepartment">Servizio</span>
                                </div>
                                <div class="details-item">
                                    <span class="details-label">Data assunzione</span>
                                    <span class="details-value" id="detailsHireDate">15/03/2022</span>
                                </div>
                                <div class="details-item">
                                    <span class="details-label">Anzianità</span>
                                    <span class="details-value" id="detailsSeniority">3 anni, 2 mesi</span>
                                </div>
                            </div>
                        </div>

                        <div class="staff-details-section">
                            <h4><i class="fas fa-star"></i> Competenze</h4>
                            <div class="skills-container" id="detailsSkills">
                                <!-- Competenze da popolare dinamicamente -->
                                <span class="skill-badge">Servizio al tavolo</span>
                                <span class="skill-badge">Gestione ordini</span>
                            </div>
                        </div>

                        <div class="staff-details-section">
                            <h4><i class="fas fa-sticky-note"></i> Note</h4>
                            <p id="detailsNotes">Nessuna nota.</p>
                        </div>
                    </div>

                    <div class="tab-content" id="tab-schedule">
                        <div class="staff-details-section">
                            <h4><i class="fas fa-calendar-week"></i> Turni Settimanali</h4>
                            <table class="schedule-table">
                                <thead>
                                    <tr>
                                        <th>Giorno</th>
                                        <th>Orario</th>
                                        <th>Reparto</th>
                                        <th>Note</th>
                                    </tr>
                                </thead>
                                <tbody id="scheduleTableBody">
                                    <!-- Righe turni da popolare dinamicamente -->
                                    <tr><td colspan="4">Dati turni non disponibili.</td></tr>
                                </tbody>
                            </table>
                        </div>

                        <div class="staff-details-section">
                            <h4><i class="fas fa-calendar-alt"></i> Calendario Mensile</h4>
                            <div class="calendar-container">
                                <div class="calendar-header">
                                    <h3 class="calendar-title" id="calendarMonth">Maggio 2025</h3>
                                    <div class="calendar-nav">
                                        <button class="calendar-nav-btn" id="prevMonth">
                                            <i class="fas fa-chevron-left"></i>
                                        </button>
                                        <button class="calendar-nav-btn" id="nextMonth">
                                            <i class="fas fa-chevron-right"></i>
                                        </button>
                                    </div>
                                </div>
                                <div class="calendar-grid" id="calendarGrid">
                                    <!-- Giorni della settimana -->
                                    <div class="calendar-day-header">Lun</div>
                                    <div class="calendar-day-header">Mar</div>
                                    <div class="calendar-day-header">Mer</div>
                                    <div class="calendar-day-header">Gio</div>
                                    <div class="calendar-day-header">Ven</div>
                                    <div class="calendar-day-header">Sab</div>
                                    <div class="calendar-day-header">Dom</div>
                                    <!-- Calendario generato dinamicamente -->
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="tab-content" id="tab-performance">
                        <div class="staff-details-section">
                            <h4><i class="fas fa-chart-line"></i> Performance Generale</h4>
                            <div class="details-grid">
                                <div class="details-item">
                                    <span class="details-label">Valutazione media</span>
                                    <div class="details-value" id="performanceRating">N/D</div>
                                    <div class="performance-meter">
                                        <div class="performance-bar" id="performanceRatingBar" style="width: 0%"></div>
                                    </div>
                                </div>
                                <div class="details-item">
                                    <span class="details-label">Efficienza (Esempio)</span>
                                    <div class="details-value" id="performanceEfficiency">N/D</div>
                                    <div class="performance-meter">
                                        <div class="performance-bar" id="performanceEfficiencyBar" style="width: 0%"></div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="staff-details-section">
                            <h4><i class="fas fa-tasks"></i> Metriche Dettagliate (Esempio)</h4>
                            <!-- Metriche esempio da popolare -->
                             <div class="progress-container">
                                <div class="progress-label">
                                    <span class="progress-title">Puntualità</span>
                                    <span class="progress-percentage">N/D</span>
                                </div>
                                <div class="progress-bar-container">
                                    <div class="progress-bar-fill" style="width: 0%"></div>
                                </div>
                            </div>
                        </div>

                        <div class="chart-container">
                            <canvas id="performanceChart"></canvas>
                        </div>
                    </div>

                    <div class="tab-content" id="tab-documents">
                        <div class="staff-details-section">
                            <h4><i class="fas fa-file-alt"></i> Documenti</h4>
                            <table class="schedule-table">
                                <thead>
                                    <tr>
                                        <th>Nome documento</th>
                                        <th>Data upload</th>
                                        <th>Scadenza</th>
                                        <th>Azioni</th>
                                    </tr>
                                </thead>
                                <tbody>
                                     <!-- Righe documenti da popolare dinamicamente -->
                                    <tr><td colspan="4">Nessun documento disponibile.</td></tr>
                                </tbody>
                            </table>
                        </div>

                        <div class="staff-details-section">
                            <h4><i class="fas fa-upload"></i> Carica nuovo documento</h4>
                            <div class="form-group">
                                <label class="form-label" for="docType">Tipo documento</label>
                                <select class="form-select" id="docType">
                                    <option value="">Seleziona tipo documento</option>
                                    <option value="id">Documento d'identità</option>
                                    <option value="contract">Contratto di lavoro</option>
                                    <option value="haccp">Attestato HACCP</option>
                                    <option value="cv">Curriculum Vitae</option>
                                    <option value="other">Altro</option>
                                </select>
                            </div>

                            <div class="form-group">
                                <label class="form-label" for="docFile">File</label>
                                <input type="file" class="form-control" id="docFile">
                            </div>

                            <div class="form-group">
                                <label class="form-label" for="docExpiry">Data scadenza (se applicabile)</label>
                                <input type="date" class="form-control" id="docExpiry">
                            </div>

                            <button class="action-btn primary" id="uploadDocBtn">
                                <i class="fas fa-upload"></i>
                                Carica documento
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" id="closeDetailsBtn">Chiudi</button>
                <button type="button" class="btn btn-primary" id="editStaffBtn">Modifica</button>
            </div>
        </div>
    </div>

    <!-- Schedule Modal -->
    <div class="modal-overlay" id="scheduleModal">
        <div class="modal">
            <div class="modal-header">
                <h3 class="modal-title">Gestione Turni</h3>
                <button class="modal-close" id="closeScheduleModal">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="modal-body">
                <div class="tabs-container">
                    <div class="tabs-nav">
                        <div class="tab-item active" data-tab="weekly">Settimanale</div>
                        <div class="tab-item" data-tab="monthly">Mensile</div>
                        <div class="tab-item" data-tab="template">Modelli</div>
                    </div>

                    <div class="tab-content active" id="tab-weekly">
                        <div class="calendar-header">
                            <h3 class="calendar-title" id="weekTitle">Settimana 3-9 maggio 2025</h3>
                            <div class="calendar-nav">
                                <button class="calendar-nav-btn" id="prevWeek">
                                    <i class="fas fa-chevron-left"></i>
                                </button>
                                <button class="calendar-nav-btn" id="nextWeek">
                                    <i class="fas fa-chevron-right"></i>
                                </button>
                            </div>
                        </div>

                        <table class="schedule-table">
                            <thead>
                                <tr>
                                    <th>Dipendente</th>
                                    <th>Lun</th>
                                    <th>Mar</th>
                                    <th>Mer</th>
                                    <th>Gio</th>
                                    <th>Ven</th>
                                    <th>Sab</th>
                                    <th>Dom</th>
                                </tr>
                            </thead>
                            <tbody id="weeklyScheduleBody">
                                <!-- Righe generate dinamicamente -->
                                <tr><td colspan="8">Dati turni settimanali da caricare...</td></tr>
                            </tbody>
                        </table>
                    </div>

                    <div class="tab-content" id="tab-monthly">
                        <div class="calendar-header">
                            <h3 class="calendar-title" id="scheduleMonthTitle">Maggio 2025</h3>
                            <div class="calendar-nav">
                                <button class="calendar-nav-btn" id="prevScheduleMonth">
                                    <i class="fas fa-chevron-left"></i>
                                </button>
                                <button class="calendar-nav-btn" id="nextScheduleMonth">
                                    <i class="fas fa-chevron-right"></i>
                                </button>
                            </div>
                        </div>

                        <div class="staff-details-section">
                            <h4><i class="fas fa-filter"></i> Filtra per dipendente</h4>
                            <select class="form-select" id="monthlyStaffFilter">
                                <option value="all">Tutti i dipendenti</option>
                                <!-- Opzioni generate dinamicamente -->
                            </select>
                        </div>

                        <div class="calendar-container">
                             <!-- Aggiungere qui la struttura del calendario mensile per i turni -->
                            <p>Visualizzazione calendario mensile turni da implementare.</p>
                             <div class="calendar-grid" id="monthlyScheduleGrid">
                                <!-- Giorni della settimana -->
                                <div class="calendar-day-header">Lun</div>
                                <div class="calendar-day-header">Mar</div>
                                <div class="calendar-day-header">Mer</div>
                                <div class="calendar-day-header">Gio</div>
                                <div class="calendar-day-header">Ven</div>
                                <div class="calendar-day-header">Sab</div>
                                <div class="calendar-day-header">Dom</div>
                                <!-- Calendario generato dinamicamente -->
                                <div style="grid-column: 1 / -1; text-align: center; padding: 1rem; color: var(--text-light);">Calendario mensile turni...</div>
                            </div>
                        </div>
                    </div>

                    <div class="tab-content" id="tab-template">
                        <div class="staff-details-section">
                            <h4><i class="fas fa-copy"></i> Modelli di turni</h4>
                            <p>Salva e riutilizza modelli di turni settimanali per una pianificazione più veloce.</p>

                            <div class="form-group">
                                <label class="form-label" for="templateSelect">Modelli salvati</label>
                                <select class="form-select" id="templateSelect">
                                    <option value="">Seleziona un modello</option>
                                    <option value="standard">Turni standard</option>
                                    <option value="summer">Turni estivi</option>
                                    <option value="weekend">Turni weekend intensivi</option>
                                </select>
                            </div>

                            <div class="form-group">
                                <label class="form-label" for="templateName">Nome nuovo modello</label>
                                <input type="text" class="form-control" id="templateName"
                                    placeholder="Inserisci nome modello">
                            </div>

                            <div class="form-group">
                                <button class="action-btn" id="loadTemplateBtn">
                                    <i class="fas fa-download"></i>
                                    Carica modello
                                </button>
                                <button class="action-btn primary" id="saveTemplateBtn">
                                    <i class="fas fa-save"></i>
                                    Salva come modello
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" id="cancelScheduleBtn">Annulla</button>
                <button type="button" class="btn btn-primary" id="saveScheduleBtn">Salva turni</button>
            </div>
        </div>
    </div>

    <!-- Toast Notifications Container -->
    <div class="toast-container" id="toastContainer"></div>

    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Dati di esempio - RIMOSSA PROPRIETA' avatar
        let staffData = [
            {
                id: 1,
                name: "Marco Rossi",
                position: "Cuoco",
                department: "cucina",
                status: "active",
                shift: "morning",
                email: "marco.rossi@yourbite.it",
                phone: "+39 333 1234567",
                birthdate: "1985-05-15",
                hireDate: "2020-03-10",
                hours: 38,
                rating: 4.8,
                availability: ["monday", "tuesday", "wednesday", "thursday", "friday"]
            },
            {
                id: 2,
                name: "Giulia Bianchi",
                position: "Cameriera",
                department: "servizio",
                status: "active",
                shift: "evening",
                email: "giulia.bianchi@yourbite.it",
                phone: "+39 333 7654321",
                birthdate: "1990-08-25",
                hireDate: "2021-06-15",
                hours: 30,
                rating: 4.7,
                availability: ["monday", "tuesday", "friday", "saturday", "sunday"]
            },
            {
                id: 3,
                name: "Alessandro Verdi",
                position: "Chef",
                department: "cucina",
                status: "active",
                shift: "morning",
                email: "alessandro.verdi@yourbite.it",
                phone: "+39 333 9876543",
                birthdate: "1982-02-10",
                hireDate: "2019-01-15",
                hours: 40,
                rating: 4.9,
                availability: ["monday", "tuesday", "wednesday", "thursday", "friday"]
            },
             {
                id: 4,
                name: "Sofia Neri",
                position: "Cassiera",
                department: "cassa",
                status: "break",
                shift: "afternoon",
                email: "sofia.neri@yourbite.it",
                phone: "+39 333 5678901",
                birthdate: "1995-11-30",
                hireDate: "2022-02-01",
                hours: 25,
                rating: 4.5,
                availability: ["wednesday", "thursday", "friday", "saturday", "sunday"]
            },
            {
                id: 5,
                name: "Luca Marini",
                position: "Rider",
                department: "consegna",
                status: "offline",
                shift: "night",
                email: "luca.marini@yourbite.it",
                phone: "+39 333 2345678",
                birthdate: "1993-07-18",
                hireDate: "2021-09-05",
                hours: 32,
                rating: 4.6,
                availability: ["monday", "tuesday", "thursday", "friday", "saturday"]
            },
             {
                id: 6,
                name: "Elena Romano",
                position: "Addetta Pulizie",
                department: "pulizie",
                status: "active",
                shift: "morning",
                email: "elena.romano@yourbite.it",
                phone: "+39 333 8765432",
                birthdate: "1988-04-22",
                hireDate: "2020-10-12",
                hours: 30,
                rating: 4.4,
                availability: ["monday", "wednesday", "friday"]
            },
             {
                id: 7,
                name: "Roberto Ferretti",
                position: "Cuoco",
                department: "cucina",
                status: "break",
                shift: "evening",
                email: "roberto.ferretti@yourbite.it",
                phone: "+39 333 4567890",
                birthdate: "1987-09-14",
                hireDate: "2020-05-20",
                hours: 38,
                rating: 4.7,
                availability: ["monday", "tuesday", "wednesday", "thursday", "friday"]
            },
            {
                id: 8,
                name: "Laura Martini",
                position: "Cameriera",
                department: "servizio",
                status: "active",
                shift: "afternoon",
                email: "laura.martini@yourbite.it",
                phone: "+39 333 6789012",
                birthdate: "1992-01-05",
                hireDate: "2021-03-28",
                hours: 32,
                rating: 4.6,
                availability: ["wednesday", "thursday", "friday", "saturday", "sunday"]
            },
             {
                id: 9,
                name: "Paolo Ricci",
                position: "Rider",
                department: "consegna",
                status: "offline",
                shift: "night",
                email: "paolo.ricci@yourbite.it",
                phone: "+39 333 7890123",
                birthdate: "1994-06-30",
                hireDate: "2022-01-10",
                hours: 25,
                rating: 4.3,
                availability: ["thursday", "friday", "saturday", "sunday"]
            },
            {
                id: 10,
                name: "Martina Ferrari",
                position: "Cassiera",
                department: "cassa",
                status: "active",
                shift: "morning",
                email: "martina.ferrari@yourbite.it",
                phone: "+39 333 8901234",
                birthdate: "1991-12-15",
                hireDate: "2021-07-05",
                hours: 30,
                rating: 4.8,
                availability: ["monday", "tuesday", "wednesday", "friday", "saturday"]
            },
            {
                id: 11,
                name: "Andrea Belli",
                position: "Sommelier",
                department: "servizio",
                status: "active",
                shift: "evening",
                email: "andrea.belli@yourbite.it",
                phone: "+39 333 9012345",
                birthdate: "1985-03-20",
                hireDate: "2020-02-15",
                hours: 35,
                rating: 4.9,
                availability: ["tuesday", "wednesday", "thursday", "friday", "saturday"]
            },
            {
                id: 12,
                name: "Chiara Russo",
                position: "Chef Pasticcera",
                department: "cucina",
                status: "break",
                shift: "morning",
                email: "chiara.russo@yourbite.it",
                phone: "+39 333 0123456",
                birthdate: "1989-10-08",
                hireDate: "2020-08-01",
                hours: 38,
                rating: 4.8,
                availability: ["monday", "tuesday", "wednesday", "thursday", "friday"]
            },
        ];

        // --- FUNZIONI HELPER ---

        function capitalizeFirstLetter(string) { if (!string) return ''; return string.charAt(0).toUpperCase() + string.slice(1); }
        function translateShift(shift) { const translations = { 'morning': 'Mattina', 'afternoon': 'Pomeriggio', 'evening': 'Sera', 'night': 'Notte' }; return translations[shift] || capitalizeFirstLetter(shift) || 'N/D'; }
        function calculateAge(birthdateString) { if (!birthdateString) return '?'; try { const birthDate = new Date(birthdateString); const today = new Date(); let age = today.getFullYear() - birthDate.getFullYear(); const m = today.getMonth() - birthDate.getMonth(); if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) { age--; } return age >= 0 ? age : '?'; } catch (e) { console.error("Errore calcolo età:", e); return '?'; } }
        function calculateSeniority(hireDateString) { if (!hireDateString) return '?'; try { const hireDate = new Date(hireDateString); const today = new Date(); if (hireDate > today) return 'Futuro'; let years = today.getFullYear() - hireDate.getFullYear(); let months = today.getMonth() - hireDate.getMonth(); let days = today.getDate() - hireDate.getDate(); if (days < 0) { months--; const prevMonthLastDay = new Date(today.getFullYear(), today.getMonth(), 0).getDate(); days += prevMonthLastDay; } if (months < 0) { years--; months += 12; } let result = ''; if (years > 0) result += `${years} ann${years > 1 ? 'i' : 'o'}`; if (months > 0) result += `${result ? ', ' : ''}${months} mes${months > 1 ? 'i' : 'e'}`; if (years === 0 && months === 0 && days >= 0) { result = `${days} giorn${days !== 1 ? 'i' : 'o'}`; } return result || 'Oggi'; } catch(e) { console.error("Errore calcolo anzianità:", e); return '?'; } }
        function showToast(type = 'info', title = 'Notifica', message = '') { const toastContainer = document.getElementById('toastContainer'); if (!toastContainer) { console.warn('Contenitore toast non trovato!'); return; } const toast = document.createElement('div'); toast.className = `toast ${type}`; let iconClass = 'fa-info-circle'; if (type === 'success') iconClass = 'fa-check-circle'; if (type === 'error') iconClass = 'fa-times-circle'; if (type === 'warning') iconClass = 'fa-exclamation-triangle'; toast.innerHTML = `<i class="fas ${iconClass} toast-icon"></i><div class="toast-content"><div class="toast-title">${title}</div><div class="toast-message">${message}</div></div><button class="toast-close"><i class="fas fa-times"></i></button>`; const closeButton = toast.querySelector('.toast-close'); closeButton.addEventListener('click', () => { toast.style.animation = 'slideOut 0.3s forwards'; toast.addEventListener('animationend', () => toast.remove(), { once: true }); }); toastContainer.appendChild(toast); setTimeout(() => { if (toast.parentElement) { toast.style.animation = 'slideOut 0.3s forwards'; toast.addEventListener('animationend', () => toast.remove(), { once: true }); } }, 5000); }
        function generateWeeklySchedule() { console.log("Generazione programma settimanale (logica da implementare)"); const weeklyBody = document.getElementById('weeklyScheduleBody'); if(weeklyBody) { if (Array.isArray(staffData) && staffData.length > 0) { const staff = staffData[0]; let rowHtml = `<tr><td>${staff.name}</td>`; const daysOfWeek = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']; daysOfWeek.forEach(day => { rowHtml += `<td>${staff.availability.includes(day) ? '10-18' : 'Riposo'}</td>`; }); rowHtml += '</tr>'; for(let i = 1; i < 5; i++) { rowHtml += `<tr><td>Dipendente ${i+1}</td>${'<td>-</td>'.repeat(7)}</tr>`; } weeklyBody.innerHTML = rowHtml; } else { weeklyBody.innerHTML = '<tr><td colspan="8">Nessun dato dipendente disponibile.</td></tr>'; } } else { console.warn("Elemento 'weeklyScheduleBody' non trovato."); } }
        function generateNewId() { if (!Array.isArray(staffData) || staffData.length === 0) { return 1; } const maxId = staffData.reduce((max, s) => s.id > max ? s.id : max, 0); return maxId + 1; }
        function getSelectedAvailability() { const checkboxes = document.querySelectorAll('#staffForm input[name="availability[]"]:checked'); return Array.from(checkboxes).map(checkbox => checkbox.value); }
        function determineShiftFromAvailability() { const availability = getSelectedAvailability(); const weekDays = availability.filter(d => !['saturday', 'sunday'].includes(d)).length; const weekendDays = availability.filter(d => ['saturday', 'sunday'].includes(d)).length; if (weekendDays > 0 && weekDays < 3) return 'evening'; if (availability.includes('monday') && availability.includes('tuesday')) return 'morning'; if (availability.length <= 3) return 'afternoon'; return ['morning', 'afternoon', 'evening', 'night'][Math.floor(Math.random() * 4)]; }
        function getAvatarUrl(name, size = 100) {
             // Usa ui-avatars.com per generare un avatar dalle iniziali del nome
             const apiUrl = `https://ui-avatars.com/api/?name=${encodeURIComponent(name || '??')}&background=random&color=fff&size=${size}&bold=true`;
             return apiUrl;
         }


        // --- INIZIALIZZAZIONE ---
        document.addEventListener('DOMContentLoaded', function () {
            const connectionStatus = document.getElementById('connectionStatus'); if (connectionStatus) { connectionStatus.style.display = 'none'; }
            initializeStaffData();
            initializeFilterDropdowns();
            initializeTabs();
            initializeModals();
            initializePerformanceChart();
            initializeCalendar();
            initializeSearch();
            initializeSidebarActions();
            initializeActionButtons();
            updateOverviewCards(); // Update cards on initial load
             updateSidebarStats(); // Update sidebar stats on initial load
        });

        // --- FUNZIONI DI INIZIALIZZAZIONE ---

        function initializeStaffData() {
            renderStaffGrid(); // Renderizza subito
            const addStaffBtnMain = document.getElementById('addStaffBtn'); if (addStaffBtnMain) { addStaffBtnMain.addEventListener('click', openAddStaffModal); } else { console.warn("Bottone 'addStaffBtn' non trovato."); }
            const viewScheduleBtnMain = document.getElementById('viewScheduleBtn'); if(viewScheduleBtnMain) { viewScheduleBtnMain.addEventListener('click', openScheduleModal); } else { console.warn("Bottone 'viewScheduleBtn' non trovato."); }
            const saveStaffBtn = document.getElementById('saveStaffBtn'); if(saveStaffBtn) { saveStaffBtn.addEventListener('click', saveStaffMember); } else { console.warn("Bottone 'saveStaffBtn' non trovato."); }
        }

        function openAddStaffModal() {
            document.getElementById('modalTitle').textContent = 'Aggiungi nuovo dipendente';
            const staffForm = document.getElementById('staffForm'); if (staffForm) { staffForm.reset(); delete staffForm.dataset.editId; }
            const availabilityCheckboxes = document.querySelectorAll('#staffForm input[name="availability[]"]'); availabilityCheckboxes.forEach(checkbox => { checkbox.checked = !['saturday', 'sunday'].includes(checkbox.value); });
            showModal('staffModal');
        }

        function openScheduleModal() {
            generateWeeklySchedule(); populateMonthlyStaffFilter(); activateTab('weekly'); showModal('scheduleModal');
        }

        function populateMonthlyStaffFilter() {
            const select = document.getElementById('monthlyStaffFilter'); if (!select) return;
            select.innerHTML = '<option value="all">Tutti i dipendenti</option>';
            if (Array.isArray(staffData)) { staffData.sort((a, b) => a.name.localeCompare(b.name)).forEach(staff => { const option = document.createElement('option'); option.value = staff.id; option.textContent = staff.name; select.appendChild(option); }); }
        }

        function renderStaffGrid(filterData = staffData) {
            const staffGrid = document.getElementById('staffGrid'); if (!staffGrid) { console.error("Elemento 'staffGrid' non trovato!"); return; }
            staffGrid.innerHTML = '';
            const dataToRender = Array.isArray(filterData) ? filterData : staffData;

            if (dataToRender.length === 0) { staffGrid.innerHTML = '<div class="no-results">Nessun dipendente trovato con i filtri selezionati.</div>'; return; }

            dataToRender.forEach(staff => {
                let statusClass = 'offline'; if (staff.status === 'active') statusClass = ''; else if (staff.status === 'break') statusClass = 'break';
                const staffCard = document.createElement('div'); staffCard.className = 'staff-card'; staffCard.dataset.id = staff.id;
                // --- MODIFICA AVATAR ---
                const avatarUrl = getAvatarUrl(staff.name, 80); // Genera URL per card (size 80)
                // --- FINE MODIFICA ---

                staffCard.innerHTML = `
                    <div class="staff-card-header">
                        <div class="staff-status ${statusClass}"></div>
                        <img src="${avatarUrl}" alt="${staff.name || 'Dipendente'}" class="staff-avatar" onerror="this.onerror=null; this.src='https://via.placeholder.com/80?text=Error';">
                        <h3 class="staff-name">${staff.name || 'Nome Mancante'}</h3>
                        <p class="staff-position">${staff.position || 'Posizione Mancante'}</p>
                    </div>
                    <div class="staff-card-body"><div class="staff-stats">
                        <div class="staff-stat"><div class="stat-label-card">Reparto</div><div class="stat-value-card">${capitalizeFirstLetter(staff.department) || 'N/D'}</div></div>
                        <div class="staff-stat"><div class="stat-label-card">Ore/Sett</div><div class="stat-value-card">${staff.hours || '?'}</div></div>
                        <div class="staff-stat"><div class="stat-label-card">Turno</div><div class="stat-value-card">${translateShift(staff.shift)}</div></div>
                        <div class="staff-stat"><div class="stat-label-card">Valutazione</div><div class="stat-value-card">${staff.rating || '?'}/5</div></div>
                    </div></div>
                    <div class="staff-card-footer">
                        <button class="staff-card-action view-staff" title="Visualizza dettagli" data-id="${staff.id}"><i class="fas fa-eye"></i></button>
                        <button class="staff-card-action edit-staff" title="Modifica" data-id="${staff.id}"><i class="fas fa-edit"></i></button>
                        <button class="staff-card-action schedule-staff" title="Turni" data-id="${staff.id}"><i class="fas fa-calendar-alt"></i></button>
                        <button class="staff-card-action message-staff" title="Invia messaggio" data-id="${staff.id}"><i class="fas fa-comment"></i></button>
                        <button class="staff-card-action delete-staff" title="Elimina" data-id="${staff.id}" style="color: var(--accent-red);"><i class="fas fa-trash-alt"></i></button>
                    </div>`;
                staffGrid.appendChild(staffCard);
            });
            addStaffCardListeners();
        }

        function addStaffCardListeners() {
            document.querySelectorAll('.view-staff').forEach(button => { button.removeEventListener('click', handleViewStaff); button.addEventListener('click', handleViewStaff); });
            document.querySelectorAll('.edit-staff').forEach(button => { button.removeEventListener('click', handleEditStaff); button.addEventListener('click', handleEditStaff); });
            document.querySelectorAll('.schedule-staff').forEach(button => { button.removeEventListener('click', handleScheduleStaff); button.addEventListener('click', handleScheduleStaff); });
            document.querySelectorAll('.message-staff').forEach(button => { button.removeEventListener('click', handleMessageStaff); button.addEventListener('click', handleMessageStaff); });
            document.querySelectorAll('.delete-staff').forEach(button => { button.removeEventListener('click', handleDeleteStaff); button.addEventListener('click', handleDeleteStaff); });
        }

        function handleViewStaff(event) { const staffId = parseInt(event.currentTarget.dataset.id); showStaffDetails(staffId); }
        function handleEditStaff(event) { const staffId = parseInt(event.currentTarget.dataset.id); editStaffMember(staffId); }
        function handleScheduleStaff(event) { const staffId = parseInt(event.currentTarget.dataset.id); manageStaffSchedule(staffId); }
        function handleMessageStaff(event) { const staffId = parseInt(event.currentTarget.dataset.id); messageStaffMember(staffId); }
        function handleDeleteStaff(event) { const staffId = parseInt(event.currentTarget.dataset.id); deleteStaffMember(staffId); }

        function showStaffDetails(staffId) {
            const staff = staffData.find(s => s.id === staffId); if (!staff) { showToast('error', 'Errore', `Dipendente con ID ${staffId} non trovato.`); return; }

            // --- MODIFICA AVATAR ---
            const avatarUrl = getAvatarUrl(staff.name, 80); // Genera URL per dettagli (size 80)
            const detailsAvatarImg = document.getElementById('detailsAvatar');
            if (detailsAvatarImg) {
                detailsAvatarImg.src = avatarUrl;
                detailsAvatarImg.onerror = function() { this.src='https://via.placeholder.com/80?text=Error'; };
            }
            // --- FINE MODIFICA ---

            document.getElementById('detailsName').textContent = staff.name || 'N/D';
            document.getElementById('detailsPosition').textContent = staff.position || 'N/D';
            const statusBadge = document.getElementById('detailsStatus'); statusBadge.className = 'staff-details-badge'; let statusText = 'Fuori servizio'; if (staff.status === 'active') { statusBadge.classList.add('badge-active'); statusText = 'In servizio'; } else if (staff.status === 'break') { statusBadge.classList.add('badge-break'); statusText = 'In pausa'; } else { statusBadge.classList.add('badge-offline'); } statusBadge.textContent = statusText;
            document.getElementById('detailsEmail').textContent = staff.email || 'N/D'; document.getElementById('detailsPhone').textContent = staff.phone || 'N/D'; document.getElementById('detailsBirthdate').textContent = staff.birthdate ? new Date(staff.birthdate).toLocaleDateString('it-IT') : 'N/D'; document.getElementById('detailsAge').textContent = staff.birthdate ? `${calculateAge(staff.birthdate)} anni` : 'N/D';
            document.getElementById('detailsJobPosition').textContent = staff.position || 'N/D'; document.getElementById('detailsDepartment').textContent = capitalizeFirstLetter(staff.department) || 'N/D'; document.getElementById('detailsHireDate').textContent = staff.hireDate ? new Date(staff.hireDate).toLocaleDateString('it-IT') : 'N/D'; document.getElementById('detailsSeniority').textContent = staff.hireDate ? calculateSeniority(staff.hireDate) : 'N/D';
            const skillsContainer = document.getElementById('detailsSkills'); skillsContainer.innerHTML = '<span class="skill-badge">Esempio</span>'; // Placeholder
            document.getElementById('detailsNotes').textContent = staff.notes || 'Nessuna nota.';
            // Popola performance (esempio)
            const rating = staff.rating || 0;
             document.getElementById('performanceRating').textContent = `${rating}/5.0`;
             document.getElementById('performanceRatingBar').style.width = `${(rating / 5) * 100}%`;
             document.getElementById('performanceEfficiency').textContent = 'N/D'; // Placeholder
             document.getElementById('performanceEfficiencyBar').style.width = `0%`;

            activateTab('info'); showModal('staffDetailsModal');
        }

        function editStaffMember(staffId) {
            const staff = staffData.find(s => s.id === staffId); if (!staff) { showToast('error', 'Errore', `Dipendente con ID ${staffId} non trovato.`); return; }
            const nameParts = staff.name ? staff.name.split(' ') : ['', '']; document.getElementById('staffName').value = nameParts[0] || ''; document.getElementById('staffSurname').value = nameParts.slice(1).join(' ') || '';
            document.getElementById('staffEmail').value = staff.email || ''; document.getElementById('staffPhone').value = staff.phone || ''; document.getElementById('staffBirthdate').value = staff.birthdate || '';
            // Trova il valore corretto per la select posizione
            const positionSelect = document.getElementById('staffPosition');
            let positionValue = '';
            if (staff.position) {
                 const searchPosition = staff.position.toLowerCase().replace(/\s/g, ''); // Rimuove spazi per confronto
                 for (let i = 0; i < positionSelect.options.length; i++) {
                    if (positionSelect.options[i].value.toLowerCase() === searchPosition) {
                        positionValue = positionSelect.options[i].value;
                        break;
                     } else if (positionSelect.options[i].text.toLowerCase().includes(searchPosition)) { // Fallback sul testo
                         positionValue = positionSelect.options[i].value;
                     }
                 }
             }
             positionSelect.value = positionValue;
             document.getElementById('staffDepartment').value = staff.department || '';
            document.getElementById('staffHireDate').value = staff.hireDate || ''; document.getElementById('staffNotes').value = staff.notes || '';
            const availabilityCheckboxes = document.querySelectorAll('#staffForm input[name="availability[]"]'); availabilityCheckboxes.forEach(checkbox => { checkbox.checked = Array.isArray(staff.availability) && staff.availability.includes(checkbox.value); });
            document.getElementById('modalTitle').textContent = 'Modifica dipendente'; document.getElementById('staffForm').dataset.editId = staffId; showModal('staffModal');
        }

        function saveStaffMember() {
            const form = document.getElementById('staffForm'); if (!form) return;
            const name = document.getElementById('staffName').value.trim(); const surname = document.getElementById('staffSurname').value.trim(); const email = document.getElementById('staffEmail').value.trim(); const positionSelect = document.getElementById('staffPosition'); const department = document.getElementById('staffDepartment').value;
            if (!name || !surname || !email || !positionSelect.value || !department) { showToast('error', 'Errore', 'Compila tutti i campi obbligatori.'); return; }
            const staffDetails = { name: `${name} ${surname}`, email: email, phone: document.getElementById('staffPhone').value.trim(), birthdate: document.getElementById('staffBirthdate').value, position: positionSelect.options[positionSelect.selectedIndex].text, department: department, hireDate: document.getElementById('staffHireDate').value || new Date().toISOString().split('T')[0], notes: document.getElementById('staffNotes').value.trim(), availability: getSelectedAvailability(), shift: determineShiftFromAvailability() };
            const editId = form.dataset.editId ? parseInt(form.dataset.editId) : null;
            if (editId) {
                const index = staffData.findIndex(s => s.id === editId); if (index !== -1) { const updatedStaff = { ...staffData[index], ...staffDetails }; staffData[index] = updatedStaff; showToast('success', 'Dipendente aggiornato', `${updatedStaff.name} aggiornato!`); } else { showToast('error', 'Errore', `Impossibile trovare dipendente ID ${editId}.`); }
            } else {
                staffDetails.id = generateNewId();
                // --- RIMOSSA GENERAZIONE AVATAR QUI ---
                staffDetails.hours = Math.floor(Math.random() * 15) + 25; staffDetails.rating = (Math.random() * 0.5 + 4.5).toFixed(1); staffDetails.status = 'active';
                staffData.push(staffDetails); showToast('success', 'Dipendente aggiunto', `${staffDetails.name} aggiunto!`);
            }
            renderStaffGrid(); updateOverviewCards(); updateSidebarStats(); hideModal('staffModal'); form.reset(); delete form.dataset.editId;
        }

        function deleteStaffMember(staffId) {
            const staff = staffData.find(s => s.id === staffId); if (!staff) { showToast('error', 'Errore', `Dipendente ID ${staffId} non trovato.`); return; }
            if (confirm(`Sei sicuro di voler eliminare ${staff.name}?`)) { staffData = staffData.filter(s => s.id !== staffId); showToast('success', 'Eliminato', `${staff.name} rimosso.`); renderStaffGrid(); updateOverviewCards(); updateSidebarStats(); }
        }

        function manageStaffSchedule(staffId) { const staff = staffData.find(s => s.id === staffId); if (!staff) { showToast('error', 'Errore', `Dipendente ID ${staffId} non trovato.`); return; } openScheduleModal(); const staffFilterSelect = document.getElementById('monthlyStaffFilter'); if (staffFilterSelect) { staffFilterSelect.value = staffId; } }
        function messageStaffMember(staffId) { const staff = staffData.find(s => s.id === staffId); if (!staff) return; showToast('info', 'Messaggio', `Funzione messaggio per ${staff.name} da implementare.`); }

        function initializeFilterDropdowns() { const dropdowns = document.querySelectorAll('.filter-dropdown'); dropdowns.forEach(dropdown => { const btn = dropdown.querySelector('.filter-btn'); const content = dropdown.querySelector('.filter-dropdown-content'); if (!btn || !content) return; btn.addEventListener('click', (e) => { e.stopPropagation(); dropdowns.forEach(d => { if (d !== dropdown) d.classList.remove('active'); }); dropdown.classList.toggle('active'); }); content.addEventListener('click', (e) => { if (e.target.classList.contains('filter-item')) { const filterItems = content.querySelectorAll('.filter-item'); filterItems.forEach(i => i.classList.remove('active')); e.target.classList.add('active'); dropdown.classList.remove('active'); applyFilters(); } }); }); document.addEventListener('click', (e) => { dropdowns.forEach(dropdown => { const btn = dropdown.querySelector('.filter-btn'); if (!dropdown.contains(e.target) && e.target !== btn) { dropdown.classList.remove('active'); } }); }); }
        function applyFilters() { const departmentFilter = document.querySelector('#departmentFilter .filter-item.active')?.dataset.filter || 'all'; const statusFilter = document.querySelector('#statusFilter .filter-item.active')?.dataset.filter || 'all'; const shiftFilter = document.querySelector('#shiftFilter .filter-item.active')?.dataset.filter || 'all'; const searchTerm = document.getElementById('staffSearch')?.value.toLowerCase() || ''; if (!Array.isArray(staffData)) { console.error("Errore: staffData non è un array valido:", staffData); renderStaffGrid([]); return; } const filteredStaff = staffData.filter(staff => { if (departmentFilter !== 'all' && staff.department !== departmentFilter) return false; if (statusFilter !== 'all' && staff.status !== statusFilter) return false; if (shiftFilter !== 'all' && staff.shift !== shiftFilter) return false; if (searchTerm) { const nameMatch = staff.name && staff.name.toLowerCase().includes(searchTerm); const positionMatch = staff.position && staff.position.toLowerCase().includes(searchTerm); const emailMatch = staff.email && staff.email.toLowerCase().includes(searchTerm); if (!(nameMatch || positionMatch || emailMatch)) return false; } return true; }); renderStaffGrid(filteredStaff); }
        function initializeSearch() { const searchInput = document.getElementById('staffSearch'); if (searchInput) { let debounceTimer; searchInput.addEventListener('input', () => { clearTimeout(debounceTimer); debounceTimer = setTimeout(() => { applyFilters(); }, 300); }); } else { console.warn("Elemento 'staffSearch' non trovato."); } }
        function initializeTabs() { const tabsContainers = document.querySelectorAll('.tabs-container'); tabsContainers.forEach(container => { const tabItems = container.querySelectorAll('.tab-item'); tabItems.forEach(item => { item.addEventListener('click', () => { const tabId = item.dataset.tab; if (!tabId) return; container.querySelectorAll('.tab-item').forEach(tab => tab.classList.remove('active')); container.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active')); item.classList.add('active'); const activeContent = container.querySelector(`#tab-${tabId}`); if (activeContent) { activeContent.classList.add('active'); } else { console.warn(`Contenuto tab con ID 'tab-${tabId}' non trovato.`); } }); }); }); }
        function activateTab(tabId) { const tabItem = document.querySelector(`.tab-item[data-tab="${tabId}"]`); if (tabItem) { tabItem.click(); } else { console.warn(`Tab item con data-tab="${tabId}" non trovato.`); } }
        function initializeModals() { const modals = document.querySelectorAll('.modal-overlay'); modals.forEach(modalOverlay => { const modalId = modalOverlay.id; const closeButtons = modalOverlay.querySelectorAll('.modal-close, .btn-default[id^="cancel"], .btn-default[id^="close"]'); closeButtons.forEach(btn => { if(btn) { btn.addEventListener('click', () => hideModal(modalId)); } }); modalOverlay.addEventListener('click', (event) => { if (event.target === modalOverlay) { hideModal(modalId); } }); }); const editStaffBtnFromDetails = document.getElementById('editStaffBtn'); if(editStaffBtnFromDetails) { editStaffBtnFromDetails.addEventListener('click', () => { const name = document.getElementById('detailsName')?.textContent; if (!name) return; const staff = staffData.find(s => s.name === name); if (staff) { hideModal('staffDetailsModal'); editStaffMember(staff.id); } else { showToast('error', 'Errore', 'Dati dipendente non trovati.'); } }); } const saveScheduleBtn = document.getElementById('saveScheduleBtn'); if(saveScheduleBtn) { saveScheduleBtn.addEventListener('click', () => { showToast('success', 'Turni salvati', 'Turni salvati! (Simulazione)'); hideModal('scheduleModal'); }); } }
        function showModal(modalId) { const modalOverlay = document.getElementById(modalId); if (modalOverlay) { modalOverlay.classList.add('active'); document.body.style.overflow = 'hidden'; } else { console.error(`Modal ID '${modalId}' non trovato!`); } }
        function hideModal(modalId) { const modalOverlay = document.getElementById(modalId); if (modalOverlay) { modalOverlay.classList.remove('active'); const anyModalActive = document.querySelector('.modal-overlay.active'); if (!anyModalActive) { document.body.style.overflow = 'auto'; } } }
        function initializePerformanceChart() { const ctx = document.getElementById('performanceChart')?.getContext('2d'); if (!ctx) { return; } if (window.performanceChartInstance) { window.performanceChartInstance.destroy(); } window.performanceChartInstance = new Chart(ctx, { type: 'line', data: { labels: ['Gen', 'Feb', 'Mar', 'Apr', 'Mag', 'Giu'], datasets: [{ label: 'Performance Media', data: [4.3, 4.5, 4.6, 4.7, 4.8, 4.8], borderColor: 'var(--primary)', backgroundColor: 'rgba(94, 96, 206, 0.1)', tension: 0.3, fill: true, pointBackgroundColor: 'var(--primary)', pointBorderColor: '#fff', pointHoverRadius: 6, pointHoverBackgroundColor: '#fff', pointHoverBorderColor: 'var(--primary)', }] }, options: { responsive: true, maintainAspectRatio: false, plugins: { legend: { display: false }, tooltip: { backgroundColor: 'var(--dark)', titleColor: 'var(--light)', bodyColor: 'var(--light)', borderColor: 'var(--primary)', borderWidth: 1, callbacks: { label: function (context) { return ` Valutazione: ${context.formattedValue}/5`; } } } }, scales: { y: { beginAtZero: false, min: 3.5, max: 5, grid: { color: 'rgba(0, 0, 0, 0.05)' }, ticks: { stepSize: 0.5 } }, x: { grid: { display: false } } } } }); }
        function initializeCalendar() { updateCalendar(); const prevMonthBtn = document.getElementById('prevMonth'); if (prevMonthBtn) { prevMonthBtn.addEventListener('click', () => { showToast('info', 'Nav Calendario', 'Logica mese precedente da implementare.'); }); } const nextMonthBtn = document.getElementById('nextMonth'); if (nextMonthBtn) { nextMonthBtn.addEventListener('click', () => { showToast('info', 'Nav Calendario', 'Logica mese successivo da implementare.'); }); } }
        function updateCalendar(month = new Date().getMonth(), year = new Date().getFullYear()) { const calendarGrid = document.getElementById('calendarGrid'); const calendarTitle = document.getElementById('calendarMonth'); if (!calendarGrid || !calendarTitle) return; calendarGrid.innerHTML = `<div class="calendar-day-header">Lun</div><div class="calendar-day-header">Mar</div><div class="calendar-day-header">Mer</div><div class="calendar-day-header">Gio</div><div class="calendar-day-header">Ven</div><div class="calendar-day-header">Sab</div><div class="calendar-day-header">Dom</div>`; const today = new Date(); const currentMonth = new Date(year, month, 1); const daysInMonth = new Date(year, month + 1, 0).getDate(); let firstDayOfWeek = currentMonth.getDay(); firstDayOfWeek = (firstDayOfWeek === 0) ? 6 : firstDayOfWeek - 1; calendarTitle.textContent = currentMonth.toLocaleDateString('it-IT', { month: 'long', year: 'numeric' }); const daysInPrevMonth = new Date(year, month, 0).getDate(); for (let i = 0; i < firstDayOfWeek; i++) { const dayCell = document.createElement('div'); dayCell.className = 'calendar-day other-month'; dayCell.innerHTML = `<span class="day-number">${daysInPrevMonth - firstDayOfWeek + i + 1}</span>`; calendarGrid.appendChild(dayCell); } for (let i = 1; i <= daysInMonth; i++) { const dayCell = document.createElement('div'); dayCell.className = 'calendar-day'; const currentDate = new Date(year, month, i); if (year === today.getFullYear() && month === today.getMonth() && i === today.getDate()) { dayCell.classList.add('today'); } let staffInfo = 'Riposo'; const dayOfWeek = currentDate.getDay(); if (dayOfWeek !== 0 && dayOfWeek !== 6) { staffInfo = `${Math.floor(Math.random() * 4) + 5} ore`; } dayCell.innerHTML = `<span class="day-number">${i}</span><span class="day-staff">${staffInfo}</span>`; calendarGrid.appendChild(dayCell); } const totalCells = firstDayOfWeek + daysInMonth; const cellsNeeded = (totalCells % 7 === 0) ? 0 : 7 - (totalCells % 7); for (let i = 1; i <= cellsNeeded; i++) { const dayCell = document.createElement('div'); dayCell.className = 'calendar-day other-month'; dayCell.innerHTML = `<span class="day-number">${i}</span>`; calendarGrid.appendChild(dayCell); } }
        function initializeSidebarActions() { const addNewStaffBtnSidebar = document.getElementById('addNewStaffBtn'); if (addNewStaffBtnSidebar) { addNewStaffBtnSidebar.addEventListener('click', (e) => { e.preventDefault(); openAddStaffModal(); }); } const schedulesBtnSidebar = document.getElementById('schedulesBtn'); if (schedulesBtnSidebar) { schedulesBtnSidebar.addEventListener('click', (e) => { e.preventDefault(); openScheduleModal(); }); } const showAllStaffBtn = document.getElementById('showAllStaffBtn'); if (showAllStaffBtn) { showAllStaffBtn.addEventListener('click', (e) => { e.preventDefault(); document.querySelectorAll('.filter-item').forEach(item => item.classList.remove('active')); document.querySelector('#departmentFilter .filter-item[data-filter="all"]')?.classList.add('active'); document.querySelector('#statusFilter .filter-item[data-filter="all"]')?.classList.add('active'); document.querySelector('#shiftFilter .filter-item[data-filter="all"]')?.classList.add('active'); const searchInput = document.getElementById('staffSearch'); if (searchInput) searchInput.value = ''; applyFilters(); showToast('info', 'Filtri resettati', 'Visualizzazione di tutti i dipendenti.'); }); } }
        function initializeActionButtons() { const uploadDocBtn = document.getElementById('uploadDocBtn'); if (uploadDocBtn) { uploadDocBtn.addEventListener('click', () => { const fileInput = document.getElementById('docFile'); const docType = document.getElementById('docType').value; if (fileInput && fileInput.files.length > 0 && docType) { showToast('success', 'Upload (Sim)', `Doc '${fileInput.files[0].name}' tipo '${docType}' caricato.`); document.getElementById('docType').value = ''; fileInput.value = ''; document.getElementById('docExpiry').value = ''; } else { showToast('warning', 'Upload fallito', 'Seleziona tipo e file.'); } }); } const loadTemplateBtn = document.getElementById('loadTemplateBtn'); if (loadTemplateBtn) { loadTemplateBtn.addEventListener('click', () => { const selectedTemplate = document.getElementById('templateSelect').value; if (selectedTemplate) { showToast('info', 'Carica Modello', `Caricamento '${selectedTemplate}' (Sim).`); } else { showToast('warning', 'Selezione Modello', 'Seleziona un modello.'); } }); } const saveTemplateBtn = document.getElementById('saveTemplateBtn'); if (saveTemplateBtn) { saveTemplateBtn.addEventListener('click', () => { const templateName = document.getElementById('templateName').value.trim(); if (templateName) { showToast('success', 'Salva Modello', `Modello '${templateName}' salvato (Sim).`); const select = document.getElementById('templateSelect'); const newOption = document.createElement('option'); newOption.value = templateName.toLowerCase().replace(/\s+/g, '-'); newOption.textContent = templateName; select.appendChild(newOption); document.getElementById('templateName').value = ''; } else { showToast('warning', 'Nome Modello', 'Inserisci un nome.'); } }); } const prevWeekBtn = document.getElementById('prevWeek'); if (prevWeekBtn) { prevWeekBtn.addEventListener('click', function () { showToast('info', 'Cambio settimana', 'Settimana precedente (Sim)'); }); } else { console.warn("ID 'prevWeek' non trovato."); } const nextWeekBtn = document.getElementById('nextWeek'); if (nextWeekBtn) { nextWeekBtn.addEventListener('click', function () { showToast('info', 'Cambio settimana', 'Settimana successiva (Sim)'); }); } else { console.warn("ID 'nextWeek' non trovato."); } const prevScheduleMonthBtn = document.getElementById('prevScheduleMonth'); if (prevScheduleMonthBtn) { prevScheduleMonthBtn.addEventListener('click', function () { showToast('info', 'Cambio mese', 'Mese precedente (Sim)'); }); } else { console.warn("ID 'prevScheduleMonth' non trovato."); } const nextScheduleMonthBtn = document.getElementById('nextScheduleMonth'); if (nextScheduleMonthBtn) { nextScheduleMonthBtn.addEventListener('click', function () { showToast('info', 'Cambio mese', 'Mese successivo (Sim)'); }); } else { console.warn("ID 'nextScheduleMonth' non trovato."); } }

         // Funzione per aggiornare i contatori nelle card di riepilogo e nella sidebar
         function updateOverviewCards() {
             if (!Array.isArray(staffData)) return;
             const total = staffData.length;
             const onDuty = staffData.filter(s => s.status === 'active').length;
             const onBreak = staffData.filter(s => s.status === 'break').length;
             const offline = staffData.filter(s => s.status === 'offline').length;

             document.getElementById('overviewTotalStaff').textContent = total;
             document.getElementById('overviewOnDuty').textContent = onDuty;
             document.getElementById('overviewOnBreak').textContent = onBreak;
             document.getElementById('overviewOffline').textContent = offline;
         }

         function updateSidebarStats() {
             if (!Array.isArray(staffData)) return;
              const total = staffData.length;
              const onDuty = staffData.filter(s => s.status === 'active').length;
              // 'In servizio oggi' potrebbe richiedere una logica più complessa basata sui turni reali
              const onDutyToday = onDuty; // Semplificato per ora

              document.getElementById('activeStaffCount').textContent = onDuty;
              document.getElementById('onDutyTodayCount').textContent = onDutyToday;
              document.getElementById('totalStaffCount').textContent = total;
         }

    </script>
</body>

</html>