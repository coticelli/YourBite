<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gestione Personale - YourBite</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <script src="/socket.io/socket.io.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <style>
        :root {
            /* Palette colori moderna e vibrante */
            --primary: #5e60ce;
            --primary-light: #6930c3;
            --primary-dark: #5390d9;
            --secondary: #48bfe3;
            --secondary-light: #64dfdf;
            --accent: #80ffdb;
            --accent-green: #2ecc71;
            --accent-red: #e74c3c;
            --accent-orange: #f39c12;
            --dark: #212529;
            --dark-blue: #1a1a2e;
            --medium-dark: #252941;
            --light: #ffffff;
            --gray: #f8f9fa;
            --gray-light: #fafbff;
            --gray-dark: #e9ecef;
            --text: #212529;
            --text-light: #6c757d;
            
            /* Effetti e animazioni */
            --shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            --shadow-lg: 0 20px 40px rgba(0, 0, 0, 0.15);
            --shadow-colored: 0 8px 25px rgba(94, 96, 206, 0.25);
            --radius-sm: 12px;
            --radius: 16px;
            --radius-lg: 24px;
            --transition-fast: all 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);
            --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
            --transition-spring: all 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Poppins', sans-serif;
        }

        body {
            background-color: var(--gray);
            color: var(--text);
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            overflow-x: hidden;
        }

        /* Particles */
        .particles {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: -1;
        }

        .particle {
            position: absolute;
            border-radius: 50%;
        }

        @keyframes particleFloat {
            0% {
                transform: translateY(0) rotate(0deg);
            }
            100% {
                transform: translateY(-20px) rotate(360deg);
            }
        }

        @keyframes particleFade {
            0% {
                opacity: 0.3;
            }
            100% {
                opacity: 0.6;
            }
        }

        /* Header */
        header {
            background: linear-gradient(135deg, var(--primary), var(--primary-dark));
            color: var(--light);
            padding: 1rem 0;
            box-shadow: var(--shadow);
            position: sticky;
            top: 0;
            z-index: 100;
        }

        .header-container {
            width: 100%;
            max-width: 1400px;
            margin: 0 auto;
            padding: 0 1.5rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .logo-wrapper {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .logo {
            height: 40px;
            width: auto;
        }

        .site-title {
            font-size: 1.8rem;
            font-weight: 700;
            color: var(--light);
            text-decoration: none;
        }

        .nav-menu {
            display: flex;
            gap: 1rem;
            align-items: center;
        }

        .nav-link {
            color: rgba(255, 255, 255, 0.85);
            text-decoration: none;
            padding: 8px 16px;
            border-radius: var(--radius-sm);
            transition: var(--transition);
            font-weight: 500;
        }

        .nav-link:hover {
            background: rgba(255, 255, 255, 0.1);
            color: var(--light);
        }

        .nav-link.active {
            background: rgba(255, 255, 255, 0.2);
            color: var(--light);
            font-weight: 600;
        }

        .user-menu {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .notifications-btn {
            background: rgba(255, 255, 255, 0.1);
            border: none;
            color: var(--light);
            width: 40px;
            height: 40px;
            border-radius: var(--radius-sm);
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
            cursor: pointer;
            transition: var(--transition);
        }

        .notifications-btn:hover {
            background: rgba(255, 255, 255, 0.2);
        }

        .notification-badge {
            position: absolute;
            top: -5px;
            right: -5px;
            background-color: var(--accent-red);
            color: var(--light);
            border-radius: 50%;
            padding: 2px;
            min-width: 18px;
            height: 18px;
            font-size: 12px;
            font-weight: 700;
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
            border: 2px solid var(--primary);
        }

        .user-profile {
            display: flex;
            align-items: center;
            gap: 10px;
            background: rgba(255, 255, 255, 0.1);
            padding: 6px 15px 6px 6px;
            border-radius: var(--radius-sm);
            cursor: pointer;
            transition: var(--transition);
        }

        .user-profile:hover {
            background: rgba(255, 255, 255, 0.2);
        }

        .user-avatar {
            width: 32px;
            height: 32px;
            border-radius: var(--radius-sm);
            object-fit: cover;
        }

        .user-name {
            font-weight: 600;
            font-size: 14px;
        }

        /* Main Content */
        .main-container {
            flex: 1;
            display: flex;
            width: 100%;
            max-width: 1400px;
            margin: 0 auto;
            padding: 1.5rem;
            gap: 1.5rem;
        }

        /* Sidebar */
        .sidebar {
            width: 280px;
            flex-shrink: 0;
            background: var(--light);
            border-radius: var(--radius);
            box-shadow: var(--shadow);
            padding: 1.5rem;
            display: flex;
            flex-direction: column;
            gap: 1.5rem;
        }

        .sidebar-header {
            display: flex;
            align-items: center;
            gap: 10px;
            padding-bottom: 15px;
            border-bottom: 1px solid var(--gray-dark);
        }

        .sidebar-title {
            font-size: 1.2rem;
            font-weight: 600;
            color: var(--dark);
        }

        .sidebar-section {
            margin-bottom: 1rem;
        }

        .section-title {
            font-size: 0.9rem;
            font-weight: 600;
            color: var(--text-light);
            text-transform: uppercase;
            letter-spacing: 0.5px;
            margin-bottom: 10px;
        }

        .menu-list {
            list-style: none;
            display: flex;
            flex-direction: column;
            gap: 5px;
        }

        .menu-item {
            display: flex;
            align-items: center;
            padding: 10px 15px;
            border-radius: var(--radius-sm);
            cursor: pointer;
            transition: var(--transition);
            color: var(--text);
            text-decoration: none;
            font-weight: 500;
        }

        .menu-item:hover {
            background-color: var(--gray-light);
        }

        .menu-item.active {
            background-color: rgba(94, 96, 206, 0.1);
            color: var(--primary);
            font-weight: 600;
        }

        .menu-item i {
            margin-right: 10px;
            width: 20px;
            text-align: center;
            color: var(--text-light);
        }

        .menu-item.active i {
            color: var(--primary);
        }

        .sidebar-stats {
            margin-top: auto;
            padding-top: 1rem;
            border-top: 1px solid var(--gray-dark);
        }

        .stat-item {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 10px;
        }

        .stat-label {
            font-size: 0.9rem;
            color: var(--text-light);
        }

        .stat-value {
            font-weight: 600;
            color: var(--dark);
        }

        /* Content Area */
        .content-area {
            flex: 1;
            display: flex;
            flex-direction: column;
            gap: 1.5rem;
        }

        /* Staff Overview Cards */
        .overview-cards {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));
            gap: 1.5rem;
        }

        .overview-card {
            background: var(--light);
            border-radius: var(--radius);
            box-shadow: var(--shadow);
            padding: 1.5rem;
            display: flex;
            flex-direction: column;
            gap: 10px;
            transition: var(--transition);
            cursor: pointer;
        }

        .overview-card:hover {
            transform: translateY(-5px);
            box-shadow: var(--shadow-lg);
        }

        .card-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
        }

        .card-title {
            font-size: 0.9rem;
            color: var(--text-light);
            font-weight: 500;
        }

        .card-icon {
            width: 40px;
            height: 40px;
            border-radius: var(--radius-sm);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.2rem;
        }

        .card-icon.staff {
            background-color: rgba(94, 96, 206, 0.1);
            color: var(--primary);
        }

        .card-icon.active {
            background-color: rgba(72, 191, 227, 0.1);
            color: var(--secondary);
        }

        .card-icon.hours {
            background-color: rgba(46, 204, 113, 0.1);
            color: var(--accent-green);
        }

        .card-icon.performance {
            background-color: rgba(243, 156, 18, 0.1);
            color: var(--accent-orange);
        }

        .card-value {
            font-size: 1.5rem;
            font-weight: 700;
            color: var(--dark);
        }

        .card-footer {
            display: flex;
            align-items: center;
            gap: 5px;
            font-size: 0.8rem;
        }

        .trend-up {
            color: var(--accent-green);
        }

        .trend-down {
            color: var(--accent-red);
        }

        /* Staff Management Section */
        .staff-management {
            background: var(--light);
            border-radius: var(--radius);
            box-shadow: var(--shadow);
            overflow: hidden;
            display: flex;
            flex-direction: column;
        }

        .section-header {
            padding: 1.5rem;
            border-bottom: 1px solid var(--gray-dark);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .section-title-main {
            font-size: 1.2rem;
            font-weight: 600;
            color: var(--dark);
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .section-title-main i {
            color: var(--primary);
        }

        .section-actions {
            display: flex;
            gap: 10px;
        }

        .action-btn {
            background: var(--gray-light);
            border: none;
            padding: 8px 16px;
            border-radius: var(--radius-sm);
            display: flex;
            align-items: center;
            gap: 8px;
            color: var(--text);
            font-weight: 500;
            cursor: pointer;
            transition: var(--transition);
        }

        .action-btn:hover {
            background: rgba(94, 96, 206, 0.1);
            color: var(--primary);
        }

        .action-btn.primary {
            background: var(--primary);
            color: var(--light);
        }

        .action-btn.primary:hover {
            background: var(--primary-dark);
        }

        .filter-bar {
            display: flex;
            align-items: center;
            padding: 1rem 1.5rem;
            background: var(--gray-light);
            gap: 15px;
            flex-wrap: wrap;
        }

        .search-box {
            flex: 1;
            min-width: 200px;
            position: relative;
        }

        .search-input {
            width: 100%;
            padding: 10px 15px 10px 40px;
            border-radius: var(--radius-sm);
            border: 1px solid var(--gray-dark);
            background: var(--light);
            font-size: 0.9rem;
            transition: var(--transition);
        }

        .search-icon {
            position: absolute;
            left: 15px;
            top: 50%;
            transform: translateY(-50%);
            color: var(--text-light);
        }

        .search-input:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(94, 96, 206, 0.1);
        }

        .filter-dropdown {
            position: relative;
        }

        .filter-btn {
            background: var(--light);
            border: 1px solid var(--gray-dark);
            padding: 9px 15px;
            border-radius: var(--radius-sm);
            display: flex;
            align-items: center;
            gap: 8px;
            font-weight: 500;
            cursor: pointer;
            transition: var(--transition);
            font-size: 0.9rem;
            color: var(--text);
        }

        .filter-btn:hover {
            border-color: var(--primary);
        }

        .filter-dropdown-content {
            position: absolute;
            top: 100%;
            left: 0;
            background: var(--light);
            border-radius: var(--radius-sm);
            box-shadow: var(--shadow);
            min-width: 180px;
            z-index: 10;
            padding: 0.5rem 0;
            margin-top: 5px;
            display: none;
        }

        .filter-dropdown.active .filter-dropdown-content {
            display: block;
            animation: fadeIn 0.2s forwards;
        }

        .filter-item {
            padding: 8px 15px;
            cursor: pointer;
            transition: var(--transition-fast);
        }

        .filter-item:hover {
            background: var(--gray-light);
        }

        .filter-item.active {
            background: rgba(94, 96, 206, 0.1);
            color: var(--primary);
            font-weight: 500;
        }

        .staff-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 1rem;
            padding: 1.5rem;
        }

        .staff-card {
            background: var(--light);
            border-radius: var(--radius);
            box-shadow: 0 5px 15px rgba(0,0,0,0.05);
            overflow: hidden;
            transition: var(--transition);
        }

        .staff-card:hover {
            transform: translateY(-5px);
            box-shadow: var(--shadow-lg);
        }

        .staff-card-header {
            padding: 1.5rem;
            text-align: center;
            position: relative;
        }

        .staff-status {
            position: absolute;
            top: 1rem;
            right: 1rem;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            background: var(--accent-green);
            box-shadow: 0 0 0 3px rgba(46, 204, 113, 0.2);
        }

        .staff-status.offline {
            background: var(--accent-red);
            box-shadow: 0 0 0 3px rgba(231, 76, 60, 0.2);
        }

        .staff-status.break {
            background: var(--accent-orange);
            box-shadow: 0 0 0 3px rgba(243, 156, 18, 0.2);
        }

        .staff-avatar {
            width: 80px;
            height: 80px;
            border-radius: 50%;
            object-fit: cover;
            margin: 0 auto 15px;
            border: 3px solid var(--light);
            box-shadow: var(--shadow);
        }

        .staff-name {
            font-size: 1.2rem;
            font-weight: 600;
            margin-bottom: 5px;
        }

        .staff-position {
            font-size: 0.9rem;
            color: var(--text-light);
        }

        .staff-card-body {
            padding: 0 1.5rem 1rem;
        }

        .staff-stats {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 10px;
            margin-bottom: 15px;
        }

        .staff-stat {
            text-align: center;
            padding: 8px;
            background: var(--gray-light);
            border-radius: var(--radius-sm);
        }

        .stat-label-card {
            font-size: 0.8rem;
            color: var(--text-light);
            margin-bottom: 5px;
        }

        .stat-value-card {
            font-size: 1.1rem;
            font-weight: 600;
            color: var(--dark);
        }

        .staff-card-footer {
            padding: 1rem 1.5rem;
            background: var(--gray-light);
            display: flex;
            justify-content: space-between;
            border-top: 1px solid var(--gray-dark);
        }

        .staff-card-action {
            background: none;
            border: none;
            color: var(--text-light);
            font-size: 1rem;
            cursor: pointer;
            transition: var(--transition);
            padding: 5px;
        }

        .staff-card-action:hover {
            color: var(--primary);
        }

        /* Modal Styles */
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 1000;
            padding: 1rem;
            opacity: 0;
            visibility: hidden;
            transition: var(--transition);
        }

        .modal-overlay.active {
            opacity: 1;
            visibility: visible;
        }

        .modal {
            background: var(--light);
            border-radius: var(--radius);
            max-width: 600px;
            width: 100%;
            max-height: 90vh;
            overflow-y: auto;
            box-shadow: var(--shadow-lg);
            transform: translateY(20px);
            transition: var(--transition-spring);
        }

        .modal-overlay.active .modal {
            transform: translateY(0);
        }

        .modal-header {
            padding: 1.5rem;
            border-bottom: 1px solid var(--gray-dark);
            position: relative;
        }

        .modal-title {
            font-size: 1.2rem;
            font-weight: 600;
            color: var(--dark);
        }

        .modal-close {
            position: absolute;
            top: 1.5rem;
            right: 1.5rem;
            background: none;
            border: none;
            font-size: 1.2rem;
            color: var(--text-light);
            cursor: pointer;
            transition: var(--transition);
        }

        .modal-close:hover {
            color: var(--accent-red);
        }

        .modal-body {
            padding: 1.5rem;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
        }

        .form-control {
            width: 100%;
            padding: 10px 15px;
            border-radius: var(--radius-sm);
            border: 1px solid var(--gray-dark);
            font-size: 0.95rem;
            transition: var(--transition);
        }

        .form-control:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(94, 96, 206, 0.1);
        }

        .form-select {
            width: 100%;
            padding: 10px 15px;
            border-radius: var(--radius-sm);
            border: 1px solid var(--gray-dark);
            font-size: 0.95rem;
            transition: var(--transition);
            background-color: var(--light);
        }

        .form-select:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(94, 96, 206, 0.1);
        }

        .form-check {
            display: flex;
            align-items: center;
            gap: 8px;
            margin-bottom: 10px;
        }

        .form-check-input {
            width: 18px;
            height: 18px;
            accent-color: var(--primary);
        }

        .form-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 1rem;
        }

        .modal-footer {
            padding: 1rem 1.5rem;
            border-top: 1px solid var(--gray-dark);
            display: flex;
            justify-content: flex-end;
            gap: 10px;
        }

        .btn {
            padding: 8px 16px;
            border-radius: var(--radius-sm);
            font-weight: 500;
            cursor: pointer;
            transition: var(--transition);
            border: none;
            font-size: 0.95rem;
        }

        .btn-default {
            background: var(--gray-light);
            color: var(--text);
        }

        .btn-default:hover {
            background: var(--gray-dark);
        }

        .btn-primary {
            background: var(--primary);
            color: var(--light);
        }

        .btn-primary:hover {
            background: var(--primary-dark);
        }

        .btn-danger {
            background: var(--accent-red);
            color: var(--light);
        }

        .btn-danger:hover {
            background: #c0392b;
        }

        /* Staff Details Modal */
        .staff-details-header {
            display: flex;
            align-items: center;
            gap: 20px;
            margin-bottom: 20px;
        }

        .staff-details-avatar {
            width: 80px;
            height: 80px;
            border-radius: 50%;
            object-fit: cover;
        }

        .staff-details-info h3 {
            font-size: 1.3rem;
            font-weight: 600;
            margin-bottom: 5px;
        }

        .staff-details-info p {
            color: var(--text-light);
        }

        .staff-details-badge {
            display: inline-block;
            padding: 3px 10px;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 500;
            margin-top: 5px;
        }

        .badge-active {
            background-color: rgba(46, 204, 113, 0.1);
            color: var(--accent-green);
        }

        .badge-break {
            background-color: rgba(243, 156, 18, 0.1);
            color: var(--accent-orange);
        }

        .badge-offline {
            background-color: rgba(231, 76, 60, 0.1);
            color: var(--accent-red);
        }

        .staff-details-section {
            margin-bottom: 20px;
        }

        .staff-details-section h4 {
            font-size: 1rem;
            font-weight: 600;
            margin-bottom: 10px;
            color: var(--text);
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .staff-details-section h4 i {
            color: var(--primary);
        }

        .details-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 15px;
        }

        .details-item {
            display: flex;
            flex-direction: column;
        }

        .details-label {
            font-size: 0.85rem;
            color: var(--text-light);
            margin-bottom: 3px;
        }

        .details-value {
            font-size: 0.95rem;
            font-weight: 500;
        }

        .schedule-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 10px;
        }

        .schedule-table th, 
        .schedule-table td {
            padding: 8px 10px;
            text-align: left;
            font-size: 0.9rem;
            border-bottom: 1px solid var(--gray-dark);
        }

        .schedule-table th {
            font-weight: 500;
            color: var(--text-light);
            background-color: var(--gray-light);
        }

        .schedule-table tr:last-child td {
            border-bottom: none;
        }

        .skills-container {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
            margin-top: 10px;
        }

        .skill-badge {
            background-color: var(--gray-light);
            border-radius: 20px;
            padding: 3px 12px;
            font-size: 0.85rem;
        }

        .performance-meter {
            width: 100%;
            height: 8px;
            background-color: var(--gray-light);
            border-radius: 4px;
            margin-top: 5px;
            overflow: hidden;
        }

        .performance-bar {
            height: 100%;
            border-radius: 4px;
            background: linear-gradient(to right, var(--accent-green), var(--secondary));
        }

        /* Turn Switch Styles */
        .switch-container {
            display: flex;
            gap: 10px;
            margin-top: 10px;
            overflow-x: auto;
            padding-bottom: 10px;
        }

        .day-switch {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 5px;
        }

        .day-label {
            font-size: 0.8rem;
            color: var(--text-light);
        }

        .switch {
            position: relative;
            display: inline-block;
            width: 44px;
            height: 22px;
        }

        .switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

        .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: var(--gray-dark);
            transition: .4s;
            border-radius: 34px;
        }

        .slider:before {
            position: absolute;
            content: "";
            height: 16px;
            width: 16px;
            left: 3px;
            bottom: 3px;
            background-color: white;
            transition: .4s;
            border-radius: 50%;
        }

        input:checked + .slider {
            background-color: var(--accent-green);
        }

        input:checked + .slider:before {
            transform: translateX(22px);
        }

        /* Animation Keyframes */
        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        /* Schedule Calendar */
        .calendar-container {
            margin-top: 15px;
        }

        .calendar-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }

        .calendar-title {
            font-size: 1.1rem;
            font-weight: 600;
        }

        .calendar-nav {
            display: flex;
            gap: 10px;
        }

        .calendar-nav-btn {
            background: var(--gray-light);
            border: none;
            width: 32px;
            height: 32px;
            border-radius: var(--radius-sm);
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: var(--transition);
        }

        .calendar-nav-btn:hover {
            background: rgba(94, 96, 206, 0.1);
            color: var(--primary);
        }

        .calendar-grid {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            gap: 5px;
        }

        .calendar-day-header {
            text-align: center;
            font-weight: 500;
            padding: 5px;
            font-size: 0.85rem;
            color: var(--text-light);
        }

        .calendar-day {
            aspect-ratio: 1;
            background: var(--light);
            border-radius: var(--radius-sm);
            padding: 5px;
            display: flex;
            flex-direction: column;
            align-items: center;
            border: 1px solid var(--gray-dark);
            cursor: pointer;
            transition: var(--transition);
        }

        .calendar-day:hover {
            border-color: var(--primary);
        }

        .calendar-day.today {
            background: rgba(94, 96, 206, 0.1);
            border-color: var(--primary);
        }

        .calendar-day.other-month {
            opacity: 0.5;
        }

        .day-number {
            font-size: 0.9rem;
            font-weight: 500;
            margin-bottom: 3px;
        }

        .day-staff {
            font-size: 0.7rem;
            color: var(--text-light);
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            width: 100%;
            text-align: center;
        }

        /* Tabbed Navigation */
        .tabs-container {
            margin-bottom: 20px;
        }

        .tabs-nav {
            display: flex;
            border-bottom: 1px solid var(--gray-dark);
            margin-bottom: 20px;
        }

        .tab-item {
            padding: 10px 20px;
            cursor: pointer;
            font-weight: 500;
            color: var(--text-light);
            border-bottom: 2px solid transparent;
            transition: var(--transition);
        }

        .tab-item.active {
            color: var(--primary);
            border-bottom-color: var(--primary);
        }

        .tab-content {
            display: none;
        }

        .tab-content.active {
            display: block;
        }

        /* Passi assunzione */
        .hiring-steps {
            display: flex;
            justify-content: space-between;
            margin-bottom: 30px;
            position: relative;
        }

        .hiring-steps::before {
            content: '';
            position: absolute;
            top: 25px;
            left: 0;
            right: 0;
            height: 3px;
            background: var(--gray-dark);
            z-index: 1;
        }

        .hiring-step {
            display: flex;
            flex-direction: column;
            align-items: center;
            position: relative;
            z-index: 2;
            flex: 1;
            text-align: center;
        }

        .step-number {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            background: var(--gray-dark);
            color: var(--text-light);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.2rem;
            font-weight: 600;
            margin-bottom: 10px;
            border: 3px solid var(--light);
            transition: var(--transition);
        }

        .hiring-step.active .step-number {
            background: var(--primary);
            color: var(--light);
        }

        .hiring-step.completed .step-number {
            background: var(--accent-green);
            color: var(--light);
        }

        .step-title {
            font-size: 0.85rem;
            font-weight: 500;
            margin-bottom: 5px;
        }

        .step-desc {
            font-size: 0.8rem;
            color: var(--text-light);
        }

        /* Progress bars */
        .progress-container {
            width: 100%;
            margin: 10px 0;
        }

        .progress-label {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 5px;
        }

        .progress-title {
            font-size: 0.85rem;
            font-weight: 500;
        }

        .progress-percentage {
            font-size: 0.85rem;
            color: var(--text-light);
        }

        .progress-bar-container {
            height: 8px;
            background: var(--gray-light);
            border-radius: 4px;
            overflow: hidden;
        }

        .progress-bar-fill {
            height: 100%;
            background: linear-gradient(to right, var(--secondary-light), var(--primary));
            border-radius: 4px;
            transition: width 0.5s ease;
        }

        /* Toast Notifications */
        .toast-container {
            position: fixed;
            bottom: 20px;
            right: 20px;
            display: flex;
            flex-direction: column;
            gap: 10px;
            z-index: 1000;
        }

        .toast {
            background: var(--light);
            border-left: 4px solid var(--primary);
            border-radius: var(--radius-sm);
            box-shadow: var(--shadow);
            padding: 15px 20px;
            display: flex;
            align-items: center;
            gap: 15px;
            min-width: 300px;
            max-width: 400px;
            animation: slideIn 0.3s forwards;
            transform: translateX(100%);
        }

        .toast.success {
            border-left-color: var(--accent-green);
        }

        .toast.error {
            border-left-color: var(--accent-red);
        }

        .toast.warning {
            border-left-color: var(--accent-orange);
        }

        .toast-icon {
            font-size: 1.5rem;
        }

        .toast.success .toast-icon {
            color: var(--accent-green);
        }

        .toast.error .toast-icon {
            color: var(--accent-red);
        }

        .toast.warning .toast-icon {
            color: var(--accent-orange);
        }

        .toast-content {
            flex: 1;
        }

        .toast-title {
            font-weight: 600;
            margin-bottom: 3px;
        }

        .toast-message {
            font-size: 0.9rem;
            color: var(--text-light);
        }

        .toast-close {
            background: none;
            border: none;
            color: var(--text-light);
            cursor: pointer;
            font-size: 1rem;
            padding: 5px;
            transition: var(--transition);
        }

        .toast-close:hover {
            color: var(--accent-red);
        }

        @keyframes slideIn {
            to {
                transform: translateX(0);
            }
        }

        @keyframes slideOut {
            from {
                transform: translateX(0);
            }
            to {
                transform: translateX(120%);
                opacity: 0;
            }
        }

        /* Charts container */
        .chart-container {
            padding: 15px;
            background: var(--light);
            border-radius: var(--radius);
            box-shadow: var(--shadow);
            margin-bottom: 20px;
        }

        /* Responsive CSS */
        @media (max-width: 1200px) {
            .main-container {
                flex-direction: column;
            }

            .sidebar {
                width: 100%;
            }
        }

        @media (max-width: 768px) {
            .header-container {
                flex-direction: column;
                gap: 10px;
                padding: 1rem;
            }

            .nav-menu {
                width: 100%;
                overflow-x: auto;
                padding-bottom: 10px;
                -ms-overflow-style: none;
                scrollbar-width: none;
            }

            .nav-menu::-webkit-scrollbar {
                display: none;
            }

            .nav-link {
                white-space: nowrap;
            }

            .main-container {
                padding: 1rem;
            }
            
            .staff-grid {
                grid-template-columns: 1fr;
            }
            
            .form-grid {
                grid-template-columns: 1fr;
            }
            
            .details-grid {
                grid-template-columns: 1fr;
            }
            
            .filter-bar {
                flex-direction: column;
                align-items: stretch;
            }
            
            .calendar-day {
                font-size: 0.8rem;
            }
            
            .calendar-grid {
                gap: 2px;
            }
        }

        @media (max-width: 480px) {
            .section-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 10px;
            }
            
            .section-actions {
                width: 100%;
                justify-content: space-between;
            }

            .tabs-nav {
                overflow-x: auto;
                -ms-overflow-style: none;
                scrollbar-width: none;
            }

            .tabs-nav::-webkit-scrollbar {
                display: none;
            }
            
            .tab-item {
                padding: 10px 15px;
                white-space: nowrap;
            }
            
            .hiring-steps {
                flex-direction: column;
                gap: 20px;
            }
            
            .hiring-steps::before {
                display: none;
            }
        }
    </style>
</head>
<body>
    <!-- Connection status indicator (nascosto come richiesto) -->
    <div class="connection-status" id="connectionStatus" style="display: none;">
        <i class="fas fa-sync-alt connection-icon"></i>
        <span id="connectionText">Connessione in corso...</span>
    </div>

    <!-- Particle Background -->
    <div class="particles" id="particles"></div>

    <!-- Header -->
    <header>
        <div class="header-container">
            <div class="logo-wrapper">
                <img src="/img/logo.png" alt="YourBite Logo" class="logo">
                <a href="#" class="site-title">YourBite</a>
            </div>

            <nav class="nav-menu">
                <a href="/homepage_capo" class="nav-link">Dashboard</a>
                <a href="/ordini" class="nav-link">Ordini</a>
                <a href="/menu" class="nav-link">Menu</a>
                <a href="#" class="nav-link">Statistiche</a>
                <a href="/personale" class="nav-link active">Personale</a>
            </nav>

            <div class="user-menu">
                <button class="notifications-btn">
                    <i class="far fa-bell"></i>
                    <span class="notification-badge">3</span>
                </button>
                <div class="user-profile" id="userProfileBtn">
                    <img src="https://source.unsplash.com/random/100x100/?person" alt="User" class="user-avatar">
                    <span class="user-name">Manager</span>
                </div>
            </div>
        </div>
    </header>

    <!-- Main Content -->
    <main class="main-container">
        <!-- Sidebar -->
        <aside class="sidebar">
            <div class="sidebar-header">
                <i class="fas fa-users"></i>
                <h2 class="sidebar-title">Personale</h2>
            </div>

            <div class="sidebar-section">
                <h3 class="section-title">Menu</h3>
                <ul class="menu-list">
                    <li>
                        <a href="/homepage_capo" class="menu-item">
                            <i class="fas fa-home"></i>
                            Dashboard
                        </a>
                    </li>
                    <li>
                        <a href="/ordini" class="menu-item">
                            <i class="fas fa-shopping-bag"></i>
                            Ordini
                        </a>
                    </li>
                    <li>
                        <a href="/menu" class="menu-item">
                            <i class="fas fa-utensils"></i>
                            Menu
                        </a>
                    </li>
                    <li>
                        <a href="#" class="menu-item">
                            <i class="fas fa-chart-bar"></i>
                            Statistiche
                        </a>
                    </li>
                    <li>
                        <a href="/personale" class="menu-item active">
                            <i class="fas fa-users"></i>
                            Personale
                        </a>
                    </li>
                </ul>
            </div>

            <div class="sidebar-section">
                <h3 class="section-title">Gestione Personale</h3>
                <ul class="menu-list">
                    <li>
                        <a href="#" class="menu-item" id="showAllStaffBtn">
                            <i class="fas fa-user-friends"></i>
                            Tutti i dipendenti
                        </a>
                    </li>
                    <li>
                        <a href="#" class="menu-item" id="schedulesBtn">
                            <i class="fas fa-calendar-alt"></i>
                            Turni di lavoro
                        </a>
                    </li>
                    <li>
                        <a href="#" class="menu-item" id="performanceBtn">
                            <i class="fas fa-chart-line"></i>
                            Performance
                        </a>
                    </li>
                    <li>
                        <a href="#" class="menu-item" id="addNewStaffBtn">
                            <i class="fas fa-user-plus"></i>
                            Aggiungi dipendente
                        </a>
                    </li>
                </ul>
            </div>

            <div class="sidebar-stats">
                <div class="stat-item">
                    <span class="stat-label">Dipendenti attivi</span>
                    <span class="stat-value">12</span>
                </div>
                <div class="stat-item">
                    <span class="stat-label">In servizio oggi</span>
                    <span class="stat-value">8</span>
                </div>
                <div class="stat-item">
                    <span class="stat-label">Prossime assunzioni</span>
                    <span class="stat-value">2</span>
                </div>
            </div>
        </aside>

        <!-- Content Area -->
        <div class="content-area">
            <!-- Staff Overview Cards -->
            <div class="overview-cards">
                <div class="overview-card">
                    <div class="card-header">
                        <h3 class="card-title">Totale Personale</h3>
                        <div class="card-icon staff">
                            <i class="fas fa-users"></i>
                        </div>
                    </div>
                    <div class="card-value">12</div>
                    <div class="card-footer">
                        <i class="fas fa-arrow-up trend-up"></i>
                        <span class="trend-up">+2 rispetto al mese scorso</span>
                    </div>
                </div>

                <div class="overview-card">
                    <div class="card-header">
                        <h3 class="card-title">In servizio oggi</h3>
                        <div class="card-icon active">
                            <i class="fas fa-user-check"></i>
                        </div>
                    </div>
                    <div class="card-value">8</div>
                    <div class="card-footer">
                        <i class="fas fa-equals"></i>
                        <span>Come da programma</span>
                    </div>
                </div>

                <div class="overview-card">
                    <div class="card-header">
                        <h3 class="card-title">Ore Lavorate (Mese)</h3>
                        <div class="card-icon hours">
                            <i class="fas fa-clock"></i>
                        </div>
                    </div>
                    <div class="card-value">840</div>
                    <div class="card-footer">
                        <i class="fas fa-arrow-up trend-up"></i>
                        <span class="trend-up">+5% rispetto al mese scorso</span>
                    </div>
                </div>

                <div class="overview-card">
                    <div class="card-header">
                        <h3 class="card-title">Performance Generale</h3>
                        <div class="card-icon performance">
                            <i class="fas fa-star"></i>
                        </div>
                    </div>
                    <div class="card-value">4.7/5</div>
                    <div class="card-footer">
                        <i class="fas fa-arrow-up trend-up"></i>
                        <span class="trend-up">+0.2 rispetto al mese scorso</span>
                    </div>
                </div>
            </div>

            <!-- Staff Management Section -->
            <div class="staff-management">
                <div class="section-header">
                    <h3 class="section-title-main">
                        <i class="fas fa-user-friends"></i>
                        Gestione Personale
                    </h3>
                    <div class="section-actions">
                        <button class="action-btn" id="viewScheduleBtn">
                            <i class="fas fa-calendar-alt"></i>
                            Visualizza Turni
                        </button>
                        <button class="action-btn primary" id="addStaffBtn">
                            <i class="fas fa-plus"></i>
                            Aggiungi Dipendente
                        </button>
                    </div>
                </div>

                <div class="filter-bar">
                    <div class="search-box">
                        <i class="fas fa-search search-icon"></i>
                        <input type="text" class="search-input" id="staffSearch" placeholder="Cerca personale...">
                    </div>
                    
                    <div class="filter-dropdown" id="departmentFilter">
                        <button class="filter-btn">
                            <i class="fas fa-building"></i>
                            Reparto
                            <i class="fas fa-chevron-down"></i>
                        </button>
                        <div class="filter-dropdown-content">
                            <div class="filter-item active" data-filter="all">Tutti i reparti</div>
                            <div class="filter-item" data-filter="cucina">Cucina</div>
                            <div class="filter-item" data-filter="servizio">Servizio</div>
                            <div class="filter-item" data-filter="consegna">Consegna</div>
                            <div class="filter-item" data-filter="cassa">Cassa</div>
                            <div class="filter-item" data-filter="pulizie">Pulizie</div>
                        </div>
                    </div>
                    
                    <div class="filter-dropdown" id="statusFilter">
                        <button class="filter-btn">
                            <i class="fas fa-circle"></i>
                            Stato
                            <i class="fas fa-chevron-down"></i>
                        </button>
                        <div class="filter-dropdown-content">
                            <div class="filter-item active" data-filter="all">Tutti gli stati</div>
                            <div class="filter-item" data-filter="active">In servizio</div>
                            <div class="filter-item" data-filter="break">In pausa</div>
                            <div class="filter-item" data-filter="offline">Fuori servizio</div>
                        </div>
                    </div>
                    
                    <div class="filter-dropdown" id="shiftFilter">
                        <button class="filter-btn">
                            <i class="fas fa-clock"></i>
                            Turno
                            <i class="fas fa-chevron-down"></i>
                        </button>
                        <div class="filter-dropdown-content">
                            <div class="filter-item active" data-filter="all">Tutti i turni</div>
                            <div class="filter-item" data-filter="morning">Mattina</div>
                            <div class="filter-item" data-filter="afternoon">Pomeriggio</div>
                            <div class="filter-item" data-filter="evening">Sera</div>
                            <div class="filter-item" data-filter="night">Notte</div>
                        </div>
                    </div>
                </div>

                <div class="staff-grid" id="staffGrid">
                    <!-- Staff cards are generated dynamically -->
                </div>
            </div>
        </div>
    </main>

    <!-- Add/Edit Staff Modal -->
    <div class="modal-overlay" id="staffModal">
        <div class="modal">
            <div class="modal-header">
                <h3 class="modal-title" id="modalTitle">Aggiungi nuovo dipendente</h3>
                <button class="modal-close" id="closeModal">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="modal-body">
                <form id="staffForm">
                    <div class="form-grid">
                        <div class="form-group">
                            <label class="form-label" for="staffName">Nome</label>
                            <input type="text" class="form-control" id="staffName" placeholder="Nome">
                        </div>
                        <div class="form-group">
                            <label class="form-label" for="staffSurname">Cognome</label>
                            <input type="text" class="form-control" id="staffSurname" placeholder="Cognome">
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label" for="staffEmail">Email</label>
                        <input type="email" class="form-control" id="staffEmail" placeholder="email@esempio.com">
                    </div>
                    
                    <div class="form-grid">
                        <div class="form-group">
                            <label class="form-label" for="staffPhone">Telefono</label>
                            <input type="tel" class="form-control" id="staffPhone" placeholder="+39 123 456 7890">
                        </div>
                        <div class="form-group">
                            <label class="form-label" for="staffBirthdate">Data di nascita</label>
                            <input type="date" class="form-control" id="staffBirthdate">
                        </div>
                    </div>
                    
                    <div class="form-grid">
                        <div class="form-group">
                            <label class="form-label" for="staffPosition">Posizione</label>
                            <select class="form-select" id="staffPosition">
                                <option value="">Seleziona posizione</option>
                                <option value="cuoco">Cuoco</option>
                                <option value="cameriere">Cameriere</option>
                                <option value="cassiere">Cassiere</option>
                                <option value="rider">Rider</option>
                                <option value="pulizie">Addetto alle pulizie</option>
                                <option value="manager">Manager</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label class="form-label" for="staffDepartment">Reparto</label>
                            <select class="form-select" id="staffDepartment">
                                <option value="">Seleziona reparto</option>
                                <option value="cucina">Cucina</option>
                                <option value="servizio">Servizio</option>
                                <option value="consegna">Consegna</option>
                                <option value="cassa">Cassa</option>
                                <option value="pulizie">Pulizie</option>
                            </select>
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label" for="staffHireDate">Data di assunzione</label>
                        <input type="date" class="form-control" id="staffHireDate">
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">Giorni di disponibilità</label>
                        <div class="switch-container">
                            <div class="day-switch">
                                <span class="day-label">Lun</span>
                                <label class="switch">
                                    <input type="checkbox" name="availability[]" value="monday" checked>
                                    <span class="slider"></span>
                                </label>
                            </div>
                            <div class="day-switch">
                                <span class="day-label">Mar</span>
                                <label class="switch">
                                    <input type="checkbox" name="availability[]" value="tuesday" checked>
                                    <span class="slider"></span>
                                </label>
                            </div>
                            <div class="day-switch">
                                <span class="day-label">Mer</span>
                                <label class="switch">
                                    <input type="checkbox" name="availability[]" value="wednesday" checked>
                                    <span class="slider"></span>
                                </label>
                            </div>
                            <div class="day-switch">
                                <span class="day-label">Gio</span>
                                <label class="switch">
                                    <input type="checkbox" name="availability[]" value="thursday" checked>
                                    <span class="slider"></span>
                                </label>
                            </div>
                            <div class="day-switch">
                                <span class="day-label">Ven</span>
                                <label class="switch">
                                    <input type="checkbox" name="availability[]" value="friday" checked>
                                    <span class="slider"></span>
                                </label>
                            </div>
                            <div class="day-switch">
                                <span class="day-label">Sab</span>
                                <label class="switch">
                                    <input type="checkbox" name="availability[]" value="saturday">
                                    <span class="slider"></span>
                                </label>
                            </div>
                            <div class="day-switch">
                                <span class="day-label">Dom</span>
                                <label class="switch">
                                    <input type="checkbox" name="availability[]" value="sunday">
                                    <span class="slider"></span>
                                </label>
                            </div>
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label" for="staffNotes">Note</label>
                        <textarea class="form-control" id="staffNotes" rows="3" placeholder="Inserisci eventuali note..."></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" id="cancelStaffBtn">Annulla</button>
                <button type="button" class="btn btn-primary" id="saveStaffBtn">Salva</button>
            </div>
        </div>
    </div>

    <!-- Staff Details Modal -->
    <div class="modal-overlay" id="staffDetailsModal">
        <div class="modal">
            <div class="modal-header">
                <h3 class="modal-title">Dettagli Dipendente</h3>
                <button class="modal-close" id="closeDetailsModal">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="modal-body">
                <div class="staff-details-header">
                                        <img src="" alt="Staff Avatar" class="staff-details-avatar" id="detailsAvatar">
                    <div class="staff-details-info">
                        <h3 id="detailsName">Nome Dipendente</h3>
                        <p id="detailsPosition">Posizione</p>
                        <span class="staff-details-badge badge-active" id="detailsStatus">In servizio</span>
                    </div>
                </div>
                
                <div class="tabs-container">
                    <div class="tabs-nav">
                        <div class="tab-item active" data-tab="info">Informazioni</div>
                        <div class="tab-item" data-tab="schedule">Turni</div>
                        <div class="tab-item" data-tab="performance">Performance</div>
                        <div class="tab-item" data-tab="documents">Documenti</div>
                    </div>
                    
                    <div class="tab-content active" id="tab-info">
                        <div class="staff-details-section">
                            <h4><i class="fas fa-info-circle"></i> Informazioni Personali</h4>
                            <div class="details-grid">
                                <div class="details-item">
                                    <span class="details-label">Email</span>
                                    <span class="details-value" id="detailsEmail">email@esempio.com</span>
                                </div>
                                <div class="details-item">
                                    <span class="details-label">Telefono</span>
                                    <span class="details-value" id="detailsPhone">+39 123 456 7890</span>
                                </div>
                                <div class="details-item">
                                    <span class="details-label">Data di nascita</span>
                                    <span class="details-value" id="detailsBirthdate">01/01/1990</span>
                                </div>
                                <div class="details-item">
                                    <span class="details-label">Età</span>
                                    <span class="details-value" id="detailsAge">33 anni</span>
                                </div>
                            </div>
                        </div>
                        
                        <div class="staff-details-section">
                            <h4><i class="fas fa-briefcase"></i> Informazioni Lavorative</h4>
                            <div class="details-grid">
                                <div class="details-item">
                                    <span class="details-label">Posizione</span>
                                    <span class="details-value" id="detailsJobPosition">Cameriere</span>
                                </div>
                                <div class="details-item">
                                    <span class="details-label">Reparto</span>
                                    <span class="details-value" id="detailsDepartment">Servizio</span>
                                </div>
                                <div class="details-item">
                                    <span class="details-label">Data assunzione</span>
                                    <span class="details-value" id="detailsHireDate">15/03/2022</span>
                                </div>
                                <div class="details-item">
                                    <span class="details-label">Anzianità</span>
                                    <span class="details-value" id="detailsSeniority">3 anni, 2 mesi</span>
                                </div>
                            </div>
                        </div>
                        
                        <div class="staff-details-section">
                            <h4><i class="fas fa-star"></i> Competenze</h4>
                            <div class="skills-container" id="detailsSkills">
                                <span class="skill-badge">Servizio al tavolo</span>
                                <span class="skill-badge">Gestione ordini</span>
                                <span class="skill-badge">Inglese</span>
                                <span class="skill-badge">Gestione clienti</span>
                            </div>
                        </div>
                        
                        <div class="staff-details-section">
                            <h4><i class="fas fa-sticky-note"></i> Note</h4>
                            <p id="detailsNotes">Dipendente molto affidabile, con ottime capacità di gestione clienti anche nei momenti di maggior afflusso.</p>
                        </div>
                    </div>
                    
                    <div class="tab-content" id="tab-schedule">
                        <div class="staff-details-section">
                            <h4><i class="fas fa-calendar-week"></i> Turni Settimanali</h4>
                            <table class="schedule-table">
                                <thead>
                                    <tr>
                                        <th>Giorno</th>
                                        <th>Orario</th>
                                        <th>Reparto</th>
                                        <th>Note</th>
                                    </tr>
                                </thead>
                                <tbody id="scheduleTableBody">
                                    <tr>
                                        <td>Lunedì</td>
                                        <td>10:00 - 18:00</td>
                                        <td>Servizio</td>
                                        <td>Turno diurno</td>
                                    </tr>
                                    <tr>
                                        <td>Martedì</td>
                                        <td>10:00 - 18:00</td>
                                        <td>Servizio</td>
                                        <td>Turno diurno</td>
                                    </tr>
                                    <tr>
                                        <td>Mercoledì</td>
                                        <td>18:00 - 02:00</td>
                                        <td>Servizio</td>
                                        <td>Turno serale</td>
                                    </tr>
                                    <tr>
                                        <td>Giovedì</td>
                                        <td>18:00 - 02:00</td>
                                        <td>Servizio</td>
                                        <td>Turno serale</td>
                                    </tr>
                                    <tr>
                                        <td>Venerdì</td>
                                        <td>--</td>
                                        <td>--</td>
                                        <td>Riposo</td>
                                    </tr>
                                    <tr>
                                        <td>Sabato</td>
                                        <td>16:00 - 00:00</td>
                                        <td>Cassa</td>
                                        <td>Turno serale</td>
                                    </tr>
                                    <tr>
                                        <td>Domenica</td>
                                        <td>--</td>
                                        <td>--</td>
                                        <td>Riposo</td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                        
                        <div class="staff-details-section">
                            <h4><i class="fas fa-calendar-alt"></i> Calendario Mensile</h4>
                            <div class="calendar-container">
                                <div class="calendar-header">
                                    <h3 class="calendar-title" id="calendarMonth">Maggio 2025</h3>
                                    <div class="calendar-nav">
                                        <button class="calendar-nav-btn" id="prevMonth">
                                            <i class="fas fa-chevron-left"></i>
                                        </button>
                                        <button class="calendar-nav-btn" id="nextMonth">
                                            <i class="fas fa-chevron-right"></i>
                                        </button>
                                    </div>
                                </div>
                                <div class="calendar-grid" id="calendarGrid">
                                    <!-- Giorni della settimana -->
                                    <div class="calendar-day-header">Lun</div>
                                    <div class="calendar-day-header">Mar</div>
                                    <div class="calendar-day-header">Mer</div>
                                    <div class="calendar-day-header">Gio</div>
                                    <div class="calendar-day-header">Ven</div>
                                    <div class="calendar-day-header">Sab</div>
                                    <div class="calendar-day-header">Dom</div>
                                    
                                    <!-- Calendario generato dinamicamente -->
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="tab-content" id="tab-performance">
                        <div class="staff-details-section">
                            <h4><i class="fas fa-chart-line"></i> Performance Generale</h4>
                            <div class="details-grid">
                                <div class="details-item">
                                    <span class="details-label">Valutazione media</span>
                                    <div class="details-value">4.8/5.0</div>
                                    <div class="performance-meter">
                                        <div class="performance-bar" style="width: 96%"></div>
                                    </div>
                                </div>
                                <div class="details-item">
                                    <span class="details-label">Efficienza</span>
                                    <div class="details-value">92%</div>
                                    <div class="performance-meter">
                                        <div class="performance-bar" style="width: 92%"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="staff-details-section">
                            <h4><i class="fas fa-tasks"></i> Metriche Dettagliate</h4>
                            <div class="progress-container">
                                <div class="progress-label">
                                    <span class="progress-title">Puntualità</span>
                                    <span class="progress-percentage">98%</span>
                                </div>
                                <div class="progress-bar-container">
                                    <div class="progress-bar-fill" style="width: 98%"></div>
                                </div>
                            </div>
                            
                            <div class="progress-container">
                                <div class="progress-label">
                                    <span class="progress-title">Velocità di servizio</span>
                                    <span class="progress-percentage">95%</span>
                                </div>
                                <div class="progress-bar-container">
                                    <div class="progress-bar-fill" style="width: 95%"></div>
                                </div>
                            </div>
                            
                            <div class="progress-container">
                                <div class="progress-label">
                                    <span class="progress-title">Gestione ordini</span>
                                    <span class="progress-percentage">90%</span>
                                </div>
                                <div class="progress-bar-container">
                                    <div class="progress-bar-fill" style="width: 90%"></div>
                                </div>
                            </div>
                            
                            <div class="progress-container">
                                <div class="progress-label">
                                    <span class="progress-title">Soddisfazione clienti</span>
                                    <span class="progress-percentage">97%</span>
                                </div>
                                <div class="progress-bar-container">
                                    <div class="progress-bar-fill" style="width: 97%"></div>
                                </div>
                            </div>
                            
                            <div class="progress-container">
                                <div class="progress-label">
                                    <span class="progress-title">Collaborazione team</span>
                                    <span class="progress-percentage">94%</span>
                                </div>
                                <div class="progress-bar-container">
                                    <div class="progress-bar-fill" style="width: 94%"></div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="chart-container">
                            <canvas id="performanceChart"></canvas>
                        </div>
                    </div>
                    
                    <div class="tab-content" id="tab-documents">
                        <div class="staff-details-section">
                            <h4><i class="fas fa-file-alt"></i> Documenti</h4>
                            <table class="schedule-table">
                                <thead>
                                    <tr>
                                        <th>Nome documento</th>
                                        <th>Data upload</th>
                                        <th>Scadenza</th>
                                        <th>Azioni</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr>
                                        <td>Documento d'identità</td>
                                        <td>15/03/2022</td>
                                        <td>15/03/2032</td>
                                        <td>
                                            <button class="staff-card-action" title="Visualizza">
                                                <i class="fas fa-eye"></i>
                                            </button>
                                            <button class="staff-card-action" title="Scarica">
                                                <i class="fas fa-download"></i>
                                            </button>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td>Contratto di lavoro</td>
                                        <td>15/03/2022</td>
                                        <td>15/03/2025</td>
                                        <td>
                                            <button class="staff-card-action" title="Visualizza">
                                                <i class="fas fa-eye"></i>
                                            </button>
                                            <button class="staff-card-action" title="Scarica">
                                                <i class="fas fa-download"></i>
                                            </button>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td>Attestato HACCP</td>
                                        <td>20/03/2022</td>
                                        <td>20/03/2026</td>
                                        <td>
                                            <button class="staff-card-action" title="Visualizza">
                                                <i class="fas fa-eye"></i>
                                            </button>
                                            <button class="staff-card-action" title="Scarica">
                                                <i class="fas fa-download"></i>
                                            </button>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                        
                        <div class="staff-details-section">
                            <h4><i class="fas fa-upload"></i> Carica nuovo documento</h4>
                            <div class="form-group">
                                <label class="form-label" for="docType">Tipo documento</label>
                                <select class="form-select" id="docType">
                                    <option value="">Seleziona tipo documento</option>
                                    <option value="id">Documento d'identità</option>
                                    <option value="contract">Contratto di lavoro</option>
                                    <option value="haccp">Attestato HACCP</option>
                                    <option value="cv">Curriculum Vitae</option>
                                    <option value="other">Altro</option>
                                </select>
                            </div>
                            
                            <div class="form-group">
                                <label class="form-label" for="docFile">File</label>
                                <input type="file" class="form-control" id="docFile">
                            </div>
                            
                            <div class="form-group">
                                <label class="form-label" for="docExpiry">Data scadenza (se applicabile)</label>
                                <input type="date" class="form-control" id="docExpiry">
                            </div>
                            
                            <button class="action-btn primary" id="uploadDocBtn">
                                <i class="fas fa-upload"></i>
                                Carica documento
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" id="closeDetailsBtn">Chiudi</button>
                <button type="button" class="btn btn-primary" id="editStaffBtn">Modifica</button>
            </div>
        </div>
    </div>

    <!-- Schedule Modal -->
    <div class="modal-overlay" id="scheduleModal">
        <div class="modal">
            <div class="modal-header">
                <h3 class="modal-title">Gestione Turni</h3>
                <button class="modal-close" id="closeScheduleModal">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="modal-body">
                <div class="tabs-container">
                    <div class="tabs-nav">
                        <div class="tab-item active" data-tab="weekly">Settimanale</div>
                        <div class="tab-item" data-tab="monthly">Mensile</div>
                        <div class="tab-item" data-tab="template">Modelli</div>
                    </div>
                    
                    <div class="tab-content active" id="tab-weekly">
                        <div class="calendar-header">
                            <h3 class="calendar-title" id="weekTitle">Settimana 3-9 maggio 2025</h3>
                            <div class="calendar-nav">
                                <button class="calendar-nav-btn" id="prevWeek">
                                    <i class="fas fa-chevron-left"></i>
                                </button>
                                <button class="calendar-nav-btn" id="nextWeek">
                                    <i class="fas fa-chevron-right"></i>
                                </button>
                            </div>
                        </div>
                        
                        <table class="schedule-table">
                            <thead>
                                <tr>
                                    <th>Dipendente</th>
                                    <th>Lun</th>
                                    <th>Mar</th>
                                    <th>Mer</th>
                                    <th>Gio</th>
                                    <th>Ven</th>
                                    <th>Sab</th>
                                    <th>Dom</th>
                                </tr>
                            </thead>
                            <tbody id="weeklyScheduleBody">
                                <!-- Righe generate dinamicamente -->
                            </tbody>
                        </table>
                    </div>
                    
                    <div class="tab-content" id="tab-monthly">
                        <div class="calendar-header">
                            <h3 class="calendar-title" id="scheduleMonthTitle">Maggio 2025</h3>
                            <div class="calendar-nav">
                                <button class="calendar-nav-btn" id="prevScheduleMonth">
                                    <i class="fas fa-chevron-left"></i>
                                </button>
                                <button class="calendar-nav-btn" id="nextScheduleMonth">
                                    <i class="fas fa-chevron-right"></i>
                                </button>
                            </div>
                        </div>
                        
                        <div class="staff-details-section">
                            <h4><i class="fas fa-filter"></i> Filtra per dipendente</h4>
                            <select class="form-select" id="monthlyStaffFilter">
                                <option value="all">Tutti i dipendenti</option>
                                <!-- Opzioni generate dinamicamente -->
                            </select>
                        </div>
                        
                        <div class="calendar-container">
                            <div class="calendar-grid" id="monthlyScheduleGrid">
                                <!-- Calendario generato dinamicamente -->
                            </div>
                        </div>
                    </div>
                    
                    <div class="tab-content" id="tab-template">
                        <div class="staff-details-section">
                            <h4><i class="fas fa-copy"></i> Modelli di turni</h4>
                            <p>Salva e riutilizza modelli di turni settimanali per una pianificazione più veloce.</p>
                            
                            <div class="form-group">
                                <label class="form-label" for="templateSelect">Modelli salvati</label>
                                <select class="form-select" id="templateSelect">
                                    <option value="">Seleziona un modello</option>
                                    <option value="standard">Turni standard</option>
                                    <option value="summer">Turni estivi</option>
                                    <option value="weekend">Turni weekend intensivi</option>
                                </select>
                            </div>
                            
                            <div class="form-group">
                                <label class="form-label" for="templateName">Nome nuovo modello</label>
                                <input type="text" class="form-control" id="templateName" placeholder="Inserisci nome modello">
                            </div>
                            
                            <div class="form-group">
                                <button class="action-btn" id="loadTemplateBtn">
                                    <i class="fas fa-download"></i>
                                    Carica modello
                                </button>
                                <button class="action-btn primary" id="saveTemplateBtn">
                                    <i class="fas fa-save"></i>
                                    Salva come modello
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" id="cancelScheduleBtn">Annulla</button>
                <button type="button" class="btn btn-primary" id="saveScheduleBtn">Salva turni</button>
            </div>
        </div>
    </div>

    <!-- Toast Notifications Container -->
    <div class="toast-container" id="toastContainer"></div>

    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Nascondi sempre l'indicatore di stato della connessione
            const connectionStatus = document.getElementById('connectionStatus');
            if (connectionStatus) {
                connectionStatus.style.display = 'none';
            }
            
            // Inizializza i dati del personale
            initializeStaffData();
            
            // Inizializza i dropdown di filtro
            initializeFilterDropdowns();
            
            // Inizializza i tab nei modali
            initializeTabs();
            
            // Inizializza i modal
            initializeModals();
            
            // Inizializza il grafico delle performance
            initializePerformanceChart();
            
            // Inizializza il calendario
            initializeCalendar();
            
            // Inizializza gli eventi di ricerca
            initializeSearch();
        });

        // Dati di esempio per il personale
        let staffData = [
            {
                id: 1,
                name: "Marco Rossi",
                position: "Cuoco",
                department: "cucina",
                status: "active",
                shift: "morning",
                avatar: "https://source.unsplash.com/random/100x100/?man,1",
                email: "marco.rossi@yourbite.it",
                phone: "+39 333 1234567",
                birthdate: "1985-05-15",
                hireDate: "2020-03-10",
                hours: 38,
                rating: 4.8,
                availability: ["monday", "tuesday", "wednesday", "thursday", "friday"]
            },
            {
                id: 2,
                name: "Giulia Bianchi",
                position: "Cameriera",
                department: "servizio",
                status: "active",
                shift: "evening",
                avatar: "https://source.unsplash.com/random/100x100/?woman,1",
                email: "giulia.bianchi@yourbite.it",
                phone: "+39 333 7654321",
                birthdate: "1990-08-25",
                hireDate: "2021-06-15",
                hours: 30,
                rating: 4.7,
                availability: ["monday", "tuesday", "friday", "saturday", "sunday"]
            },
            {
                id: 3,
                name: "Alessandro Verdi",
                position: "Chef",
                department: "cucina",
                status: "active",
                shift: "morning",
                avatar: "https://source.unsplash.com/random/100x100/?chef,1",
                email: "alessandro.verdi@yourbite.it",
                phone: "+39 333 9876543",
                birthdate: "1982-02-10",
                hireDate: "2019-01-15",
                hours: 40,
                rating: 4.9,
                availability: ["monday", "tuesday", "wednesday", "thursday", "friday"]
            },
            {
                id: 4,
                name: "Sofia Neri",
                position: "Cassiera",
                department: "cassa",
                status: "break",
                shift: "afternoon",
                avatar: "https://source.unsplash.com/random/100x100/?woman,2",
                email: "sofia.neri@yourbite.it",
                phone: "+39 333 5678901",
                birthdate: "1995-11-30",
                hireDate: "2022-02-01",
                hours: 25,
                rating: 4.5,
                availability: ["wednesday", "thursday", "friday", "saturday", "sunday"]
            },
            {
                id: 5,
                name: "Luca Marini",
                position: "Rider",
                department: "consegna",
                status: "offline",
                shift: "night",
                avatar: "https://source.unsplash.com/random/100x100/?man,2",
                email: "luca.marini@yourbite.it",
                phone: "+39 333 2345678",
                birthdate: "1993-07-18",
                hireDate: "2021-09-05",
                hours: 32,
                rating: 4.6,
                availability: ["monday", "tuesday", "thursday", "friday", "saturday"]
            },
            {
                id: 6,
                name: "Elena Romano",
                position: "Addetta Pulizie",
                department: "pulizie",
                status: "active",
                shift: "morning",
                avatar: "https://source.unsplash.com/random/100x100/?woman,3",
                email: "elena.romano@yourbite.it",
                phone: "+39 333 8765432",
                birthdate: "1988-04-22",
                hireDate: "2020-10-12",
                hours: 30,
                rating: 4.4,
                availability: ["monday", "wednesday", "friday"]
            },
            {
                id: 7,
                name: "Roberto Ferretti",
                position: "Cuoco",
                department: "cucina",
                status: "break",
                shift: "evening",
                avatar: "https://source.unsplash.com/random/100x100/?man,3",
                email: "roberto.ferretti@yourbite.it",
                phone: "+39 333 4567890",
                birthdate: "1987-09-14",
                hireDate: "2020-05-20",
                hours: 38,
                rating: 4.7,
                availability: ["monday", "tuesday", "wednesday", "thursday", "friday"]
            },
            {
                id: 8,
                name: "Laura Martini",
                position: "Cameriera",
                department: "servizio",
                status: "active",
                shift: "afternoon",
                avatar: "https://source.unsplash.com/random/100x100/?woman,4",
                email: "laura.martini@yourbite.it",
                phone: "+39 333 6789012",
                birthdate: "1992-01-05",
                hireDate: "2021-03-28",
                hours: 32,
                rating: 4.6,
                availability: ["wednesday", "thursday", "friday", "saturday", "sunday"]
            },
            {
                id: 9,
                name: "Paolo Ricci",
                position: "Rider",
                department: "consegna",
                status: "offline",
                shift: "night",
                avatar: "https://source.unsplash.com/random/100x100/?man,4",
                email: "paolo.ricci@yourbite.it",
                phone: "+39 333 7890123",
                birthdate: "1994-06-30",
                hireDate: "2022-01-10",
                hours: 25,
                rating: 4.3,
                availability: ["thursday", "friday", "saturday", "sunday"]
            },
            {
                id: 10,
                name: "Martina Ferrari",
                position: "Cassiera",
                department: "cassa",
                status: "active",
                shift: "morning",
                avatar: "https://source.unsplash.com/random/100x100/?woman,5",
                email: "martina.ferrari@yourbite.it",
                phone: "+39 333 8901234",
                birthdate: "1991-12-15",
                hireDate: "2021-07-05",
                hours: 30,
                rating: 4.8,
                availability: ["monday", "tuesday", "wednesday", "friday", "saturday"]
            },
            {
                id: 11,
                name: "Andrea Belli",
                position: "Sommelier",
                department: "servizio",
                status: "active",
                shift: "evening",
                avatar: "https://source.unsplash.com/random/100x100/?man,5",
                email: "andrea.belli@yourbite.it",
                phone: "+39 333 9012345",
                birthdate: "1985-03-20",
                hireDate: "2020-02-15",
                hours: 35,
                rating: 4.9,
                availability: ["tuesday", "wednesday", "thursday", "friday", "saturday"]
            },
            {
                id: 12,
                name: "Chiara Russo",
                position: "Chef Pasticcera",
                department: "cucina",
                status: "break",
                shift: "morning",
                avatar: "https://source.unsplash.com/random/100x100/?woman,6",
                email: "chiara.russo@yourbite.it",
                phone: "+39 333 0123456",
                birthdate: "1989-10-08",
                hireDate: "2020-08-01",
                hours: 38,
                rating: 4.8,
                availability: ["monday", "tuesday", "wednesday", "thursday", "friday"]
            },
        ];

        // Funzione per inizializzare i dati del personale
        function initializeStaffData() {
            renderStaffGrid(); // Renderizza la griglia del personale
            
            // Aggiungi listener per i pulsanti di azione
            document.getElementById('addStaffBtn').addEventListener('click', function() {
                showModal('staffModal');
                document.getElementById('modalTitle').textContent = 'Aggiungi nuovo dipendente';
                document.getElementById('staffForm').reset();
            });
            
            document.getElementById('viewScheduleBtn').addEventListener('click', function() {
                showModal('scheduleModal');
                generateWeeklySchedule();
            });
            
            // Salvataggio di un nuovo membro dello staff
            document.getElementById('saveStaffBtn').addEventListener('click', function() {
                saveStaffMember();
            });
        }

        // Renderizza la griglia del personale
        function renderStaffGrid(filterData = null) {
            const staffGrid = document.getElementById('staffGrid');
            staffGrid.innerHTML = '';
            
            const dataToRender = filterData || staffData;
            
            if (dataToRender.length === 0) {
                staffGrid.innerHTML = '<div class="no-results">Nessun dipendente trovato con i filtri selezionati</div>';
                return;
            }
            
            dataToRender.forEach(staff => {
                const statusClass = staff.status === 'active' ? '' : staff.status === 'break' ? 'break' : 'offline';
                
                const staffCard = document.createElement('div');
                staffCard.className = 'staff-card';
                staffCard.dataset.id = staff.id;
                
                staffCard.innerHTML = `
                    <div class="staff-card-header">
                        <div class="staff-status ${statusClass}"></div>
                        <img src="${staff.avatar}" alt="${staff.name}" class="staff-avatar">
                        <h3 class="staff-name">${staff.name}</h3>
                        <p class="staff-position">${staff.position}</p>
                    </div>
                    
                    <div class="staff-card-body">
                        <div class="staff-stats">
                            <div class="staff-stat">
                                <div class="stat-label-card">Reparto</div>
                                <div class="stat-value-card">${capitalizeFirstLetter(staff.department)}</div>
                            </div>
                            <div class="staff-stat">
                                <div class="stat-label-card">Ore/Sett</div>
                                <div class="stat-value-card">${staff.hours}</div>
                            </div>
                            <div class="staff-stat">
                                <div class="stat-label-card">Turno</div>
                                <div class="stat-value-card">${translateShift(staff.shift)}</div>
                            </div>
                            <div class="staff-stat">
                                <div class="stat-label-card">Valutazione</div>
                                <div class="stat-value-card">${staff.rating}/5</div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="staff-card-footer">
                        <button class="staff-card-action view-staff" title="Visualizza dettagli" data-id="${staff.id}">
                            <i class="fas fa-eye"></i>
                        </button>
                        <button class="staff-card-action edit-staff" title="Modifica" data-id="${staff.id}">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="staff-card-action schedule-staff" title="Turni" data-id="${staff.id}">
                            <i class="fas fa-calendar-alt"></i>
                        </button>
                        <button class="staff-card-action message-staff" title="Invia messaggio" data-id="${staff.id}">
                            <i class="fas fa-comment"></i>
                        </button>
                    </div>
                `;
                
                staffGrid.appendChild(staffCard);
            });
            
            // Aggiungi listener ai pulsanti nelle card
            addStaffCardListeners();
        }

        // Aggiungi listener ai pulsanti nelle card
        function addStaffCardListeners() {
            // Visualizza dettagli dipendente
            document.querySelectorAll('.view-staff').forEach(button => {
                button.addEventListener('click', function() {
                    const staffId = parseInt(this.dataset.id);
                    showStaffDetails(staffId);
                });
            });
            
            // Modifica dipendente
            document.querySelectorAll('.edit-staff').forEach(button => {
                button.addEventListener('click', function() {
                    const staffId = parseInt(this.dataset.id);
                    editStaffMember(staffId);
                });
            });
            
            // Gestisci turni dipendente
            document.querySelectorAll('.schedule-staff').forEach(button => {
                button.addEventListener('click', function() {
                    const staffId = parseInt(this.dataset.id);
                    manageStaffSchedule(staffId);
                });
            });
            
            // Invia messaggio al dipendente
            document.querySelectorAll('.message-staff').forEach(button => {
                button.addEventListener('click', function() {
                    const staffId = parseInt(this.dataset.id);
                    messageStaffMember(staffId);
                });
            });
        }

        // Mostra dettagli di un dipendente
        function showStaffDetails(staffId) {
            const staff = staffData.find(s => s.id === staffId);
            if (!staff) return;
            
            // Popola i dettagli
            document.getElementById('detailsAvatar').src = staff.avatar;
            document.getElementById('detailsName').textContent = staff.name;
            document.getElementById('detailsPosition').textContent = staff.position;
            
            // Imposta lo stato
            const statusBadge = document.getElementById('detailsStatus');
            statusBadge.className = 'staff-details-badge';
            
            if (staff.status === 'active') {
                statusBadge.classList.add('badge-active');
                statusBadge.textContent = 'In servizio';
            } else if (staff.status === 'break') {
                statusBadge.classList.add('badge-break');
                statusBadge.textContent = 'In pausa';
            } else {
                statusBadge.classList.add('badge-offline');
                statusBadge.textContent = 'Fuori servizio';
            }
            
            // Informazioni personali
            document.getElementById('detailsEmail').textContent = staff.email;
            document.getElementById('detailsPhone').textContent = staff.phone;
            
            // Calcola età
            const birthDate = new Date(staff.birthdate);
            const formattedBirthdate = birthDate.toLocaleDateString('it-IT');
            document.getElementById('detailsBirthdate').textContent = formattedBirthdate;
            
            const age = calculateAge(birthDate);
            document.getElementById('detailsAge').textContent = `${age} anni`;
            
            // Informazioni lavorative
            document.getElementById('detailsJobPosition').textContent = staff.position;
            document.getElementById('detailsDepartment').textContent = capitalizeFirstLetter(staff.department);
            
            const hireDate = new Date(staff.hireDate);
            document.getElementById('detailsHireDate').textContent = hireDate.toLocaleDateString('it-IT');
            
            const seniority = calculateSeniority(hireDate);
            document.getElementById('detailsSeniority').textContent = seniority;
            
            // Mostra il modale
            showModal('staffDetailsModal');
        }

        // Modifica un dipendente
        function editStaffMember(staffId) {
            const staff = staffData.find(s => s.id === staffId);
            if (!staff) return;
            
            // Popola il form di modifica
            document.getElementById('staffName').value = staff.name.split(' ')[0];
            document.getElementById('staffSurname').value = staff.name.split(' ')[1];
            document.getElementById('staffEmail').value = staff.email;
            document.getElementById('staffPhone').value = staff.phone;
            document.getElementById('staffBirthdate').value = staff.birthdate;
            document.getElementById('staffPosition').value = staff.position.toLowerCase();
            document.getElementById('staffDepartment').value = staff.department;
            document.getElementById('staffHireDate').value = staff.hireDate;
            
            // Imposta le disponibilità
            const availabilityCheckboxes = document.querySelectorAll('input[name="availability[]"]');
            availabilityCheckboxes.forEach(checkbox => {
                checkbox.checked = staff.availability.includes(checkbox.value);
            });
            
            // Imposta il titolo del modale
            document.getElementById('modalTitle').textContent = 'Modifica dipendente';
            
            // Mostra il modale
            showModal('staffModal');
            
            // Imposta ID dipendente da modificare
            document.getElementById('staffForm').dataset.editId = staffId;
        }

        // Gestisci turni di un dipendente
        function manageStaffSchedule(staffId) {
            const staff = staffData.find(s => s.id === staffId);
            if (!staff) return;
            
            // Mostra il modale dei turni
            showModal('scheduleModal');
            
            // Imposta il dipendente selezionato nel filtro
            const staffFilterSelect = document.getElementById('monthlyStaffFilter');
            if (staffFilterSelect) {
                // Assicurati che ci sia un'opzione per questo dipendente
                let optionExists = false;
                for (let i = 0; i < staffFilterSelect.options.length; i++) {
                    if (staffFilterSelect.options[i].value == staffId) {
                        optionExists = true;
                        staffFilterSelect.selectedIndex = i;
                        break;
                    }
                }
                
                if (!optionExists) {
                    const option = document.createElement('option');
                    option.value = staffId;
                    option.textContent = staff.name;
                    staffFilterSelect.appendChild(option);
                    staffFilterSelect.value = staffId;
                }
            }
            
            // Passa alla scheda "Settimanale" e genera i turni
            activateTab('weekly');
            generateWeeklySchedule();
        }

        // Invia messaggio a un dipendente
        function messageStaffMember(staffId) {
            const staff = staffData.find(s => s.id === staffId);
            if (!staff) return;
            
            // In una vera implementazione, questo aprirebbe una chat o una finestra di email
            // Per questa demo, mostreremo un toast di conferma
            showToast('success', 'Messaggio inviato', `Messaggio di prova inviato a ${staff.name}. Implementazione reale da completare.`);
        }

        // Salva un dipendente (nuovo o modifica)
        function saveStaffMember() {
            const form = document.getElementById('staffForm');
            
            // Validazione base
            const name = document.getElementById('staffName').value;
            const surname = document.getElementById('staffSurname').value;
            const email = document.getElementById('staffEmail').value;
            const position = document.getElementById('staffPosition').value;
            const department = document.getElementById('staffDepartment').value;
            
            if (!name || !surname || !email || !position || !department) {
                showToast('error', 'Errore', 'Compila tutti i campi obbligatori');
                return;
            }
            
            // Raccogli i dati del form
            const staffData = {
                name: `${name} ${surname}`,
                email: document.getElementById('staffEmail').value,
                phone: document.getElementById('staffPhone').value,
                birthdate: document.getElementById('staffBirthdate').value,
                position: document.getElementById('staffPosition').options[document.getElementById('staffPosition').selectedIndex].text,
                department: department,
                hireDate: document.getElementById('staffHireDate').value || new Date().toISOString().split('T')[0],
                status: 'active',
                shift: determineShiftFromAvailability(),
                hours: Math.floor(Math.random() * 15) + 25, // Esempio: ore casuali tra 25 e 40
                rating: (Math.random() * 0.5 + 4.5).toFixed(1), // Valutazione casuale 4.5-5.0
                availability: getSelectedAvailability(),
                avatar: `https://source.unsplash.com/random/100x100/?person,${new Date().getTime()}`
            };
            
            // Verifica se è una modifica o un nuovo inserimento
            const editId = form.dataset.editId;
            if (editId) {
                // Modifica dipendente esistente
                const index = window.staffData.findIndex(s => s.id === parseInt(editId));
                if (index !== -1) {
                    // Mantieni ID e avatar
                    staffData.id = parseInt(editId);
                    staffData.avatar = window.staffData[index].avatar;
                    
                    // Aggiorna il dipendente
                    window.staffData[index] = staffData;
                    showToast('success', 'Dipendente aggiornato', `${staffData.name} aggiornato con successo!`);
                }
            } else {
                // Nuovo dipendente
                staffData.id = generateNewId();
                window.staffData.push(staffData);
                showToast('success', 'Dipendente aggiunto', `${staffData.name} aggiunto con successo!`);
            }
            
            // Aggiorna la UI
            renderStaffGrid();
            
            // Chiudi il modale
            hideModal('staffModal');
            
            // Resetta il form
            form.reset();
            delete form.dataset.editId;
        }

        // Ottieni i giorni di disponibilità selezionati
        function getSelectedAvailability() {
            const checkboxes = document.querySelectorAll('input[name="availability[]"]:checked');
            return Array.from(checkboxes).map(checkbox => checkbox.value);
        }

        // Determina il turno basandosi sulla disponibilità
        function determineShiftFromAvailability() {
            const availability = getSelectedAvailability();
            
            // Se disponibile più nei weekend, probabilmente turno serale
            if (availability.includes('saturday') && availability.includes('sunday')) {
                return 'evening';
            }
            
            // Se disponibile più durante la settimana, probabilmente turno mattutino
            if (availability.includes('monday') && availability.includes('tuesday')) {
                return 'morning';
            }
            
            return ['morning', 'afternoon', 'evening', 'night'][Math.floor(Math.random() * 4)];
        }

        // Genera un nuovo ID per un dipendente
        function generateNewId() {
            return Math.max(...window.staffData.map(s => s.id)) + 1;
        }

        // Inizializza i dropdown di filtro
        function initializeFilterDropdowns() {
            const dropdowns = document.querySelectorAll('.filter-dropdown');
            
            dropdowns.forEach(dropdown => {
                const btn = dropdown.querySelector('.filter-btn');
                const content = dropdown.querySelector('.filter-dropdown-content');
                
                // Toggle dropdown
                btn.addEventListener('click', () => {
                    dropdown.classList.toggle('active');
                });
                
                // Gestisci click sugli elementi del filtro
                const filterItems = content.querySelectorAll('.filter-item');
                filterItems.forEach(item => {
                    item.addEventListener('click', () => {
                        // Deseleziona tutti gli elementi
                        filterItems.forEach(i => i.classList.remove('active'));
                        
                        // Seleziona l'elemento cliccato
                        item.classList.add('active');
                        
                        // Chiudi dropdown
                        dropdown.classList.remove('active');
                        
                        // Applica filtro
                        applyFilters();
                    });
                });
                
                // Chiudi dropdown quando si clicca fuori
                document.addEventListener('click', (e) => {
                    if (!dropdown.contains(e.target)) {
                        dropdown.classList.remove('active');
                    }
                });
            });
        }

        // Applica tutti i filtri selezionati
        function applyFilters() {
            const departmentFilter = document.querySelector('#departmentFilter .filter-item.active').dataset.filter;
            const statusFilter = document.querySelector('#statusFilter .filter-item.active').dataset.filter;
            const shiftFilter = document.querySelector('#shiftFilter .filter-item.active').dataset.filter;
            const searchTerm = document.getElementById('staffSearch').value.toLowerCase();
            
            // Filtra i dati
            const filteredStaff = window.staffData.filter(staff => {
                // Applica filtro dipartimento
                if (departmentFilter !== 'all' && staff.department !== departmentFilter) {
                    return false;
                }
                
                // Applica filtro stato
                if (statusFilter !== 'all' && staff.status !== statusFilter) {
                    return false;
                }
                
                // Applica filtro turno
                if (shiftFilter !== 'all' && staff.shift !== shiftFilter) {
                    return false;
                }
                
                // Applica filtro di ricerca
                if (searchTerm) {
                    return (
                        staff.name.toLowerCase().includes(searchTerm) ||
                        staff.position.toLowerCase().includes(searchTerm) ||
                        staff.email.toLowerCase().includes(searchTerm)
                    );
                }
                
                return true;
            });
            
            // Aggiorna la visualizzazione
            renderStaffGrid(filteredStaff);
        }

        // Inizializza la ricerca
        function initializeSearch() {
            const searchInput = document.getElementById('staffSearch');
            
            searchInput.addEventListener('input', () => {
                // Debounce per evitare troppe esecuzioni
                clearTimeout(searchInput.debounceTimer);
                searchInput.debounceTimer = setTimeout(() => {
                    applyFilters();
                }, 300);
            });
        }

        // Inizializza i tab nei modali
        function initializeTabs() {
            const tabsContainers = document.querySelectorAll('.tabs-container');
            
            tabsContainers.forEach(container => {
                const tabItems = container.querySelectorAll('.tab-item');
                
                tabItems.forEach(item => {
                    item.addEventListener('click', () => {
                        const tabId = item.dataset.tab;
                        
                        // Deseleziona tutti i tab
                        container.querySelectorAll('.tab-item').forEach(tab => {
                            tab.classList.remove('active');
                        });
                        
                        // Nasconde tutti i contenuti
                        container.querySelectorAll('.tab-content').forEach(content => {
                            content.classList.remove('active');
                        });
                        
                        // Attiva il tab selezionato
                        item.classList.add('active');
                        container.querySelector(`#tab-${tabId}`).classList.add('active');
                    });
                });
            });
        }

        // Attiva un tab specifico
        function activateTab(tabId) {
            const tabItem = document.querySelector(`.tab-item[data-tab="${tabId}"]`);
            if (tabItem) {
                tabItem.click();
            }
        }

        // Inizializza i modal
        function initializeModals() {
            // Staff Modal
            document.getElementById('addStaffBtn').addEventListener('click', () => {
                showModal('staffModal');
            });
            
            document.getElementById('closeModal').addEventListener('click', () => {
                hideModal('staffModal');
            });
            
            document.getElementById('cancelStaffBtn').addEventListener('click', () => {
                hideModal('staffModal');
            });
            
            // Staff Details Modal
            document.getElementById('closeDetailsModal').addEventListener('click', () => {
                hideModal('staffDetailsModal');
            });
            
            document.getElementById('closeDetailsBtn').addEventListener('click', () => {
                hideModal('staffDetailsModal');
            });
            
            document.getElementById('editStaffBtn').addEventListener('click', () => {
                // Ottieni l'ID del dipendente visualizzato
                const name = document.getElementById('detailsName').textContent;
                const staff = window.staffData.find(s => s.name === name);
                
                if (staff) {
                    // Nascondi il modal dettagli
                    hideModal('staffDetailsModal');
                    // Apri il modal di modifica
                    editStaffMember(staff.id);
                }
            });
            
            // Schedule Modal
            document.getElementById('closeScheduleModal').addEventListener('click', () => {
                hideModal('scheduleModal');
            });
            
            document.getElementById('cancelScheduleBtn').addEventListener('click', () => {
                hideModal('scheduleModal');
            });
            
            document.getElementById('saveScheduleBtn').addEventListener('click', () => {
                // Qui salveresti i turni al server
                showToast('success', 'Turni salvati', 'I turni sono stati salvati con successo!');
                hideModal('scheduleModal');
            });
        }

        // Mostra un modal
        function showModal(modalId) {
            const modalOverlay = document.getElementById(modalId);
            modalOverlay.classList.add('active');
            
            // Impedisci lo scroll della pagina
            document.body.style.overflow = 'hidden';
        }

        // Nascondi un modal
        function hideModal(modalId) {
            const modalOverlay = document.getElementById(modalId);
            modalOverlay.classList.remove('active');
            
            // Ripristina lo scroll
            document.body.style.overflow = 'auto';
        }

        // Inizializza il grafico delle performance
        function initializePerformanceChart() {
            const ctx = document.getElementById('performanceChart');
            
            if (!ctx) return;
            
            new Chart(ctx, {
                type: 'line',
                data: {
                    labels: ['Gen', 'Feb', 'Mar', 'Apr', 'Mag', 'Giu'],
                    datasets: [{
                        label: 'Performance',
                        data: [4.3, 4.5, 4.6, 4.7, 4.8, 4.8],
                        borderColor: '#5e60ce',
                        backgroundColor: 'rgba(94, 96, 206, 0.1)',
                        tension: 0.3,
                        fill: true
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            display: false
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    return `Valutazione: ${context.raw}/5`;
                                }
                            }
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: false,
                            min: 3,
                            max: 5
                        }
                    }
                }
            });
        }

        // Inizializza il calendario
        function initializeCalendar() {
            // Implementazione semplificata per demo
            updateCalendar();
            
            document.getElementById('prevMonth')?.addEventListener('click', () => {
                // Naviga al mese precedente
                showToast('info', 'Navigazione calendario', 'Funzionalità da implementare: mese precedente');
            });
            
            document.getElementById('nextMonth')?.addEventListener('click', () => {
                // Naviga al mese successivo
                showToast('info', 'Navigazione calendario', 'Funzionalità da implementare: mese successivo');
            });
        }

        // Aggiorna il calendario
        function updateCalendar() {
            const calendarGrid = document.getElementById('calendarGrid');
            if (!calendarGrid) return;
            
            // Genera giorni del calendario (esempio semplificato)
            const days = 31; // Esempio per un mese di 31 giorni
            const firstDay = 3; // Esempio: 1° del mese è mercoledì (0=lunedì, 6=domenica)
            
            // Aggiungi giorni del calendario dopo gli header dei giorni della settimana
            for (let i = 0; i < firstDay; i++) {
                const dayCell = document.createElement('div');
                dayCell.className = 'calendar-day other-month';
                
                const day = document.createElement('span');
                day.className = 'day-number';
                day.textContent = 30 - firstDay + i + 1; // Giorni del mese precedente
                
                dayCell.appendChild(day);
                calendarGrid.appendChild(dayCell);
            }
            
            for (let i = 1; i <= days; i++) {
                const dayCell = document.createElement('div');
                dayCell.className = 'calendar-day';
                
                // Oggi
                if (i === 3) dayCell.classList.add('today');
                
                const day = document.createElement('span');
                day.className = 'day-number';
                day.textContent = i;
                
                const staffCount = document.createElement('span');
                staffCount.className = 'day-staff';
                
                // Esempio: giorni di lavoro
                if (i % 7 !== 0 && i % 7 !== 6) { // Non weekend
                    staffCount.textContent = `${Math.floor(Math.random() * 4) + 5`*
                                        <img src="" alt="Staff Avatar" class="staff-details-avatar" id="detailsAvatar">
                    <div class="staff-details-info">
                        <h3 id="detailsName"></h3>
                        <p id="detailsPosition"></p>
                        <span class="staff-details-badge badge-active" id="detailsStatus"></span>
                    </div>
                </div>
                
                <div class="tabs-container">
                    <div class="tabs-nav">
                        <div class="tab-item active" data-tab="info">Informazioni</div>
                        <div class="tab-item" data-tab="schedule">Turni</div>
                        <div class="tab-item" data-tab="performance">Performance</div>
                    </div>
                    
                    <div class="tab-content active" id="infoTab">
                        <div class="staff-details-section">
                            <h4><i class="fas fa-info-circle"></i> Informazioni personali</h4>
                            <div class="details-grid">
                                <div class="details-item">
                                    <span class="details-label">Email</span>
                                    <span class="details-value" id="detailsEmail"></span>
                                </div>
                                <div class="details-item">
                                    <span class="details-label">Telefono</span>
                                    <span class="details-value" id="detailsPhone"></span>
                                </div>
                                <div class="details-item">
                                    <span class="details-label">Data di nascita</span>
                                    <span class="details-value" id="detailsBirthdate"></span>
                                </div>
                                <div class="details-item">
                                    <span class="details-label">Età</span>
                                    <span class="details-value" id="detailsAge"></span>
                                </div>
                            </div>
                        </div>
                        
                        <div class="staff-details-section">
                            <h4><i class="fas fa-briefcase"></i> Informazioni lavorative</h4>
                            <div class="details-grid">
                                <div class="details-item">
                                    <span class="details-label">Reparto</span>
                                    <span class="details-value" id="detailsDepartment"></span>
                                </div>
                                <div class="details-item">
                                    <span class="details-label">Data assunzione</span>
                                    <span class="details-value" id="detailsHireDate"></span>
                                </div>
                                <div class="details-item">
                                    <span class="details-label">Anzianità</span>
                                    <span class="details-value" id="detailsExperience"></span>
                                </div>
                                <div class="details-item">
                                    <span class="details-label">Ore mensili</span>
                                    <span class="details-value" id="detailsHours"></span>
                                </div>
                            </div>
                        </div>
                        
                        <div class="staff-details-section">
                            <h4><i class="fas fa-cogs"></i> Competenze</h4>
                            <div class="skills-container" id="detailsSkills">
                                <!-- Skills badges will be added here -->
                            </div>
                        </div>
                        
                        <div class="staff-details-section">
                            <h4><i class="fas fa-clipboard"></i> Note</h4>
                            <p id="detailsNotes"></p>
                        </div>
                    </div>
                    
                    <div class="tab-content" id="scheduleTab">
                        <div class="staff-details-section">
                            <h4><i class="fas fa-calendar-week"></i> Orario settimanale</h4>
                            <table class="schedule-table">
                                <thead>
                                    <tr>
                                        <th>Giorno</th>
                                        <th>Orario</th>
                                        <th>Mansione</th>
                                    </tr>
                                </thead>
                                <tbody id="scheduleTableBody">
                                    <!-- Schedule rows will be added here -->
                                </tbody>
                            </table>
                        </div>
                        
                        <div class="staff-details-section">
                            <h4><i class="fas fa-calendar-alt"></i> Calendario mensile</h4>
                            <div class="calendar-container">
                                <div class="calendar-header">
                                    <div class="calendar-title" id="calendarMonth">Maggio 2025</div>
                                    <div class="calendar-nav">
                                        <button class="calendar-nav-btn" id="prevMonthBtn"><i class="fas fa-chevron-left"></i></button>
                                        <button class="calendar-nav-btn" id="nextMonthBtn"><i class="fas fa-chevron-right"></i></button>
                                    </div>
                                </div>
                                <div class="calendar-grid" id="calendarGrid">
                                    <div class="calendar-day-header">Lun</div>
                                    <div class="calendar-day-header">Mar</div>
                                    <div class="calendar-day-header">Mer</div>
                                    <div class="calendar-day-header">Gio</div>
                                    <div class="calendar-day-header">Ven</div>
                                    <div class="calendar-day-header">Sab</div>
                                    <div class="calendar-day-header">Dom</div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="tab-content" id="performanceTab">
                        <div class="staff-details-section">
                            <h4><i class="fas fa-chart-line"></i> Valutazione complessiva</h4>
                            <div class="details-grid">
                                <div class="details-item">
                                    <span class="details-label">Valutazione generale</span>
                                    <div class="details-value" id="detailsRating">4.5/5</div>
                                    <div class="performance-meter">
                                        <div class="performance-bar" style="width: 90%"></div>
                                    </div>
                                </div>
                                <div class="details-item">
                                    <span class="details-label">Puntualità</span>
                                    <div class="details-value">4.8/5</div>
                                    <div class="performance-meter">
                                        <div class="performance-bar" style="width: 96%"></div>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="details-grid">
                                <div class="details-item">
                                    <span class="details-label">Efficienza</span>
                                    <div class="details-value">4.2/5</div>
                                    <div class="performance-meter">
                                        <div class="performance-bar" style="width: 84%"></div>
                                    </div>
                                </div>
                                <div class="details-item">
                                    <span class="details-label">Lavoro di squadra</span>
                                    <div class="details-value">4.7/5</div>
                                    <div class="performance-meter">
                                        <div class="performance-bar" style="width: 94%"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="staff-details-section">
                            <h4><i class="fas fa-chart-bar"></i> Statistiche mensili</h4>
                            <div class="chart-container">
                                <canvas id="performanceChart"></canvas>
                            </div>
                        </div>
                        
                        <div class="staff-details-section">
                            <h4><i class="fas fa-clipboard-list"></i> Obiettivi</h4>
                            <div class="progress-container">
                                <div class="progress-label">
                                    <span class="progress-title">Velocità di servizio</span>
                                    <span class="progress-percentage">75%</span>
                                </div>
                                <div class="progress-bar-container">
                                    <div class="progress-bar-fill" style="width: 75%"></div>
                                </div>
                            </div>
                            <div class="progress-container">
                                <div class="progress-label">
                                    <span class="progress-title">Formazione avanzata</span>
                                    <span class="progress-percentage">60%</span>
                                </div>
                                <div class="progress-bar-container">
                                    <div class="progress-bar-fill" style="width: 60%"></div>
                                </div>
                            </div>
                            <div class="progress-container">
                                <div class="progress-label">
                                    <span class="progress-title">Customer satisfaction</span>
                                    <span class="progress-percentage">90%</span>
                                </div>
                                <div class="progress-bar-container">
                                    <div class="progress-bar-fill" style="width: 90%"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" id="closeDetailsBtn">Chiudi</button>
                <button type="button" class="btn btn-primary" id="editStaffBtn">Modifica</button>
            </div>
        </div>
    </div>

    <!-- Schedule Management Modal -->
    <div class="modal-overlay" id="scheduleModal">
        <div class="modal">
            <div class="modal-header">
                <h3 class="modal-title">Gestione Turni</h3>
                <button class="modal-close" id="closeScheduleModal">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="modal-body">
                <div class="tabs-container">
                    <div class="tabs-nav">
                        <div class="tab-item active" data-tab="weekly">Vista Settimanale</div>
                        <div class="tab-item" data-tab="monthly">Vista Mensile</div>
                        <div class="tab-item" data-tab="assignments">Assegnazioni</div>
                    </div>
                    
                    <div class="tab-content active" id="weeklyTab">
                        <div class="calendar-header">
                            <div class="calendar-title">Settimana 3-9 Maggio 2025</div>
                            <div class="calendar-nav">
                                <button class="calendar-nav-btn" id="prevWeekBtn"><i class="fas fa-chevron-left"></i></button>
                                <button class="calendar-nav-btn" id="nextWeekBtn"><i class="fas fa-chevron-right"></i></button>
                            </div>
                        </div>
                        
                        <table class="schedule-table" id="weeklyScheduleTable">
                            <thead>
                                <tr>
                                    <th>Dipendente</th>
                                    <th>Lun</th>
                                    <th>Mar</th>
                                    <th>Mer</th>
                                    <th>Gio</th>
                                    <th>Ven</th>
                                    <th>Sab</th>
                                    <th>Dom</th>
                                </tr>
                            </thead>
                            <tbody>
                                <!-- Will be populated by JavaScript -->
                            </tbody>
                        </table>
                    </div>
                    
                    <div class="tab-content" id="monthlyTab">
                        <div class="calendar-header">
                            <div class="calendar-title">Maggio 2025</div>
                            <div class="calendar-nav">
                                <button class="calendar-nav-btn" id="prevMonthScheduleBtn"><i class="fas fa-chevron-left"></i></button>
                                <button class="calendar-nav-btn" id="nextMonthScheduleBtn"><i class="fas fa-chevron-right"></i></button>
                            </div>
                        </div>
                        
                        <div class="calendar-grid" id="monthlyScheduleGrid">
                            <div class="calendar-day-header">Lun</div>
                            <div class="calendar-day-header">Mar</div>
                            <div class="calendar-day-header">Mer</div>
                            <div class="calendar-day-header">Gio</div>
                            <div class="calendar-day-header">Ven</div>
                            <div class="calendar-day-header">Sab</div>
                            <div class="calendar-day-header">Dom</div>
                            <!-- Will be populated by JavaScript -->
                        </div>
                    </div>
                    
                    <div class="tab-content" id="assignmentsTab">
                        <div class="section-actions" style="margin-bottom: 15px;">
                            <button class="action-btn primary" id="addShiftBtn">
                                <i class="fas fa-plus"></i>
                                Aggiungi Turno
                            </button>
                            <button class="action-btn" id="autoScheduleBtn">
                                <i class="fas fa-magic"></i>
                                Genera Automaticamente
                            </button>
                        </div>
                        
                        <table class="schedule-table" id="assignmentsTable">
                            <thead>
                                <tr>
                                    <th>Dipendente</th>
                                    <th>Data</th>
                                    <th>Orario</th>
                                    <th>Mansione</th>
                                    <th>Azioni</th>
                                </tr>
                            </thead>
                            <tbody>
                                <!-- Will be populated by JavaScript -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" id="closeScheduleBtn">Chiudi</button>
                <button type="button" class="btn btn-primary" id="saveScheduleBtn">Salva Modifiche</button>
            </div>
        </div>
    </div>

    <!-- Toast Notification Container -->
    <div class="toast-container" id="toastContainer">
        <!-- Toasts will be added here dynamically -->
    </div>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Database simulato - in un'app reale, questi dati proverrebbero da un database
        const staffData = [
            {
                id: 1,
                name: "Marco Rossi",
                surname: "Rossi",
                position: "Cuoco",
                department: "cucina",
                status: "active",
                shift: "morning",
                avatar: "https://source.unsplash.com/random/100x100/?chef&1",
                email: "marco.rossi@yourbite.it",
                phone: "+39 333 1111222",
                birthdate: "1987-05-12",
                hireDate: "2022-03-15",
                hours: 160,
                rating: 4.8,
                skills: ["Cucina Italiana", "Pasticceria", "Menu Planning"],
                notes: "Esperto in preparazioni veloci per fast food.",
                availability: ["monday", "tuesday", "wednesday", "thursday", "friday"],
                schedule: [
                    { day: "Lunedì", time: "08:00 - 16:00", role: "Cuoco principale" },
                    { day: "Martedì", time: "08:00 - 16:00", role: "Cuoco principale" },
                    { day: "Mercoledì", time: "08:00 - 16:00", role: "Preparazione" },
                    { day: "Giovedì", time: "08:00 - 16:00", role: "Cuoco principale" },
                    { day: "Venerdì", time: "08:00 - 16:00", role: "Cuoco principale" }
                ]
            },
            {
                id: 2,
                name: "Giulia Bianchi",
                surname: "Bianchi",
                position: "Cameriera",
                department: "servizio",
                status: "break",
                shift: "evening",
                avatar: "https://source.unsplash.com/random/100x100/?waitress&1",
                email: "giulia.bianchi@yourbite.it",
                phone: "+39 333 2222333",
                birthdate: "1995-08-23",
                hireDate: "2023-01-10",
                hours: 120,
                rating: 4.6,
                skills: ["Servizio clienti", "Lingue straniere", "Gestione ordini"],
                notes: "Parla fluentemente inglese e spagnolo.",
                availability: ["wednesday", "thursday", "friday", "saturday", "sunday"],
                schedule: [
                    { day: "Mercoledì", time: "16:00 - 00:00", role: "Cameriera" },
                    { day: "Giovedì", time: "16:00 - 00:00", role: "Cameriera" },
                    { day: "Venerdì", time: "16:00 - 00:00", role: "Cameriera" },
                    { day: "Sabato", time: "16:00 - 00:00", role: "Cameriera" },
                    { day: "Domenica", time: "16:00 - 00:00", role: "Cameriera" }
                ]
            },
            {
                id: 3,
                name: "Alessandro Verdi",
                surname: "Verdi",
                position: "Rider",
                department: "consegna",
                status: "active",
                shift: "afternoon",
                avatar: "https://source.unsplash.com/random/100x100/?delivery&1",
                email: "alessandro.verdi@yourbite.it",
                phone: "+39 333 3333444",
                birthdate: "1992-11-05",
                hireDate: "2022-09-20",
                hours: 100,
                rating: 4.5,
                skills: ["Consegna veloce", "Conoscenza zona", "Manutenzione moto"],
                notes: "Ha un ottimo senso dell'orientamento.",
                availability: ["monday", "tuesday", "wednesday", "thursday", "friday", "saturday"],
                schedule: [
                    { day: "Lunedì", time: "12:00 - 20:00", role: "Consegne" },
                    { day: "Martedì", time: "12:00 - 20:00", role: "Consegne" },
                    { day: "Mercoledì", time: "12:00 - 20:00", role: "Consegne" },
                    { day: "Giovedì", time: "12:00 - 20:00", role: "Consegne" },
                    { day: "Venerdì", time: "12:00 - 20:00", role: "Consegne" },
                    { day: "Sabato", time: "12:00 - 20:00", role: "Consegne" }
                ]
            },
            {
                id: 4,
                name: "Francesca Neri",
                surname: "Neri",
                position: "Cassiera",
                department: "cassa",
                status: "offline",
                shift: "morning",
                avatar: "https://source.unsplash.com/random/100x100/?cashier&1",
                email: "francesca.neri@yourbite.it",
                phone: "+39 333 4444555",
                birthdate: "1990-04-18",
                hireDate: "2021-11-05",
                hours: 140,
                rating: 4.7,
                skills: ["Gestione cassa", "Contabilità", "Servizio clienti"],
                notes: "Molto precisa e puntuale.",
                availability: ["monday", "tuesday", "wednesday", "thursday", "friday"],
                schedule: [
                    { day: "Lunedì", time: "08:00 - 16:00", role: "Cassa principale" },
                    { day: "Martedì", time: "08:00 - 16:00", role: "Cassa principale" },
                    { day: "Mercoledì", time: "08:00 - 16:00", role: "Cassa principale" },
                    { day: "Giovedì", time: "08:00 - 16:00", role: "Cassa principale" },
                    { day: "Venerdì", time: "08:00 - 16:00", role: "Cassa principale" }
                ]
            },
            {
                id: 5,
                name: "Roberto Marini",
                surname: "Marini",
                position: "Cuoco",
                department: "cucina",
                status: "active",
                shift: "evening",
                avatar: "https://source.unsplash.com/random/100x100/?chef&2",
                email: "roberto.marini@yourbite.it",
                phone: "+39 333 5555666",
                birthdate: "1985-07-30",
                hireDate: "2021-06-12",
                hours: 160,
                rating: 4.9,
                skills: ["Cucina Italiana", "Pizza", "Gestione cucina"],
                notes: "Specializzato nella preparazione di pizze.",
                availability: ["monday", "tuesday", "wednesday", "friday", "saturday", "sunday"],
                schedule: [
                    { day: "Lunedì", time: "16:00 - 00:00", role: "Cuoco pizza" },
                    { day: "Martedì", time: "16:00 - 00:00", role: "Cuoco pizza" },
                    { day: "Venerdì", time: "16:00 - 00:00", role: "Cuoco pizza" },
                    { day: "Sabato", time: "16:00 - 00:00", role: "Cuoco pizza" },
                    { day: "Domenica", time: "16:00 - 00:00", role: "Cuoco pizza" }
                ]
            },
            {
                id: 6,
                name: "Elena Ricci",
                surname: "Ricci",
                position: "Addetta pulizie",
                department: "pulizie",
                status: "active",
                shift: "morning",
                avatar: "https://source.unsplash.com/random/100x100/?cleaner&1",
                email: "elena.ricci@yourbite.it",
                phone: "+39 333 6666777",
                birthdate: "1989-12-10",
                hireDate: "2022-07-01",
                hours: 80,
                rating: 4.7,
                skills: ["Pulizia", "Organizzazione", "Gestione magazzino"],
                notes: "Molto scrupolosa e attenta ai dettagli.",
                availability: ["monday", "tuesday", "wednesday", "thursday", "friday"],
                schedule: [
                    { day: "Lunedì", time: "06:00 - 10:00", role: "Pulizie" },
                    { day: "Martedì", time: "06:00 - 10:00", role: "Pulizie" },
                    { day: "Mercoledì", time: "06:00 - 10:00", role: "Pulizie" },
                    { day: "Giovedì", time: "06:00 - 10:00", role: "Pulizie" },
                    { day: "Venerdì", time: "06:00 - 10:00", role: "Pulizie" }
                ]
            },
            {
                id: 7,
                name: "Paolo Esposito",
                surname: "Esposito",
                position: "Cameriere",
                department: "servizio",
                status: "break",
                shift: "afternoon",
                avatar: "https://source.unsplash.com/random/100x100/?waiter&1",
                email: "paolo.esposito@yourbite.it",
                phone: "+39 333 7777888",
                birthdate: "1994-02-25",
                hireDate: "2023-03-20",
                hours: 120,
                rating: 4.3,
                skills: ["Servizio clienti", "Mise en place", "Conoscenza menu"],
                notes: "Ottime capacità di comunicazione con i clienti.",
                availability: ["wednesday", "thursday", "friday", "saturday", "sunday"],
                schedule: [
                    { day: "Mercoledì", time: "12:00 - 20:00", role: "Cameriere" },
                    { day: "Giovedì", time: "12:00 - 20:00", role: "Cameriere" },
                    { day: "Venerdì", time: "12:00 - 20:00", role: "Cameriere" },
                    { day: "Sabato", time: "12:00 - 20:00", role: "Cameriere" },
                    { day: "Domenica", time: "12:00 - 20:00", role: "Cameriere" }
                ]
            },
            {
                id: 8,
                name: "Martina Gallo",
                surname: "Gallo",
                position: "Rider",
                department: "consegna",
                status: "offline",
                shift: "evening",
                avatar: "https://source.unsplash.com/random/100x100/?delivery&2",
                email: "martina.gallo@yourbite.it",
                phone: "+39 333 8888999",
                birthdate: "1996-09-14",
                hireDate: "2023-02-15",
                hours: 100,
                rating: 4.4,
                skills: ["Consegna veloce", "Gestione ordini", "Conoscenza zona"],
                notes: "Conosce molto bene la zona centrale della città.",
                availability: ["monday", "tuesday", "friday", "saturday", "sunday"],
                schedule: [
                    { day: "Lunedì", time: "18:00 - 22:00", role: "Consegne" },
                    { day: "Martedì", time: "18:00 - 22:00", role: "Consegne" },
                    { day: "Venerdì", time: "18:00 - 22:00", role: "Consegne" },
                    { day: "Sabato", time: "18:00 - 22:00", role: "Consegne" },
                    { day: "Domenica", time: "18:00 - 22:00", role: "Consegne" }
                ]
            },
            {
                id: 9,
                name: "Luca Colombo",
                surname: "Colombo",
                position: "Cassiere",
                department: "cassa",
                status: "active",
                shift: "evening",
                avatar: "https://source.unsplash.com/random/100x100/?cashier&2",
                email: "luca.colombo@yourbite.it",
                phone: "+39 333 9999000",
                birthdate: "1993-06-08",
                hireDate: "2022-05-10",
                hours: 140,
                rating: 4.6,
                skills: ["Gestione cassa", "Servizio clienti", "Problem solving"],
                notes: "Ottimo nella gestione delle situazioni di stress.",
                availability: ["monday", "wednesday", "thursday", "saturday", "sunday"],
                schedule: [
                    { day: "Lunedì", time: "16:00 - 00:00", role: "Cassa serale" },
                    { day: "Mercoledì", time: "16:00 - 00:00", role: "Cassa serale" },
                    { day: "Giovedì", time: "16:00 - 00:00", role: "Cassa serale" },
                    { day: "Sabato", time: "16:00 - 00:00", role: "Cassa serale" },
                    { day: "Domenica", time: "16:00 - 00:00", role: "Cassa serale" }
                ]
            },
            {
                id: 10,
                name: "Valentina Ferrari",
                surname: "Ferrari",
                position: "Cuoca",
                department: "cucina",
                status: "break",
                shift: "afternoon",
                avatar: "https://source.unsplash.com/random/100x100/?chef&3",
                email: "valentina.ferrari@yourbite.it",
                phone: "+39 333 0001112",
                birthdate: "1991-03-17",
                hireDate: "2022-01-05",
                hours: 160,
                rating: 4.8,
                skills: ["Cucina Italiana", "Preparazione veloce", "Gestione menu"],
                notes: "Specializzata nella preparazione di panini gourmet.",
                availability: ["tuesday", "wednesday", "thursday", "friday", "saturday"],
                schedule: [
                    { day: "Martedì", time: "12:00 - 20:00", role: "Cuoca panini" },
                    { day: "Mercoledì", time: "12:00 - 20:00", role: "Cuoca panini" },
                    { day: "Giovedì", time: "12:00 - 20:00", role: "Cuoca panini" },
                    { day: "Venerdì", time: "12:00 - 20:00", role: "Cuoca panini" },
                    { day: "Sabato", time: "12:00 - 20:00", role: "Cuoca panini" }
                ]
            },
            {
                id: 11,
                name: "Davide Romano",
                surname: "Romano",
                position: "Addetto pulizie",
                department: "pulizie",
                status: "active",
                shift: "evening",
                avatar: "https://source.unsplash.com/random/100x100/?cleaner&2",
                email: "davide.romano@yourbite.it",
                phone: "+39 333 1112223",
                birthdate: "1988-10-20",
                hireDate: "2021-10-15",
                hours: 80,
                rating: 4.5,
                skills: ["Pulizia", "Manutenzione", "Gestione rifiuti"],
                notes: "Molto efficiente e veloce.",
                availability: ["monday", "tuesday", "thursday", "friday", "sunday"],
                schedule: [
                    { day: "Lunedì", time: "22:00 - 02:00", role: "Pulizie notturne" },
                    { day: "Martedì", time: "22:00 - 02:00", role: "Pulizie notturne" },
                    { day: "Giovedì", time: "22:00 - 02:00", role: "Pulizie notturne" },
                    { day: "Venerdì", time: "22:00 - 02:00", role: "Pulizie notturne" },
                    { day: "Domenica", time: "22:00 - 02:00", role: "Pulizie notturne" }
                ]
            },
            {
                id: 12,
                name: "Sara Marino",
                surname: "Marino",
                position: "Cameriera",
                department: "servizio",
                status: "offline",
                shift: "morning",
                avatar: "https://source.unsplash.com/random/100x100/?waitress&2",
                email: "sara.marino@yourbite.it",
                phone: "+39 333 2223334",
                birthdate: "1997-01-28",
                hireDate: "2023-04-01",
                hours: 120,
                rating: 4.2,
                skills: ["Servizio clienti", "Gestione ordinazioni", "Mise en place"],
                notes: "Molto gentile e sorridente con i clienti.",
                availability: ["monday", "tuesday", "wednesday", "thursday", "friday"],
                schedule: [
                    { day: "Lunedì", time: "08:00 - 16:00", role: "Cameriera" },
                    { day: "Martedì", time: "08:00 - 16:00", role: "Cameriera" },
                    { day: "Mercoledì", time: "08:00 - 16:00", role: "Cameriera" },
                    { day: "Giovedì", time: "08:00 - 16:00", role: "Cameriera" },
                    { day: "Venerdì", time: "08:00 - 16:00", role: "Cameriera" }
                ]
            }
        ];

        // Funzioni di utilità
        function calculateAge(birthdate) {
            const birth = new Date(birthdate);
            const now = new Date();
            let age = now.getFullYear() - birth.getFullYear();
            if (now.getMonth() < birth.getMonth() || (now.getMonth() === birth.getMonth() && now.getDate() < birth.getDate())) {
                age--;
            }
            return age;
        }

        function formatDate(dateString) {
            const options = { year: 'numeric', month: '2-digit', day: '2-digit' };
            return new Date(dateString).toLocaleDateString('it-IT', options);
        }

        function calculateExperience(hireDate) {
            const hire = new Date(hireDate);
            const now = new Date();
            const diffTime = Math.abs(now - hire);
            const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
            
            if (diffDays < 30) {
                return `${diffDays} giorni`;
            } else if (diffDays < 365) {
                const months = Math.floor(diffDays / 30);
                return `${months} ${months === 1 ? 'mese' : 'mesi'}`;
            } else {
                const years = Math.floor(diffDays / 365);
                const remainingMonths = Math.floor((diffDays % 365) / 30);
                return `${years} ${years === 1 ? 'anno' : 'anni'}${remainingMonths > 0 ? ` e ${remainingMonths} ${remainingMonths === 1 ? 'mese' : 'mesi'}` : ''}`;
            }
        }

        // Inizializza la pagina
        document.addEventListener('DOMContentLoaded', function() {
            // Verifica se siamo sulla pagina personale
            if (document.getElementById('staffGrid')) {
                // Nascondi la notifica di connessione
                const connectionStatus = document.getElementById('connectionStatus');
                if (connectionStatus) {
                    connectionStatus.style.display = 'none';
                }
                
                // Carica lo staff
                loadStaff();
                
                // Configurazione dei filtri
                setupFilters();
                
                // Configurazione dei modali
                setupModals();
                
                // Event listeners per i pulsanti
                document.getElementById('addStaffBtn').addEventListener('click', showAddStaffModal);
                document.getElementById('viewScheduleBtn').addEventListener('click', showScheduleModal);
                
                // Setup ricerca
                document.getElementById('staffSearch').addEventListener('input', filterStaff);
                
                // Chart.js per il grafico nella dashboard (esempio)
                setupPerformanceChart();
            }
        });

        // Carica il personale nella grid
        function loadStaff(filters = {}) {
            const staffGrid = document.getElementById('staffGrid');
            if (!staffGrid) return;
            
            // Pulisci la griglia
            staffGrid.innerHTML = '';
            
            // Filtra lo staff in base ai filtri attivi
            let filteredStaff = [...staffData];
            
            if (filters.department && filters.department !== 'all') {
                filteredStaff = filteredStaff.filter(staff => staff.department === filters.department);
            }
            
            if (filters.status && filters.status !== 'all') {
                filteredStaff = filteredStaff.filter(staff => staff.status === filters.status);
            }
            
            if (filters.shift && filters.shift !== 'all') {
                filteredStaff = filteredStaff.filter(staff => staff.shift === filters.shift);
            }
            
            if (filters.search) {
                const searchTerm = filters.search.toLowerCase();
                filteredStaff = filteredStaff.filter(staff => 
                    staff.name.toLowerCase().includes(searchTerm) || 
                    staff.surname.toLowerCase().includes(searchTerm) || 
                    staff.position.toLowerCase().includes(searchTerm) ||
                    staff.department.toLowerCase().includes(searchTerm)
                );
            }
            
            // Se non ci sono risultati
            if (filteredStaff.length === 0) {
                staffGrid.innerHTML = `
                    <div style="grid-column: span 3; text-align: center; padding: 3rem;">
                        <i class="fas fa-search" style="font-size: 2rem; color: var(--text-light); margin-bottom: 1rem;"></i>
                        <h3>Nessun risultato trovato</h3>
                        <p>Prova a modificare i filtri o la ricerca.</p>
                    </div>
                `;
                return;
            }
            
            // Crea le card per ogni membro dello staff
            filteredStaff.forEach(staff => {
                const card = document.createElement('div');
                card.className = 'staff-card';
                card.dataset.staffId = staff.id;
                
                const statusClass = staff.status === 'active' ? '' : (staff.status === 'break' ? 'break' : 'offline');
                
                card.innerHTML = `
                    <div class="staff-card-header">
                        <div class="staff-status ${statusClass}"></div>
                        <img src="${staff.avatar}" alt="${staff.name}" class="staff-avatar">
                        <h3 class="staff-name">${staff.name} ${staff.surname}</h3>
                        <p class="staff-position">${staff.position}</p>
                    </div>
                    <div class="staff-card-body">
                        <div class="staff-stats">
                            <div class="staff-stat">
                                <div class="stat-label-card">Reparto</div>
                                <div class="stat-value-card">${capitalizeFirst(staff.department)}</div>
                            </div>
                            <div class="staff-stat">
                                <div class="stat-label-card">Turno</div>
                                <div class="stat-value-card">${getShiftName(staff.shift)}</div>
                            </div>
                            <div class="staff-stat">
                                <div class="stat-label-card">Valutazione</div>
                                <div class="stat-value-card">${staff.rating}/5</div>
                            </div>
                            <div class="staff-stat">
                                <div class="stat-label-card">Anzianità</div>
                                <div class="stat-value-card">${calculateExperience(staff.hireDate).split(' ')[0]} ${calculateExperience(staff.hireDate).split(' ')[1].substring(0, 1)}</div>
                            </div>
                        </div>
                    </div>
                    <div class="staff-card-footer">
                        <button class="staff-card-action view-staff" title="Visualizza dettagli">
                            <i class="fas fa-eye"></i>
                        </button>
                        <button class="staff-card-action edit-staff" title="Modifica">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="staff-card-action schedule-staff" title="Turni">
                            <i class="fas fa-calendar-alt"></i>
                        </button>
                        <button class="staff-card-action delete-staff" title="Elimina">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                `;
                
                staffGrid.appendChild(card);
                
                // Event listeners per i pulsanti delle card
                card.querySelector('.view-staff').addEventListener('click', () => showStaffDetails(staff.id));
                card.querySelector('.edit-staff').addEventListener('click', () => showEditStaffModal(staff.id));
                card.querySelector('.schedule-staff').addEventListener('click', () => showStaffSchedule(staff.id));
                card.querySelector('.delete-staff').addEventListener('click', () => confirmDeleteStaff(staff.id));
            });
        }

        // Helper per capitalizzare la prima lettera
        function capitalizeFirst(string) {
            return string.charAt(0).toUpperCase() + string.slice(1);
        }

        // Helper per ottenere il nome del turno
        function getShiftName(shift) {
            const shifts = {
                'morning': 'Mattina',
                'afternoon': 'Pomeriggio',
                'evening': 'Sera',
                'night': 'Notte'
            };
            return shifts[shift] || shift;
        }

        // Configurazione filtri
        function setupFilters() {
            // Gestione dropdown dei filtri
            document.querySelectorAll('.filter-dropdown').forEach(dropdown => {
                const button = dropdown.querySelector('.filter-btn');
                
                button.addEventListener('click', () => {
                    dropdown.classList.toggle('active');
                    // Chiudi altri dropdown aperti
                    document.querySelectorAll('.filter-dropdown.active').forEach(otherDropdown => {
                        if (otherDropdown !== dropdown) {
                            otherDropdown.classList.remove('active');
                        }
                    });
                });
                
                // Event listener per i clic fuori dal dropdown
                document.addEventListener('click', (e) => {
                    if (!dropdown.contains(e.target)) {
                        dropdown.classList.remove('active');
                    }
                });
                
                // Event listener per gli elementi del filtro
                dropdown.querySelectorAll('.filter-item').forEach(item => {
                    item.addEventListener('click', () => {
                        // Rimuovi la classe active da tutti gli elementi
                        dropdown.querySelectorAll('.filter-item').forEach(i => i.classList.remove('active'));
                        
                        // Aggiungi la classe active a questo elemento
                        item.classList.add('active');
                        
                        // Aggiorna il testo del pulsante
                        const filterType = dropdown.id.replace('Filter', '');
                        const filterValue = item.dataset.filter;
                        
                        // Applica il filtro
                        applyFilters();
                        
                        // Chiudi il dropdown
                        dropdown.classList.remove('active');
                    });
                });
            });
            
            // Event listener per la ricerca
            document.getElementById('staffSearch').addEventListener('input', applyFilters);
        }

        // Applica i filtri attuali
        function applyFilters() {
            const department = document.querySelector('#departmentFilter .filter-item.active').dataset.filter;
            const status = document.querySelector('#statusFilter .filter-item.active').dataset.filter;
            const shift = document.querySelector('#shiftFilter .filter-item.active').dataset.filter;
            const search = document.getElementById('staffSearch').value;
            
            loadStaff({
                department,
                status,
                shift,
                search
            });
        }

        // Filtra lo staff in base alla ricerca
        function filterStaff() {
            applyFilters();
        }

        // Configurazione modali
        function setupModals() {
            // Chiusura modale con click fuori o pulsante di chiusura
            document.querySelectorAll('.modal-overlay').forEach(modal => {
                modal.addEventListener('click', (e) => {
                    if (e.target === modal) {
                        closeModal(modal.id);
                    }
                });
                
                const closeBtn = modal.querySelector('.modal-close');
                if (closeBtn) {
                    closeBtn.addEventListener('click', () => closeModal(modal.id));
                }
            });
            
            // Pulsanti di chiusura generici
            document.getElementById('cancelStaffBtn').addEventListener('click', () => closeModal('staffModal'));
            document.getElementById('closeDetailsBtn').addEventListener('click', () => closeModal('staffDetailsModal'));
            document.getElementById('closeScheduleBtn').addEventListener('click', () => closeModal('scheduleModal'));
            
            // Configurazione tab nei modali
            document.querySelectorAll('.tab-item').forEach(tab => {
                tab.addEventListener('click', () => {
                    const tabId = tab.dataset.tab;
                    const tabsContainer = tab.closest('.tabs-container');
                    
                    // Rimuovi classe active da tutti i tab e contenuti
                    tabsContainer.querySelectorAll('.tab-item').forEach(t => t.classList.remove('active'));
                    tabsContainer.querySelectorAll('.tab-content').forEach(c => c.classList.remove('active'));
                    
                    // Attiva il tab corrente
                    tab.classList.add('active');
                    tabsContainer.querySelector(`#${tabId}Tab`).classList.add('active');
                });
            });
            
            // Salvataggio modifiche staff
            document.getElementById('saveStaffBtn').addEventListener('click', saveStaffChanges);
            
            // Modifica staff dal modale dettagli
            document.getElementById('editStaffBtn').addEventListener('click', () => {
                const staffId = document.getElementById('editStaffBtn').dataset.staffId;
                closeModal('staffDetailsModal');
                showEditStaffModal(staffId);
            });
        }

        // Mostra il modale per aggiungere un nuovo membro dello staff
        function showAddStaffModal() {
            const modal = document.getElementById('staffModal');
            document.getElementById('modalTitle').textContent = 'Aggiungi nuovo dipendente';
            
            // Resetta il form
            document.getElementById('staffForm').reset();
            document.getElementById('staffHireDate').valueAsDate = new Date();
            
            // Mostra il modale
            modal.classList.add('active');
            
            // Il pulsante salva salverà un nuovo membro dello staff
            document.getElementById('saveStaffBtn').dataset.mode = 'add';
        }

        // Mostra il modale per modificare un membro dello staff esistente
        function showEditStaffModal(staffId) {
            const staff = staffData.find(s => s.id === parseInt(staffId));
            if (!staff) return;
            
            const modal = document.getElementById('staffModal');
            document.getElementById('modalTitle').textContent = 'Modifica dipendente';
            
            // Popola il form con i dati dello staff
            document.getElementById('staffName').value = staff.name;
            document.getElementById('staffSurname').value = staff.surname;
            document.getElementById('staffEmail').value = staff.email;
            document.getElementById('staffPhone').value = staff.phone;
            document.getElementById('staffBirthdate').value = staff.birthdate;
            document.getElementById('staffPosition').value = staff.position.toLowerCase();
            document.getElementById('staffDepartment').value = staff.department;
            document.getElementById('staffHireDate').value = staff.hireDate;
            document.getElementById('staffNotes').value = staff.notes || '';
            
            // Imposta le disponibilità
            document.querySelectorAll('input[name="availability[]"]').forEach(checkbox => {
                checkbox.checked = staff.availability.includes(checkbox.value);
            });
            
            // Mostra il modale
            modal.classList.add('active');
            
            // Il pulsante salva modificherà un membro dello staff esistente
            document.getElementById('saveStaffBtn').dataset.mode = 'edit';
            document.getElementById('saveStaffBtn').dataset.staffId = staffId;
        }

        // Mostra i dettagli di un membro dello staff
        function showStaffDetails(staffId) {
            const staff = staffData.find(s => s.id === parseInt(staffId));
            if (!staff) return;
            
            const modal = document.getElementById('staffDetailsModal');
            
            // Popola i dettagli
            document.getElementById('detailsAvatar').src = staff.avatar;
            document.getElementById('detailsName').textContent = `${staff.name} ${staff.surname}`;
            document.getElementById('detailsPosition').textContent = staff.position;
            
            // Stato
            const statusBadge = document.getElementById('detailsStatus');
            statusBadge.textContent = staff.status === 'active' ? 'In servizio' : (staff.status === 'break' ? 'In pausa' : 'Fuori servizio');
            statusBadge.className = `staff-details-badge badge-${staff.status}`;
            
            // Informazioni personali
            document.getElementById('detailsEmail').textContent = staff.email;
            document.getElementById('detailsPhone').textContent = staff.phone;
            document.getElementById('detailsBirthdate').textContent = formatDate(staff.birthdate);
            document.getElementById('detailsAge').textContent = `${calculateAge(staff.birthdate)} anni`;
            
            // Informazioni lavorative
            document.getElementById('detailsDepartment').textContent = capitalizeFirst(staff.department);
            document.getElementById('detailsHireDate').textContent = formatDate(staff.hireDate);
            document.getElementById('detailsExperience').textContent = calculateExperience(staff.hireDate);
            document.getElementById('detailsHours').textContent = `${staff.hours} ore`;
            
            // Competenze
            const skillsContainer = document.getElementById('detailsSkills');
            skillsContainer.innerHTML = '';
            staff.skills.forEach(skill => {
                const badge = document.createElement('span');
                badge.className = 'skill-badge';
                badge.textContent = skill;
                skillsContainer.appendChild(badge);
            });
            
            // Note
            document.getElementById('detailsNotes').textContent = staff.notes || 'Nessuna nota disponibile';
            
            // Turni
            const scheduleTableBody = document.getElementById('scheduleTableBody');
            scheduleTableBody.innerHTML = '';
            
            staff.schedule.forEach(schedule => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${schedule.day}</td>
                    <td>${schedule.time}</td>
                    <td>${schedule.role}</td>
                `;
                scheduleTableBody.appendChild(row);
            });
            
            // Performance
            document.getElementById('detailsRating').textContent = `${staff.rating}/5`;
            document.querySelector('#performanceTab .performance-bar').style.width = `${staff.rating * 20}%`;
            
            // Grafico performance (esempio)
            setupStaffPerformanceChart(staff);
            
            // Calendario
            updateCalendar();
            
            // Aggiungi l'ID dello staff al pulsante modifica
            document.getElementById('editStaffBtn').dataset.staffId = staffId;
            
            // Mostra il modale
            modal.classList.add('active');
        }

        // Mostra gli orari di un membro dello staff
        function showStaffSchedule(staffId) {
            showScheduleModal();
            // Qui potresti selezionare il membro dello staff specifico nel calendario
        }

        // Conferma eliminazione di un membro dello staff
        function confirmDeleteStaff(staffId) {
            const staff = staffData.find(s => s.id === parseInt(staffId));
            if (!staff) return;
            
            if (confirm(`Sei sicuro di voler eliminare ${staff.name} ${staff.surname} dal personale?`)) {
                deleteStaff(staffId);
            }
        }

        // Elimina un membro dello staff
        function deleteStaff(staffId) {
            const index = staffData.findIndex(s => s.id === parseInt(staffId));
            if (index === -1) return;
            
            const staff = staffData[index];
            staffData.splice(index, 1);
            
            // Aggiorna la lista
            loadStaff();
            
            // Mostra notifica
            showToast('success', 'Dipendente eliminato', `${staff.name} ${staff.surname} è stato rimosso dal personale.`);
        }

        // Salva le modifiche al membro dello staff
        function saveStaffChanges() {
            const mode = document.getElementById('saveStaffBtn').dataset.mode;
            
            // Raccogli i dati dal form
            const formData = {
                name: document.getElementById('staffName').value,
                surname: document.getElementById('staffSurname').value,
                email: document.getElementById('staffEmail').value,
                phone: document.getElementById('staffPhone').value,
                birthdate: document.getElementById('staffBirthdate').value,
                position: document.getElementById('staffPosition').value,
                department: document.getElementById('staffDepartment').value,
                hireDate: document.getElementById('staffHireDate').value,
                notes: document.getElementById('staffNotes').value,
                availability: Array.from(document.querySelectorAll('input[name="availability[]"]:checked')).map(cb => cb.value)
            };
            
            // Valida i dati
            if (!formData.name || !formData.surname || !formData.email || !formData.position || !formData.department) {
                showToast('error', 'Errore', 'Compila tutti i campi obbligatori.');
                return;
            }
            
            if (mode === 'add') {
                // Aggiungi nuovo membro dello staff
                const newStaff = {
                    id: staffData.length > 0 ? Math.max(...staffData.map(s => s.id)) + 1 : 1,
                    ...formData,
                    status: 'active',
                    shift: 'morning',
                    avatar: `https://source.unsplash.com/random/100x100/?person&${Date.now()}`,
                    hours: 0,
                    rating: 4.0,
                    skills: [],
                    schedule: []
                };
                
                staffData.unshift(newStaff);
                showToast('success', 'Dipendente aggiunto', `${newStaff.name} ${newStaff.surname} è stato aggiunto al personale.`);
            } else if (mode === 'edit') {
                // Modifica membro dello staff esistente
                const staffId = parseInt(document.getElementById('saveStaffBtn').dataset.staffId);
                const staffIndex = staffData.findIndex(s => s.id === staffId);
                
                if (staffIndex !== -1) {
                    const updatedStaff = {
                        ...staffData[staffIndex],
                        ...formData
                    };
                    staffData[staffIndex] = updatedStaff;
                    showToast('success', 'Dipendente aggiornato', `I dati di ${updatedStaff.name} ${updatedStaff.surname} sono stati aggiornati.`);
                }
            }
            
            // Aggiorna la lista e chiudi il modale
            loadStaff();
            closeModal('staffModal');
        }

        // Mostra il modale dei turni
        function showScheduleModal() {
            const modal = document.getElementById('scheduleModal');
            modal.classList.add('active');
            
            // Popola la tabella dei turni settimanali
            populateWeeklySchedule();
            
            // Aggiorna il calendario mensile
            updateMonthlySchedule();
            
            // Popola la tabella delle assegnazioni
            populateAssignmentsTable();
        }

        // Popola la tabella dei turni settimanali
        function populateWeeklySchedule() {
            const table = document.getElementById('weeklyScheduleTable');
            const tbody = table.querySelector('tbody');
            tbody.innerHTML = '';
            
            // Crea una riga per ogni membro dello staff
            staffData.forEach(staff => {
                const row = document.createElement('tr');
                
                // Cella con il nome del dipendente
                const nameCell = document.createElement('td');
                nameCell.innerHTML = `
                    <div style="display:flex;align-items:center;gap:10px;">
                        <img src="${staff.avatar}" alt="${staff.name}" style="width:30px;height:30px;border-radius:50%;">
                        <span>${staff.name} ${staff.surname}</span>
                    </div>
                `;
                row.appendChild(nameCell);
                
                // Creo un oggetto per mappare i giorni con gli orari
                const scheduleByDay = {};
                staff.schedule.forEach(shift => {
                    const dayIndex = ['Lunedì', 'Martedì', 'Mercoledì', 'Giovedì', 'Venerdì', 'Sabato', 'Domenica'].indexOf(shift.day);
                    if (dayIndex !== -1) {
                        scheduleByDay[dayIndex] = shift;
                    }
                });
                
                // Aggiungi celle per ogni giorno della settimana
                for (let i = 0; i < 7; i++) {
                    const cell = document.createElement('td');
                    
                    if (scheduleByDay[i]) {
                        cell.innerHTML = `
                            <div style="font-size:0.85rem;font-weight:500;">${scheduleByDay[i].time}</div>
                            <div style="font-size:0.75rem;color:var(--text-light);">${scheduleByDay[i].role}</div>
                        `;
                        cell.style.backgroundColor = 'rgba(94, 96, 206, 0.1)';
                    } else {
                        cell.textContent = '-';
                        cell.style.color = 'var(--text-light)';
                    }
                    
                    row.appendChild(cell);
                }
                
                tbody.appendChild(row);
            });
        }

        // Aggiorna il calendario mensile
        function updateMonthlySchedule() {
            const calendarGrid = document.getElementById('monthlyScheduleGrid');
            if (!calendarGrid) return;
            
            // Rimuovi i giorni esistenti, mantieni gli header
            const headers = Array.from(calendarGrid.querySelectorAll('.calendar-day-header'));
            calendarGrid.innerHTML = '';
            headers.forEach(header => calendarGrid.appendChild(header));
            
            // Genera giorni del calendario (esempio semplificato)
            const days = 31; // Esempio per un mese di 31 giorni
            const firstDay = 2; // Esempio: 1° del mese è mercoledì (0=lunedì, 6=domenica)
            
            // Aggiungi giorni del calendario dopo gli header dei giorni della settimana
            for (let i = 0; i < firstDay; i++) {
                const dayCell = document.createElement('div');
                dayCell.className = 'calendar-day other-month';
                
                const day = document.createElement('span');
                day.className = 'day-number';
                day.textContent = 30 - firstDay + i + 1; // Giorni del mese precedente
                
                dayCell.appendChild(day);
                calendarGrid.appendChild(dayCell);
            }
            
            for (let i = 1; i <= days; i++) {
                const dayCell = document.createElement('div');
                dayCell.className = 'calendar-day';
                
                // Oggi
                if (i === 3) dayCell.classList.add('today');
                
                const day = document.createElement('span');
                day.className = 'day-number';
                day.textContent = i;
                
                const staffCount = document.createElement('span');
                staffCount.className = 'day-staff';
                
                // Esempio: calendario di presenze
                const staffCount = Math.floor(Math.random() * 4) + 5;
                staffCountEl.textContent = `${staffCount} dipendenti`;
                
                dayCell.appendChild(day);
                dayCell.appendChild(staffCountEl);
                dayCell.addEventListener('click', () => showDaySchedule(i));
                
                calendarGrid.appendChild(dayCell);
            }
            
            // Aggiungi eventuali giorni del mese successivo per completare l'ultima riga
            const totalCells = calendarGrid.querySelectorAll('.calendar-day').length;
            const cellsNeeded = 7 - (totalCells % 7);
            if (cellsNeeded !== 7) {
                for (let i = 1; i <= cellsNeeded; i++) {
                    const dayCell = document.createElement('div');
                    dayCell.className = 'calendar-day other-month';
                    
                    const day = document.createElement('span');
                    day.className = 'day-number';
                    day.textContent = i;
                    
                    dayCell.appendChild(day);
                    calendarGrid.appendChild(dayCell);
                                        dayCell.appendChild(day);
                    calendarGrid.appendChild(dayCell);
                }
            }
            
            // Aggiungi eventuali giorni del mese successivo per completare l'ultima riga
            const totalCells = calendarGrid.querySelectorAll('.calendar-day').length;
            const cellsNeeded = 7 - (totalCells % 7);
            if (cellsNeeded !== 7) {
                for (let i = 1; i <= cellsNeeded; i++) {
                    const dayCell = document.createElement('div');
                    dayCell.className = 'calendar-day other-month';
                    
                    const day = document.createElement('span');
                    day.className = 'day-number';
                    day.textContent = i;
                    
                    dayCell.appendChild(day);
                    calendarGrid.appendChild(dayCell);
                }
            }
        }

        // Mostra i dettagli di un giorno specifico del calendario
        function showDaySchedule(day) {
            showToast('info', 'Turni del giorno', `Hai selezionato il giorno ${day} maggio 2025. Qui potrai vedere e modificare i turni di questo giorno.`);
            // In una vera applicazione, qui apriresti un modale con i dettagli dei turni del giorno selezionato
        }

        // Popola la tabella delle assegnazioni dei turni
        function populateAssignmentsTable() {
            const table = document.getElementById('assignmentsTable');
            const tbody = table.querySelector('tbody');
            tbody.innerHTML = '';
            
            // Crea una riga per ogni assegnazione di turno
            staffData.forEach(staff => {
                staff.schedule.forEach((shift, index) => {
                    const row = document.createElement('tr');
                    
                    row.innerHTML = `
                        <td>
                            <div style="display:flex;align-items:center;gap:10px;">
                                <img src="${staff.avatar}" alt="${staff.name}" style="width:30px;height:30px;border-radius:50%;">
                                <span>${staff.name} ${staff.surname}</span>
                            </div>
                        </td>
                        <td>${shift.day}</td>
                        <td>${shift.time}</td>
                        <td>${shift.role}</td>
                        <td>
                            <button class="action-btn" onclick="editShift(${staff.id}, ${index})">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button class="action-btn" onclick="deleteShift(${staff.id}, ${index})">
                                <i class="fas fa-trash"></i>
                            </button>
                        </td>
                    `;
                    
                    tbody.appendChild(row);
                });
            });
        }

        // Modifica un turno
        function editShift(staffId, shiftIndex) {
            const staff = staffData.find(s => s.id === staffId);
            if (!staff || !staff.schedule[shiftIndex]) return;
            
            const shift = staff.schedule[shiftIndex];
            
            // In una vera applicazione, qui apriresti un modale per modificare il turno
            showToast('info', 'Modifica turno', `Modifica del turno di ${staff.name} ${staff.surname} - ${shift.day} ${shift.time}`);
        }

        // Elimina un turno
        function deleteShift(staffId, shiftIndex) {
            const staff = staffData.find(s => s.id === staffId);
            if (!staff || !staff.schedule[shiftIndex]) return;
            
            const shift = staff.schedule[shiftIndex];
            
            if (confirm(`Sei sicuro di voler eliminare il turno di ${staff.name} ${staff.surname} - ${shift.day} ${shift.time}?`)) {
                staff.schedule.splice(shiftIndex, 1);
                populateAssignmentsTable();
                populateWeeklySchedule();
                showToast('success', 'Turno eliminato', `Il turno di ${staff.name} ${staff.surname} - ${shift.day} ${shift.time} è stato eliminato.`);
            }
        }

        // Chiude un modale
        function closeModal(modalId) {
            const modal = document.getElementById(modalId);
            if (modal) {
                modal.classList.remove('active');
            }
        }

        // Mostra un toast di notifica
        function showToast(type, title, message) {
            const toastContainer = document.getElementById('toastContainer');
            
            const toast = document.createElement('div');
            toast.className = `toast ${type}`;
            
            let icon;
            switch (type) {
                case 'success':
                    icon = 'fa-check-circle';
                    break;
                case 'error':
                    icon = 'fa-exclamation-circle';
                    break;
                case 'warning':
                    icon = 'fa-exclamation-triangle';
                    break;
                default:
                    icon = 'fa-info-circle';
            }
            
            toast.innerHTML = `
                <div class="toast-icon">
                    <i class="fas ${icon}"></i>
                </div>
                <div class="toast-content">
                    <div class="toast-title">${title}</div>
                    <div class="toast-message">${message}</div>
                </div>
                <button class="toast-close">
                    <i class="fas fa-times"></i>
                </button>
            `;
            
            // Aggiungi il toast al container
            toastContainer.appendChild(toast);
            
            // Animazione di entrata
            setTimeout(() => {
                toast.style.animation = 'slideIn 0.3s forwards';
            }, 10);
            
            // Aggiungi event listener per il pulsante di chiusura
            toast.querySelector('.toast-close').addEventListener('click', () => {
                closeToast(toast);
            });
            
            // Chiudi automaticamente dopo 5 secondi
            setTimeout(() => {
                closeToast(toast);
            }, 5000);
        }

        // Chiude un toast
        function closeToast(toast) {
            toast.style.animation = 'slideOut 0.3s forwards';
            setTimeout(() => {
                toast.remove();
            }, 300);
        }

        // Configura il grafico delle performance generali
        function setupPerformanceChart() {
            const ctx = document.getElementById('performanceChart');
            if (!ctx) return;
            
            new Chart(ctx, {
                type: 'line',
                data: {
                    labels: ['Gennaio', 'Febbraio', 'Marzo', 'Aprile', 'Maggio'],
                    datasets: [{
                        label: 'Performance media',
                        data: [4.2, 4.3, 4.5, 4.6, 4.7],
                        fill: false,
                        borderColor: '#5e60ce',
                        tension: 0.1
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: false,
                            min: 3.5,
                            max: 5
                        }
                    }
                }
            });
        }

        // Configura il grafico delle performance di un membro dello staff specifico
        function setupStaffPerformanceChart(staff) {
            const ctx = document.getElementById('performanceChart');
            if (!ctx) return;
            
            // Genera dati di esempio basati sul rating dello staff
            const baseRating = staff.rating - 0.5;
            const monthlyData = [
                baseRating + Math.random() * 0.5,
                baseRating + Math.random() * 0.7,
                baseRating + Math.random() * 0.3,
                baseRating + Math.random() * 0.5,
                staff.rating
            ].map(val => Math.min(Math.max(val, 1), 5).toFixed(1));
            
            // Crea o aggiorna il grafico
            if (window.staffChart) {
                window.staffChart.destroy();
            }
            
            window.staffChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: ['Gennaio', 'Febbraio', 'Marzo', 'Aprile', 'Maggio'],
                    datasets: [{
                        label: 'Performance mensile',
                        data: monthlyData,
                        fill: false,
                        borderColor: '#5e60ce',
                        backgroundColor: 'rgba(94, 96, 206, 0.1)',
                        tension: 0.1
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: false,
                            min: 3,
                            max: 5,
                            ticks: {
                                stepSize: 0.5
                            }
                        }
                    }
                }
            });
        }

        // Funzioni per il calendario
        function updateCalendar() {
            const calendarGrid = document.getElementById('calendarGrid');
            if (!calendarGrid) return;
            
            // Genera giorni del calendario (esempio semplificato)
            const days = 31; // Esempio per un mese di 31 giorni
            const firstDay = 3; // Esempio: 1° del mese è mercoledì (0=lunedì, 6=domenica)
            
            // Rimuovi i giorni esistenti, mantieni gli header
            const headers = Array.from(calendarGrid.querySelectorAll('.calendar-day-header'));
            calendarGrid.innerHTML = '';
            headers.forEach(header => calendarGrid.appendChild(header));
            
            // Aggiungi giorni del calendario dopo gli header dei giorni della settimana
            for (let i = 0; i < firstDay; i++) {
                const dayCell = document.createElement('div');
                dayCell.className = 'calendar-day other-month';
                
                const day = document.createElement('span');
                day.className = 'day-number';
                day.textContent = 30 - firstDay + i + 1; // Giorni del mese precedente
                
                dayCell.appendChild(day);
                calendarGrid.appendChild(dayCell);
            }
            
            for (let i = 1; i <= days; i++) {
                const dayCell = document.createElement('div');
                dayCell.className = 'calendar-day';
                
                // Oggi
                if (i === 3) dayCell.classList.add('today');
                
                const day = document.createElement('span');
                day.className = 'day-number';
                day.textContent = i;
                
                const staffCount = document.createElement('span');
                staffCount.className = 'day-staff';
                
                // Esempio: giorni di lavoro
                if (i % 7 !== 0 && i % 7 !== 6) { // Non weekend
                    staffCount.textContent = `${Math.floor(Math.random() * 4) + 5} ore`;
                } else {
                    // Weekend
                    staffCount.textContent = 'Riposo';
                    staffCount.style.color = 'var(--accent-green)';
                }
                
                dayCell.appendChild(day);
                dayCell.appendChild(staffCount);
                
                calendarGrid.appendChild(dayCell);
            }
            
            // Aggiungi eventuali giorni del mese successivo
            const totalCells = calendarGrid.querySelectorAll('.calendar-day').length;
            const cellsNeeded = 7 - ((totalCells - headers.length) % 7);
            if (cellsNeeded !== 7) {
                for (let i = 1; i <= cellsNeeded; i++) {
                    const dayCell = document.createElement('div');
                    dayCell.className = 'calendar-day other-month';
                    
                    const day = document.createElement('span');
                    day.className = 'day-number';
                    day.textContent = i;
                    
                    dayCell.appendChild(day);
                    calendarGrid.appendChild(dayCell);
                }
            }
        }

        // Funzione per generare automaticamente i turni
        document.getElementById('autoScheduleBtn').addEventListener('click', function() {
            showToast('info', 'Generazione turni', 'Turni generati automaticamente per il mese corrente.');
            // In una vera implementazione, qui ci sarebbe un algoritmo che genera turni ottimali
            // basati su disponibilità, competenze e requisiti
        });

        // Funzione per aggiungere un nuovo turno
        document.getElementById('addShiftBtn').addEventListener('click', function() {
            // In una vera implementazione, qui apriresti un modale per creare un nuovo turno
            showToast('info', 'Nuovo turno', 'Funzionalità per aggiungere un nuovo turno a un dipendente.');
        });

        // Event listeners per i pulsanti di navigazione del calendario
        document.getElementById('prevMonthBtn').addEventListener('click', function() {
            // In una vera implementazione, cambieresti il mese visualizzato nel calendario
            document.getElementById('calendarMonth').textContent = 'Aprile 2025';
            showToast('info', 'Cambio mese', 'Visualizzazione cambiata ad Aprile 2025');
        });

        document.getElementById('nextMonthBtn').addEventListener('click', function() {
            // In una vera implementazione, cambieresti il mese visualizzato nel calendario
            document.getElementById('calendarMonth').textContent = 'Giugno 2025';
            showToast('info', 'Cambio mese', 'Visualizzazione cambiata a Giugno 2025');
        });

        // Event listeners per i pulsanti di navigazione della settimana
        document.getElementById('prevWeekBtn').addEventListener('click', function() {
            // In una vera implementazione, cambieresti la settimana visualizzata
            showToast('info', 'Cambio settimana', 'Visualizzazione cambiata alla settimana precedente');
        });

        document.getElementById('nextWeekBtn').addEventListener('click', function() {
            // In una vera implementazione, cambieresti la settimana visualizzata
            showToast('info', 'Cambio settimana', 'Visualizzazione cambiata alla settimana successiva');
        });

        // Event listeners per i pulsanti della programmazione mensile
        document.getElementById('prevMonthScheduleBtn').addEventListener('click', function() {
            // In una vera implementazione, cambieresti il mese visualizzato
            showToast('info', 'Cambio mese', 'Visualizzazione cambiata al mese precedente');
        });

        document.getElementById('nextMonthScheduleBtn').addEventListener('click', function() {
            // In una vera implementazione, cambieresti il mese visualizzato
            showToast('info', 'Cambio mese', 'Visualizzazione cambiata al mese successivo');
        });
    </script>
</body>
</html>
