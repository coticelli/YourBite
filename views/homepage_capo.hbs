<!DOCTYPE html>
<html lang="it">

<head>
    <link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/icona?family=Poppins:400,500,600,700&display=swap" rel="stylesheet">
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>YourBite - Support Dashboard</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        :root {
            --primary: #d62300;
            --secondary: #faaf18;
            --dark: #2d2d2d;
            --light: #ffffff;
            --gray: #f7f7f7;
            --text: #333333;
            --shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
            --radius: 12px;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            background-color: var(--gray);
            color: var(--text);
        }

        header {
  background: linear-gradient(to right, #ff7e00, #ff5100); /* Gradiente arancione in stile "food" */
  padding: 15px 20px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  display: flex;
  align-items: center;
  justify-content: space-between;
}
/* Stili specifici per l'admin */
body.admin-role header {
  background: linear-gradient(to right, #3a5bd9, #2541b2); /* Blu per admin */
}

body.admin-role .user-role-badge {
  color: #3a5bd9;
}

/* Stili specifici per il capo */
body.capo-role header {
  background: linear-gradient(to right, #ff7e00, #ff5100); /* Arancione per capo */
}

body.capo-role .user-role-badge {
  color: #ff5100;
}

        .logo {
  width: 180px; /* Dimensione aumentata */
  height: auto;
  transition: transform 0.3s ease;
}

.logo:hover {
  transform: scale(1.05); /* Leggero effetto hover */
}

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 20px;
        }

        .content {
            margin: 30px auto;
        }

        .navbar {
            background-color: var(--light);
            border-radius: var(--radius);
            box-shadow: var(--shadow);
            padding: 15px 20px;
            margin-bottom: 25px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .navbar-brand {
            font-weight: bold;
            color: var(--primary);
            font-size: 20px;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .navbar-nav {
            display: flex;
            list-style: none;
        }

        .nav-item {
            margin-right: 15px;
        }

        .nav-link {
            color: var(--text);
            text-decoration: none;
            padding: 8px 12px;
            border-radius: var(--radius);
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .nav-link.active {
            background-color: var(--primary);
            color: var(--light);
        }

        .btn {
            border: none;
            padding: 8px 16px;
            border-radius: var(--radius);
            cursor: pointer;
            font-weight: 500;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .btn-outline-danger {
            border: 1px solid var(--primary);
            background-color: transparent;
            color: var(--primary);
        }

        .btn-outline-danger:hover {
            background-color: var(--primary);
            color: var(--light);
        }

        .welcome-message {
            font-size: 22px;
            color: var(--dark);
        }

        .text-primary {
            color: var(--primary);
        }

        .chat-container {
            background-color: var(--light);
            border-radius: var(--radius);
            overflow: hidden;
            box-shadow: var(--shadow);
            height: 70vh;
            display: flex;
            border: 1px solid rgba(0, 0, 0, 0.1);
        }

        .chat-sidebar {
            width: 300px;
            border-right: 1px solid rgba(0, 0, 0, 0.1);
            overflow-y: auto;
            padding: 15px;
            background-color: var(--gray);
        }

        .chat-main {
            flex-grow: 1;
            display: flex;
            flex-direction: column;
        }

        .chat-header {
            padding: 15px 20px;
            border-bottom: 1px solid rgba(0, 0, 0, 0.1);
            display: flex;
            align-items: center;
        }

        .message-list {
            flex-grow: 1;
            overflow-y: auto;
            padding: 20px;
            display: flex;
            flex-direction: column;
            background-color: var(--gray);
        }

        .chat-input {
            padding: 15px 20px;
            border-top: 1px solid rgba(0, 0, 0, 0.1);
            display: flex;
            gap: 10px;
        }

        .form-control {
            flex: 1;
            padding: 12px 15px;
            border: 1px solid rgba(0, 0, 0, 0.1);
            border-radius: var(--radius);
            outline: none;
        }

        .chat-request {
            padding: 12px;
            margin-bottom: 10px;
            border-radius: var(--radius);
            cursor: pointer;
            transition: all 0.3s ease;
            border: 1px solid rgba(0, 0, 0, 0.1);
            background-color: var(--light);
        }

        .chat-request:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow);
        }

        .chat-request.active {
            background-color: rgba(214, 35, 0, 0.1);
            border-left: 4px solid var(--primary);
        }

        .message {
            padding: 12px 16px;
            border-radius: var(--radius);
            margin-bottom: 15px;
            max-width: 80%;
            position: relative;
            animation: fadeIn 0.3s ease-in-out;
            box-shadow: var(--shadow);
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(10px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .user-message {
            background-color: var(--gray);
            align-self: flex-start;
            color: var(--text);
        }

        .operator-message {
            background-color: var(--primary);
            align-self: flex-end;
            margin-left: auto;
            color: var(--light);
        }

        .system-message {
            background-color: var(--light);
            align-self: center;
            text-align: center;
            font-style: italic;
            color: #777;
            padding: 6px 15px;
            font-size: 0.85rem;
            box-shadow: none;
            border: 1px dashed rgba(0, 0, 0, 0.1);
        }

        .chat-request .avatar {
            width: 38px;
            height: 38px;
            border-radius: 50%;
            display: flex;
            justify-content: center;
            align-items: center;
            margin-right: 15px;
            font-weight: bold;
            color: var(--light);
        }

        .user-avatar {
            background-color: var(--secondary);
        }

        .operator-avatar {
            background-color: var(--primary);
        }


        .chat-request .timestamp {
            font-size: 0.8rem;
            color: #777;
        }

        .chat-request.new-request {
            background-color: rgba(250, 175, 24, 0.2);
            border-left: 4px solid var(--secondary);
            animation: pulse 1.5s infinite;
        }

        /* Add these styles to your existing CSS */
        #deleteMessagesBtn {
            padding: 4px 10px;
            background-color: transparent;
            color: #d62300;
            border: 1px solid #d62300;
            border-radius: 8px;
            font-size: 0.8rem;
            display: flex;
            align-items: center;
            gap: 5px;
            transition: all 0.2s ease;
        }

        #deleteMessagesBtn:hover {
            background-color: #d62300;
            color: white;
        }

        .system-message i {
            margin-right: 5px;
        }

        .welcome-screen {
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            height: 100%;
            color: #777;
            background-color: var(--gray);
            text-align: center;
            padding: 20px;
        }

        .welcome-screen i {
            font-size: 4rem;
            color: var(--secondary);
            margin-bottom: 20px;
        }

        .timestamp {
            font-size: 0.7rem;
            margin-top: 4px;
            text-align: right;
        }

        .user-message .timestamp {
            color: #777;
        }

        .operator-message .timestamp {
            color: rgba(255, 255, 255, 0.8);
        }

        .typing-indicator {
            display: flex;
            align-items: center;
            font-style: italic;
            color: #777;
            margin-bottom: 15px;
            margin-left: 10px;
        }

        .typing-indicator::before {
            content: '';
            width: 10px;
            height: 10px;
            margin-right: 8px;
            background-color: #777;
            border-radius: 50%;
            animation: pulse 1.5s infinite;
        }

        .new-request {
            background-color: rgba(250, 175, 24, 0.2);
            border-left: 4px solid var(--secondary);
            animation: pulse 1.5s infinite;
        }

        .avatar {
            width: 38px;
            height: 38px;
            border-radius: 50%;
            display: flex;
            justify-content: center;
            align-items: center;
            margin-right: 15px;
            font-weight: bold;
            color: var(--light);
        }

        .user-avatar {
            background-color: var(--secondary);
        }

        .operator-avatar {
            background-color: var(--primary);
        }

        #sidebar-toggle {
            display: none;
        }

        @keyframes pulse {
            0% {
                opacity: 1;
            }

            50% {
                opacity: 0.6;
            }

            100% {
                opacity: 1;
            }
        }

        /* Responsive design */
        @media (max-width: 768px) {
            .chat-sidebar {
                position: absolute;
                left: -300px;
                height: 70vh;
                z-index: 10;
                transition: left 0.3s ease;
                background-color: var(--light);
            }

            .chat-sidebar.show {
                left: 0;
                box-shadow: 2px 0 10px rgba(0, 0, 0, 0.1);
            }

            #sidebar-toggle {
                display: block;
                position: absolute;
                left: 10px;
                z-index: 11;
            }

            .chat-header {
                padding-left: 50px;
            }

            .message {
                max-width: 90%;
            }
        }

.header-nav {
  display: flex;
  gap: 20px;
}

.header-nav a {
  color: white;
  text-decoration: none;
  font-weight: 500;
  padding: 8px 15px;
  border-radius: 20px;
  transition: background-color 0.3s;
}

.header-nav a:hover {
  background-color: rgba(255, 255, 255, 0.2);
}

/* Badge per indicare utente admin/capo */
.user-role-badge {
  background-color: white;
  color: #ff5100;
  padding: 4px 12px;
  border-radius: 20px;
  font-weight: bold;
  font-size: 14px;
  margin-left: 10px;
}
        /* Add these styles to your existing CSS */
        #deleteAllConversationsBtn {
            background-color: transparent;
            color: #d62300;
            border: 1px solid #d62300;
            transition: all 0.2s ease;
        }

        #deleteAllConversationsBtn:hover {
            background-color: #d62300;
            color: white;
            box-shadow: 0 2px 5px rgba(214, 35, 0, 0.3);
        }

        /* Add a little animation for the loading spinner */
        .loading-spinner {
            border: 3px solid rgba(0, 0, 0, 0.1);
            border-top: 3px solid var(--primary);
            border-radius: 50%;
            width: 30px;
            height: 30px;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% {
                transform: rotate(0deg);
            }

            100% {
                transform: rotate(360deg);
            }
        }
         .logo-img {
            height: 120px;
            /* Dimensione ridotta dell'immagine del logo */
            width: auto;
            object-fit: contain;
            vertical-align: middle;
        }
    </style>
</head>

<body>
    <!-- Header Section -->
    <header>
  <div class="logo-container">
    <img src="/public/img/logo.png" class="logo-img">
    <h1 class="header-title">YourBite</h1>
  </div>
  
  <div class="header-nav">
    <a href="/dashboard">Dashboard</a>
    <a href="/orders">Ordini</a>
    <a href="/menu">Menu</a>
    <a href="/customers">Clienti</a>
    <a href="/settings">Impostazioni</a>
    
    <!-- Badge per indicare ruolo utente -->
    <span class="user-role-badge">
      <!-- Mostra 'Admin' o 'Capo' in base al ruolo -->
      <?php echo $userRole === 'admin' ? 'Admin' : 'Capo'; ?>
    </span>
  </div>
</header>

    <!-- Main Content -->
    <main class="content container">
        <!-- Navigation Bar -->
        <nav class="navbar">
            <div class="navbar-brand">
                <i class="fas fa-headset"></i> Support Dashboard
            </div>
            <ul class="navbar-nav">
                <li class="nav-item">
                    <a class="nav-link active" href="/support">
                        <i class="fas fa-home"></i> Dashboard
                    </a>
                </li>
            </ul>
            <button id="deleteAllConversationsBtn" class="btn btn-outline-danger"
                style="margin-left: 10px; font-size: 0.8rem;">
                <i class="fas fa-dumpster"></i> Elimina Tutte le Conversazioni
            </button>
            <button class="btn btn-outline-danger" id="logoutBtn">
                <i class="fas fa-sign-out-alt"></i> Logout
            </button>
        </nav>

        <!-- Welcome Message -->
        <div style="display: flex; align-items: center; margin-bottom: 20px;">
            <i class="fas fa-user-headset" style="color: var(--primary); margin-right: 10px;"></i>
            <h2 class="welcome-message">Benvenuto Operatore: <span class="text-primary">{{username}}</span></h2>
        </div>

        <!-- Chat Interface -->
        <div class="chat-container">
            <!-- Mobile toggle button -->
            <button id="sidebar-toggle" class="btn">
                <i class="fas fa-bars"></i>
            </button>

            <!-- Sidebar with active chats -->
            <div class="chat-sidebar" id="chatSidebar">
                <h5 style="margin-bottom: 15px;"><i class="fas fa-comments" style="margin-right: 8px;"></i>Richieste di
                    Supporto</h5>
                <div id="activeChats">
                    <div style="text-align: center; color: #777; padding: 15px 0;">
                        <i class="fas fa-coffee" style="font-size: 1.5rem; margin-bottom: 10px;"></i>
                        <p>In attesa di richieste...</p>
                    </div>
                </div>
            </div>

            <!-- Main chat area -->
            <div class="chat-main">
                <!-- Initial welcome screen -->
                <div class="welcome-screen">
                    <i class="fas fa-comment-dots"></i>
                    <h3>Centro Assistenza YourBite</h3>
                    <p>Seleziona una chat dalla sidebar per iniziare ad assistere i clienti.</p>
                </div>
            </div>
        </div>
    </main>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const activeChats = document.getElementById('activeChats');
            const chatMain = document.querySelector('.chat-main');
            let socket;
            let currentRoom = null;

            // Load existing chats from database
            loadExistingChats();

            // Load Socket.IO library
            loadSocketIO();

            // Script to ensure username is displayed in welcome message
            document.addEventListener('DOMContentLoaded', function () {
                // Function to update username in welcome message
                function updateUsernameDisplay(username) {
                    // Find all possible username display elements across the different homepages
                    const usernameElements = [
                        document.getElementById('username'),                        // homepage_cliente
                        document.querySelector('.welcome-message span'),            // homepage_admin
                        document.querySelector('.text-primary')                     // homepage_capo
                    ];

                    // Update each element if it exists and doesn't already have content
                    usernameElements.forEach(element => {
                        if (element && (!element.textContent || element.textContent.trim() === '{{username}}')) {
                            element.textContent = username;
                        }
                    });
                }

                // First check if username is available in a data attribute or window variable
                const usernameFromPage = document.body.dataset.username;

                if (usernameFromPage) {
                    updateUsernameDisplay(usernameFromPage);
                } else {
                    // If not found in the page, fetch from API
                    fetch('/api/user/info', {
                        method: 'GET',
                        credentials: 'include'
                    })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success && data.user && data.user.username) {
                                // Update username elements
                                updateUsernameDisplay(data.user.username);

                                // Store username in localStorage for future page loads
                                localStorage.setItem('username', data.user.username);
                            } else if (localStorage.getItem('username')) {
                                // Fallback to localStorage if API fails
                                updateUsernameDisplay(localStorage.getItem('username'));
                            }
                        })
                        .catch(error => {
                            console.error('Error fetching user info:', error);

                            // Fallback to localStorage if available
                            if (localStorage.getItem('username')) {
                                updateUsernameDisplay(localStorage.getItem('username'));
                            }
                        });
                }
            });

            // Add event listener for logout button
            document.getElementById('logoutBtn').addEventListener('click', function () {
                if (confirm('Sei sicuro di voler effettuare il logout?')) {
                    window.location.href = '/logout';
                }
            });

            const deleteAllBtn = document.getElementById('deleteAllConversationsBtn');
            if (deleteAllBtn) {
                deleteAllBtn.addEventListener('click', deleteAllConversations);
            }
            // First, make sure the Socket.IO client library is included
            function loadSocketIO() {
                if (typeof io === 'undefined') {
                    // Socket.IO client library is not loaded - add it dynamically
                    const script = document.createElement('script');
                    script.src = '/socket.io/socket.io.js';
                    script.onload = connectToSocketServer;
                    document.head.appendChild(script);
                } else {
                    // Socket.IO is already loaded
                    connectToSocketServer();
                }
            }
            // Function to delete all conversations
            function deleteAllConversations() {
                // Show confirmation dialog
                if (!confirm('⚠️ ATTENZIONE: Stai per eliminare TUTTE le conversazioni di supporto. Questa azione non può essere annullata. Sei sicuro di voler procedere?')) {
                    return; // User cancelled
                }

                // Double confirm for safety
                if (!confirm('Conferma ancora una volta: Tutti i messaggi e le conversazioni saranno eliminati definitivamente.')) {
                    return; // User cancelled on second prompt
                }

                // Show loading state
                const mainContent = document.querySelector('.chat-main');
                mainContent.innerHTML = `
        <div class="welcome-screen">
            <i class="fas fa-spinner fa-spin" style="color: var(--primary);"></i>
            <h3>Eliminazione in corso...</h3>
            <p>Stiamo eliminando tutte le conversazioni dal sistema.</p>
        </div>
    `;

                // Also show loading in sidebar
                const activeChatsList = document.getElementById('activeChats');
                activeChatsList.innerHTML = `
        <div style="text-align: center; color: #777; padding: 15px 0;">
            <div class="loading-spinner" style="width: 30px; height: 30px; margin: 0 auto 10px;"></div>
            <p>Eliminazione conversazioni...</p>
        </div>
    `;

                // Send delete request to server
                fetch('/api/chat/all-conversations', {
                    method: 'DELETE',
                    credentials: 'include',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Errore durante l\'eliminazione delle conversazioni');
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.success) {
                            // Update UI to show success
                            mainContent.innerHTML = `
                <div class="welcome-screen">
                    <i class="fas fa-check-circle" style="color: green;"></i>
                    <h3>Eliminazione completata</h3>
                    <p>${data.deleted} conversazioni sono state eliminate con successo.</p>
                    <p>Il sistema è pronto per nuove richieste di supporto.</p>
                </div>
            `;

                            // Clear the sidebar
                            activeChatsList.innerHTML = `
                <div style="text-align: center; color: #777; padding: 15px 0;">
                    <i class="fas fa-coffee" style="font-size: 1.5rem; margin-bottom: 10px;"></i>
                    <p>In attesa di richieste...</p>
                </div>
            `;

                            // Reset current room
                            currentRoom = null;

                            // Log to console
                            console.log(`[${new Date().toISOString()}] All conversations deleted. Count: ${data.deleted}`);
                        } else {
                            throw new Error(data.error || 'Operazione non riuscita');
                        }
                    })
                    .catch(error => {
                        console.error('Error deleting all conversations:', error);
                        mainContent.innerHTML = `
            <div class="welcome-screen">
                <i class="fas fa-exclamation-triangle" style="color: var(--primary);"></i>
                <h3>Errore</h3>
                <p>${error.message || 'Si è verificato un errore durante l\'eliminazione delle conversazioni'}</p>
                <button class="btn btn-outline-danger" onclick="deleteAllConversations()">
                    <i class="fas fa-redo"></i> Riprova
                </button>
            </div>
        `;

                        // Restore sidebar
                        loadExistingChats();
                    });
            }
            // Connect to your existing Socket.IO server
            function connectToSocketServer() {
                console.log("Connecting to Socket.IO server...");
                socket = io();

                // Join as operator to the support_staff room
                socket.emit('operatorJoin', {
                    userId: '{{user.id}}',
                    username: '{{user.username}}',
                    tipo: '{{user.tipo}}'
                });

                // Listen for new support requests coming from clients
                socket.on('new_support_request', function (data) {
                    console.log("New support request received:", data);
                    addChatRequest(data.roomId, data.user);

                    // Optionally play a sound notification
                    const audio = new Audio('/sound/notification.mp3');
                    audio.play().catch(e => console.log("Sound notification failed:", e));
                });

                // Listen for incoming messages
                socket.on('message', function (message) {
                    console.log("Message received:", message);

                    // If this message is for the currently open chat, add it to the UI
                    if (currentRoom === message.roomId) {
                        // Don't add the message if it's from the operator (we add it optimistically)
                        if (message.sender !== '{{user.id}}') {
                            addMessage(message);
                        }
                    } else {
                        // Highlight the chat request in the sidebar to indicate new message
                        const chatRequest = document.querySelector(`.chat-request[data-room-id="${message.roomId}"]`);
                        if (chatRequest) {
                            chatRequest.classList.add('new-request');
                            // Update the message preview
                            const previewEl = chatRequest.querySelector('div:nth-child(3)');
                            if (previewEl) {
                                previewEl.textContent = message.content;
                            }
                        } else {
                            // This is a new chat we haven't seen yet - need to fetch user info
                            fetchUserInfo(message.sender).then(user => {
                                if (user) {
                                    addChatRequest(message.roomId, {
                                        userId: message.sender,
                                        username: message.senderName
                                    }, message.content);
                                }
                            });
                        }
                    }
                });

                // Handle connection events
                socket.on('connect', function () {
                    console.log("Connected to WebSocket server!");
                });

                socket.on('disconnect', function () {
                    console.log("Disconnected from WebSocket server!");
                });

                socket.on('connect_error', function (error) {
                    console.error("Connection error:", error);
                });
            }

            // Load existing chats from database
            function loadExistingChats() {
                // Replace loading indicator
                activeChats.innerHTML = `
            <div style="text-align: center; padding: 15px 0;">
                <div class="loading-spinner" style="width: 20px; height: 20px; margin: 0 auto 10px;"></div>
                <p>Caricamento chat...</p>
            </div>
        `;

                // Query unique chat rooms from chat_messages table
                fetch('/api/chat/rooms', {
                    method: 'GET',
                    credentials: 'include'
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.rooms && data.rooms.length > 0) {
                            activeChats.innerHTML = ''; // Clear loading indicator

                            // Add each chat room to the sidebar
                            data.rooms.forEach(room => {
                                addChatRequest(room.room_id, {
                                    userId: room.user_id,
                                    username: room.sender_name
                                }, room.last_message);
                            });
                        } else {
                            // No active chats
                            activeChats.innerHTML = `
                    <div style="text-align: center; color: #777; padding: 15px 0;">
                        <i class="fas fa-coffee" style="font-size: 1.5rem; margin-bottom: 10px;"></i>
                        <p>In attesa di richieste...</p>
                    </div>
                `;
                        }
                    })
                    .catch(error => {
                        console.error('Error loading chat rooms:', error);
                        activeChats.innerHTML = `
                <div style="text-align: center; color: #777; padding: 15px 0;">
                    <i class="fas fa-exclamation-triangle" style="color: var(--primary); font-size: 1.5rem; margin-bottom: 10px;"></i>
                    <p>Errore nel caricamento delle chat.</p>
                </div>
            `;
                    });
            }

            // Add a chat request to the sidebar
            function addChatRequest(roomId, user, lastMessage = null) {
                // Check if this chat request already exists
                if (document.querySelector(`.chat-request[data-room-id="${roomId}"]`)) {
                    return; // Already exists
                }

                // Clear the "no requests" message if it exists
                const noRequestsMsg = activeChats.querySelector('div[style*="text-align: center"]');
                if (noRequestsMsg) {
                    activeChats.innerHTML = '';
                }

                // Create chat request element
                const chatRequest = document.createElement('div');
                chatRequest.className = 'chat-request new-request';
                chatRequest.dataset.roomId = roomId;
                chatRequest.dataset.userId = user.userId;

                // Format timestamp
                const now = new Date();
                const formattedTime = now.toLocaleTimeString('it-IT', {
                    hour: '2-digit',
                    minute: '2-digit'
                });

                chatRequest.innerHTML = `
            <div style="font-weight: bold;">${user.username}</div>
            <div style="font-size: 0.8rem; color: #777;">
                <i class="far fa-clock"></i> ${formattedTime}
            </div>
            <div style="margin-top: 5px; font-size: 0.9rem; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">
                ${lastMessage || 'Nuova richiesta di supporto'}
            </div>
        `;

                // Add click event to open this chat
                chatRequest.addEventListener('click', function () {
                    // Open the chat interface
                    openChat(roomId, user);

                    // Update UI state
                    document.querySelectorAll('.chat-request').forEach(el => {
                        el.classList.remove('active', 'new-request');
                    });
                    this.classList.add('active');
                });

                // Add to sidebar
                activeChats.appendChild(chatRequest);
            }

            // Open a chat when clicked in the sidebar
            // Modify the openChat function to include a delete button in the chat header
            function openChat(roomId, user) {
                currentRoom = roomId;

                // Join this specific room
                if (socket) {
                    socket.emit('operatorJoin', {
                        userId: '{{user.id}}',
                        username: '{{user.username}}',
                        roomId: roomId
                    });
                }

                // Update UI with chat interface
                chatMain.innerHTML = `
        <div class="chat-header">
            <div class="avatar user-avatar">${user.username.charAt(0).toUpperCase()}</div>
            <div style="flex-grow: 1;">
                <div style="font-weight: bold;">${user.username}</div>
                <div style="font-size: 0.8rem; color: #777;">Cliente</div>
            </div>
            <button id="deleteMessagesBtn" class="btn btn-outline-danger" style="font-size: 0.8rem;">
                <i class="fas fa-trash-alt"></i> Elimina Messaggi
            </button>
        </div>
        <div class="message-list" id="messageList">
            <div class="system-message">
                Inizio della conversazione con ${user.username}
            </div>
        </div>
        <div class="chat-input">
            <input type="text" class="form-control" id="messageInput" placeholder="Scrivi un messaggio...">
            <button class="btn btn-outline-danger" id="sendBtn">
                <i class="fas fa-paper-plane"></i> Invia
            </button>
        </div>
    `;

                // Get UI elements
                const messageList = document.getElementById('messageList');
                const messageInput = document.getElementById('messageInput');
                const sendBtn = document.getElementById('sendBtn');
                const deleteMessagesBtn = document.getElementById('deleteMessagesBtn');

                // Load chat history
                loadChatHistory(roomId, messageList);

                // Add event listeners for sending messages
                messageInput.addEventListener('keypress', function (e) {
                    if (e.key === 'Enter' && this.value.trim()) {
                        sendMessage(this.value.trim());
                        this.value = '';
                    }
                });

                sendBtn.addEventListener('click', function () {
                    if (messageInput.value.trim()) {
                        sendMessage(messageInput.value.trim());
                        messageInput.value = '';
                    }
                });

                // Add event listener for delete messages button
                deleteMessagesBtn.addEventListener('click', function () {
                    deleteAllMessages(roomId);
                });

                // Focus input field
                messageInput.focus();
            }

            // Load chat history from the server
            function loadChatHistory(roomId, messageList) {
                // Show loading indicator
                messageList.innerHTML = `
            <div style="display: flex; justify-content: center; padding: 20px;">
                <div class="loading-spinner" style="width: 30px; height: 30px;"></div>
            </div>
        `;

                // Fetch chat history from your existing endpoint
                fetch(`/api/chat/history/${roomId}`, {
                    method: 'GET',
                    credentials: 'include'
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Failed to load chat history');
                        }
                        return response.json();
                    })
                    .then(messages => {
                        // Clear loading indicator
                        messageList.innerHTML = `
                <div class="system-message">
                    Inizio della conversazione
                </div>
            `;

                        // Add each message to the UI
                        if (messages && messages.length > 0) {
                            messages.forEach(message => {
                                const isClient = message.sender_id === message.room_id.split('_')[1];

                                const messageEl = document.createElement('div');
                                messageEl.className = isClient ? 'message user-message' : 'message operator-message';

                                const time = new Date(message.timestamp);
                                const formattedTime = time.toLocaleTimeString('it-IT', {
                                    hour: '2-digit',
                                    minute: '2-digit'
                                });

                                messageEl.innerHTML = `
                        ${message.message}
                        <div class="timestamp">${formattedTime}</div>
                    `;

                                messageList.appendChild(messageEl);
                            });

                            // Scroll to the bottom
                            messageList.scrollTop = messageList.scrollHeight;
                        }
                    })
                    .catch(error => {
                        console.error('Error loading chat history:', error);
                        messageList.innerHTML = `
                <div class="system-message" style="color: #d62300;">
                    <i class="fas fa-exclamation-triangle"></i> Errore nel caricamento della cronologia.
                </div>
            `;
                    });
            }

            // Send a message to the current chat
            function sendMessage(message) {
                if (!socket || !currentRoom || !message.trim()) return;

                const timestamp = new Date().toISOString();

                // Create message data
                const messageData = {
                    roomId: currentRoom,
                    sender: '{{user.id}}',
                    senderName: '{{user.username}}',
                    content: message,
                    timestamp: timestamp
                };

                // Add message to UI immediately (optimistic UI update)
                const messageList = document.getElementById('messageList');
                const messageEl = document.createElement('div');
                messageEl.className = 'message operator-message';

                const formattedTime = new Date().toLocaleTimeString('it-IT', {
                    hour: '2-digit',
                    minute: '2-digit'
                });

                messageEl.innerHTML = `
            ${message}
            <div class="timestamp">${formattedTime}</div>
        `;

                messageList.appendChild(messageEl);
                messageList.scrollTop = messageList.scrollHeight;

                // Send via Socket.IO
                socket.emit('message', messageData);
            }

            // Helper function to add a received message to the UI
            // Update the addMessage function to handle system messages
            function addMessage(message) {
                const messageList = document.getElementById('messageList');
                if (!messageList) return;

                // Check if this is a system message
                if (message.sender === 'system' || message.isSystem) {
                    const systemMsgEl = document.createElement('div');
                    systemMsgEl.className = 'system-message';
                    systemMsgEl.innerHTML = message.content;
                    messageList.appendChild(systemMsgEl);
                    messageList.scrollTop = messageList.scrollHeight;
                    return;
                }

                const isFromClient = message.sender !== '{{user.id}}';

                const messageEl = document.createElement('div');
                messageEl.className = isFromClient ? 'message user-message' : 'message operator-message';

                const time = new Date(message.timestamp);
                const formattedTime = time.toLocaleTimeString('it-IT', {
                    hour: '2-digit',
                    minute: '2-digit'
                });

                messageEl.innerHTML = `
        ${message.content}
        <div class="timestamp">${formattedTime}</div>
    `;

                messageList.appendChild(messageEl);
                messageList.scrollTop = messageList.scrollHeight;
            }

            // Helper function to fetch user info (if needed)
            function fetchUserInfo(userId) {
                return fetch(`/api/user/${userId}`, {
                    credentials: 'include'
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.user) {
                            return data.user;
                        }
                        return null;
                    })
                    .catch(error => {
                        console.error('Error fetching user info:', error);
                        return null;
                    });
            }

            // Initialize everything
            loadSocketIO();
            loadExistingChats();
        });
        function deleteAllMessages(roomId) {
            if (!confirm('Sei sicuro di voler eliminare tutti i messaggi di questa chat? Questa azione non può essere annullata.')) {
                return; // User cancelled
            }

            // Show loading state
            const messageList = document.getElementById('messageList');
            if (messageList) {
                messageList.innerHTML = `
            <div class="system-message">
                <i class="fas fa-spinner fa-spin"></i> Eliminazione messaggi in corso...
            </div>
        `;
            }

            // Send delete request to server
            fetch(`/api/chat/messages/${roomId}`, {
                method: 'DELETE',
                credentials: 'include',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Errore durante l\'eliminazione dei messaggi');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        // Clear the messages from UI
                        if (messageList) {
                            messageList.innerHTML = `
                    <div class="system-message">
                        <i class="fas fa-check-circle"></i> Tutti i messaggi sono stati eliminati.
                    </div>
                `;
                        }

                        // Update the chat preview in sidebar
                        const chatRequest = document.querySelector(`.chat-request[data-room-id="${roomId}"]`);
                        if (chatRequest) {
                            const previewEl = chatRequest.querySelector('div:nth-child(3)');
                            if (previewEl) {
                                previewEl.textContent = 'Chat svuotata';
                            }
                        }

                        // Optional: Send a system message via socket to inform the client
                        if (socket) {
                            socket.emit('message', {
                                roomId: roomId,
                                sender: 'system',
                                senderName: 'Sistema',
                                content: 'I messaggi precedenti sono stati eliminati dall\'operatore.',
                                timestamp: new Date().toISOString(),
                                isSystem: true
                            });
                        }
                    } else {
                        throw new Error(data.error || 'Errore durante l\'eliminazione dei messaggi');
                    }
                })
                .catch(error => {
                    console.error('Error deleting messages:', error);
                    if (messageList) {
                        messageList.innerHTML = `
                <div class="system-message" style="color: var(--primary);">
                    <i class="fas fa-exclamation-triangle"></i> ${error.message}
                </div>
            `;
                    }
                });
        }
    </script>
</body>

</html>