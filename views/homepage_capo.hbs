<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard Capo - YourBite</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <style>
        :root {
            /* Palette colori moderna e vibrante */
            --primary: #5e60ce;
            --primary-light: #6930c3;
            --primary-dark: #5390d9;
            --secondary: #48bfe3;
            --secondary-light: #64dfdf;
            --accent: #80ffdb;
            --accent-green: #2ecc71;
            --accent-red: #e74c3c;
            --accent-orange: #f39c12;
            --dark: #212529;
            --dark-blue: #1a1a2e;
            --medium-dark: #252941;
            --light: #ffffff;
            --gray: #f8f9fa;
            --gray-light: #fafbff;
            --gray-dark: #e9ecef;
            --text: #212529;
            --text-light: #6c757d;
            
            /* Effetti e animazioni */
            --shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            --shadow-lg: 0 20px 40px rgba(0, 0, 0, 0.15);
            --shadow-colored: 0 8px 25px rgba(94, 96, 206, 0.25);
            --radius-sm: 12px;
            --radius: 16px;
            --radius-lg: 24px;
            --transition-fast: all 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);
            --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
            --transition-spring: all 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Poppins', sans-serif;
        }

        body {
            background-color: var(--gray);
            color: var(--text);
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }

        /* Particles */
        .particles {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: -1;
        }

        .particle {
            position: absolute;
            border-radius: 50%;
        }

        @keyframes particleFloat {
            0% {
                transform: translateY(0) rotate(0deg);
            }
            100% {
                transform: translateY(-20px) rotate(360deg);
            }
        }

        @keyframes particleFade {
            0% {
                opacity: 0.3;
            }
            100% {
                opacity: 0.6;
            }
        }

        /* Header */
        header {
            background: linear-gradient(135deg, var(--primary), var(--primary-dark));
            color: var(--light);
            padding: 1rem 0;
            box-shadow: var(--shadow);
            position: sticky;
            top: 0;
            z-index: 100;
        }

        .header-container {
            width: 100%;
            max-width: 1400px;
            margin: 0 auto;
            padding: 0 1.5rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .logo-wrapper {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .logo {
            height: 40px;
            width: auto;
        }

        .site-title {
            font-size: 1.8rem;
            font-weight: 700;
            color: var(--light);
            text-decoration: none;
        }

        .nav-menu {
            display: flex;
            gap: 1rem;
            align-items: center;
        }

        .nav-link {
            color: rgba(255, 255, 255, 0.85);
            text-decoration: none;
            padding: 8px 16px;
            border-radius: var(--radius-sm);
            transition: var(--transition);
            font-weight: 500;
        }

        .nav-link:hover {
            background: rgba(255, 255, 255, 0.1);
            color: var(--light);
        }

        .nav-link.active {
            background: rgba(255, 255, 255, 0.2);
            color: var(--light);
            font-weight: 600;
        }

        .user-menu {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .notifications-btn {
            background: rgba(255, 255, 255, 0.1);
            border: none;
            color: var(--light);
            width: 40px;
            height: 40px;
            border-radius: var(--radius-sm);
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
            cursor: pointer;
            transition: var(--transition);
        }

        .notifications-btn:hover {
            background: rgba(255, 255, 255, 0.2);
        }

        .notification-badge {
            position: absolute;
            top: -5px;
            right: -5px;
            background-color: var(--accent-red);
            color: var(--light);
            border-radius: 50%;
            padding: 2px;
            min-width: 18px;
            height: 18px;
            font-size: 12px;
            font-weight: 700;
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
            border: 2px solid var(--primary);
        }

        .user-profile {
            display: flex;
            align-items: center;
            gap: 10px;
            background: rgba(255, 255, 255, 0.1);
            padding: 6px 15px 6px 6px;
            border-radius: var(--radius-sm);
            cursor: pointer;
            transition: var(--transition);
        }

        .user-profile:hover {
            background: rgba(255, 255, 255, 0.2);
        }

        .user-avatar {
            width: 32px;
            height: 32px;
            border-radius: var(--radius-sm);
            object-fit: cover;
        }

        .user-name {
            font-weight: 600;
            font-size: 14px;
        }

        /* Main Content */
        .main-container {
            flex: 1;
            display: flex;
            width: 100%;
            max-width: 1400px;
            margin: 0 auto;
            padding: 1.5rem;
            gap: 1.5rem;
        }

        /* Sidebar */
        .sidebar {
            width: 280px;
            flex-shrink: 0;
            background: var(--light);
            border-radius: var(--radius);
            box-shadow: var(--shadow);
            padding: 1.5rem;
            display: flex;
            flex-direction: column;
            gap: 1.5rem;
        }

        .sidebar-header {
            display: flex;
            align-items: center;
            gap: 10px;
            padding-bottom: 15px;
            border-bottom: 1px solid var(--gray-dark);
        }

        .sidebar-title {
            font-size: 1.2rem;
            font-weight: 600;
            color: var(--dark);
        }

        .sidebar-section {
            margin-bottom: 1rem;
        }

        .section-title {
            font-size: 0.9rem;
            font-weight: 600;
            color: var(--text-light);
            text-transform: uppercase;
            letter-spacing: 0.5px;
            margin-bottom: 10px;
        }

        .menu-list {
            list-style: none;
            display: flex;
            flex-direction: column;
            gap: 5px;
        }

        .menu-item {
            display: flex;
            align-items: center;
            padding: 10px 15px;
            border-radius: var(--radius-sm);
            cursor: pointer;
            transition: var(--transition);
            color: var(--text);
            text-decoration: none;
            font-weight: 500;
        }

        .menu-item:hover {
            background-color: var(--gray-light);
        }

        .menu-item.active {
            background-color: rgba(94, 96, 206, 0.1);
            color: var(--primary);
            font-weight: 600;
        }

        .menu-item i {
            margin-right: 10px;
            width: 20px;
            text-align: center;
            color: var(--text-light);
        }

        .menu-item.active i {
            color: var(--primary);
        }

        .sidebar-stats {
            margin-top: auto;
            padding-top: 1rem;
            border-top: 1px solid var(--gray-dark);
        }

        .stat-item {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 10px;
        }

        .stat-label {
            font-size: 0.9rem;
            color: var(--text-light);
        }

        .stat-value {
            font-weight: 600;
            color: var(--dark);
        }

        /* Content Area */
        .content-area {
            flex: 1;
            display: flex;
            flex-direction: column;
            gap: 1.5rem;
        }

        /* Dashboard Overview */
        .overview-cards {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));
            gap: 1.5rem;
        }

        .overview-card {
            background: var(--light);
            border-radius: var(--radius);
            box-shadow: var(--shadow);
            padding: 1.5rem;
            display: flex;
            flex-direction: column;
            gap: 10px;
            transition: var(--transition);
            cursor: pointer;
        }

        .overview-card:hover {
            transform: translateY(-5px);
            box-shadow: var(--shadow-lg);
        }

        .card-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
        }

        .card-title {
            font-size: 0.9rem;
            color: var(--text-light);
            font-weight: 500;
        }

        .card-icon {
            width: 40px;
            height: 40px;
            border-radius: var(--radius-sm);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.2rem;
        }

        .card-icon.sales {
            background-color: rgba(94, 96, 206, 0.1);
            color: var(--primary);
        }

        .card-icon.orders {
            background-color: rgba(72, 191, 227, 0.1);
            color: var(--secondary);
        }

        .card-icon.customers {
            background-color: rgba(46, 204, 113, 0.1);
            color: var(--accent-green);
        }

        .card-icon.time {
            background-color: rgba(243, 156, 18, 0.1);
            color: var(--accent-orange);
        }

        .card-value {
            font-size: 1.5rem;
            font-weight: 700;
            color: var(--dark);
        }

        .card-footer {
            display: flex;
            align-items: center;
            gap: 5px;
            font-size: 0.8rem;
        }

        .trend-up {
            color: var(--accent-green);
        }

        .trend-down {
            color: var(--accent-red);
        }

        /* Pannello Chat */
        .chat-panel {
            background: var(--light);
            border-radius: var(--radius);
            box-shadow: var(--shadow);
            display: flex;
            flex-direction: column;
            height: 650px;
            overflow: hidden;
            position: relative;
        }

        .chat-header {
            padding: 1rem 1.5rem;
            border-bottom: 1px solid var(--gray-dark);
            display: flex;
            justify-content: space-between;
            align-items: center;
            background: var(--light);
            z-index: 10;
        }

        .chat-title {
            font-size: 1.2rem;
            font-weight: 600;
            color: var(--dark);
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .chat-title i {
            color: var(--primary);
        }

        .chat-actions {
            display: flex;
            gap: 10px;
        }

        .chat-action-btn {
            background: var(--gray-light);
            border: none;
            width: 36px;
            height: 36px;
            border-radius: var(--radius-sm);
            display: flex;
            align-items: center;
            justify-content: center;
            color: var(--primary);
            cursor: pointer;
            transition: var(--transition);
        }

        .chat-action-btn:hover {
            background: rgba(94, 96, 206, 0.1);
            color: var(--primary-dark);
            transform: translateY(-2px);
        }

        .chat-conversations {
            flex: 1;
            display: flex;
            overflow: hidden;
        }

        .chat-sidebar {
            width: 320px;
            border-right: 1px solid var(--gray-dark);
            overflow-y: auto;
            background: var(--gray-light);
            display: flex;
            flex-direction: column;
        }

        .chat-search {
            padding: 15px;
            position: sticky;
            top: 0;
            background: var(--gray-light);
            z-index: 5;
            border-bottom: 1px solid var(--gray-dark);
        }

        .search-input {
            width: 100%;
            padding: 10px 15px;
            border-radius: var(--radius-sm);
            border: 1px solid var(--gray-dark);
            background: var(--light);
            display: flex;
            align-items: center;
            gap: 10px;
            transition: var(--transition);
        }

        .search-input i {
            color: var(--text-light);
        }

        .search-input input {
            flex: 1;
            border: none;
            outline: none;
            background: transparent;
            font-size: 0.9rem;
            color: var(--text);
        }

        .search-input:focus-within {
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(94, 96, 206, 0.1);
        }

        .chat-list {
            flex: 1;
            list-style: none;
            display: flex;
            flex-direction: column;
        }

        .chat-item {
            padding: 15px;
            display: flex;
            gap: 15px;
            border-bottom: 1px solid var(--gray-dark);
            cursor: pointer;
            transition: var(--transition);
            position: relative;
        }

        .chat-item:hover {
            background: var(--light);
        }

        .chat-item.active {
            background: var(--light);
        }

        .chat-avatar {
            width: 48px;
            height: 48px;
            border-radius: var(--radius-sm);
            object-fit: cover;
        }

        .chat-item-content {
            flex: 1;
            min-width: 0;
            display: flex;
            flex-direction: column;
            gap: 5px;
        }

        .chat-item-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .chat-name {
            font-weight: 600;
            font-size: 0.95rem;
            color: var(--dark);
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .chat-time {
            font-size: 0.8rem;
            color: var(--text-light);
        }

        .chat-message {
            font-size: 0.85rem;
            color: var(--text-light);
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
            max-width: 100%;
        }

        .chat-item-status {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .chat-status {
            font-size: 0.75rem;
            color: var(--text-light);
        }

        .message-count {
            display: flex;
            align-items: center;
            justify-content: center;
            min-width: 20px;
            height: 20px;
            padding: 0 6px;
            background: var(--primary);
            color: var(--light);
            border-radius: 10px;
            font-size: 0.75rem;
            font-weight: 600;
            margin-left: auto;
        }

        .chat-main {
            flex: 1;
            display: flex;
            flex-direction: column;
            background-color: var(--gray-light);
            background-image: url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%239C92AC' fill-opacity='0.03'%3E%3Cpath d='M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E");
            position: relative;
        }

        .chat-placeholder {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100%;
            padding: 2rem;
            text-align: center;
            color: var(--text-light);
        }

        .placeholder-icon {
            font-size: 4rem;
            margin-bottom: 1rem;
            color: var(--gray-dark);
            background: var(--light);
            width: 100px;
            height: 100px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .placeholder-title {
            font-size: 1.2rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
            color: var(--text);
        }

        .placeholder-text {
            max-width: 400px;
        }

        .chat-content {
            flex: 1;
            padding: 20px;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
        }

        .chat-day {
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 20px 0;
            color: var(--text-light);
            font-size: 0.8rem;
        }

        .chat-day span {
            background: var(--light);
            padding: 5px 10px;
            border-radius: 20px;
        }

        .message {
            display: flex;
            flex-direction: column;
            max-width: 70%;
            margin-bottom: 15px;
            animation: fadeIn 0.3s forwards;
        }

        .message.outgoing {
            align-self: flex-end;
        }

        .message.incoming {
            align-self: flex-start;
        }

        .message-bubble {
            padding: 12px 16px;
            border-radius: var(--radius-sm);
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
            position: relative;
            overflow-wrap: break-word;
        }

        .outgoing .message-bubble {
            background: linear-gradient(135deg, var(--primary), var(--primary-dark));
            color: var(--light);
            border-top-right-radius: 2px;
        }

        .outgoing .message-bubble::after {
            content: '';
            position: absolute;
            right: -8px;
            top: 0;
            border-left: 10px solid var(--primary-dark);
            border-right: 0;
            border-bottom: 10px solid transparent;
        }

        .incoming .message-bubble {
            background: var(--light);
            color: var(--text);
            border-top-left-radius: 2px;
        }

        .incoming .message-bubble::after {
            content: '';
            position: absolute;
            left: -8px;
            top: 0;
            border-right: 10px solid var(--light);
            border-left: 0;
            border-bottom: 10px solid transparent;
        }

        .message-meta {
            margin-top: 5px;
            display: flex;
            align-items: center;
            justify-content: flex-end;
            font-size: 0.75rem;
            color: var(--text-light);
        }

        .outgoing .message-meta {
            color: rgba(255, 255, 255, 0.7);
        }

        .message-time {
            margin-right: 5px;
        }

        .message-status i {
            margin-left: 3px;
        }

        .chat-footer {
            padding: 15px 20px;
            background: var(--light);
            border-top: 1px solid var(--gray-dark);
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .chat-tools {
            display: flex;
            gap: 10px;
        }

        .chat-tool {
            background: transparent;
            border: none;
            color: var(--text-light);
            width: 36px;
            height: 36px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: var(--transition);
        }

        .chat-tool:hover {
            background: var(--gray-light);
            color: var(--primary);
        }

        .chat-input-wrapper {
            flex: 1;
            display: flex;
            align-items: center;
            background: var(--gray-light);
            border-radius: 20px;
            padding: 5px 15px;
            gap: 10px;
            border: 1px solid var(--gray-dark);
            transition: var(--transition);
        }

        .chat-input-wrapper:focus-within {
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(94, 96, 206, 0.1);
        }

        .chat-input {
            flex: 1;
            border: none;
            outline: none;
            background: transparent;
            padding: 10px 0;
            font-size: 0.95rem;
            color: var(--text);
            resize: none;
            min-height: 24px;
            max-height: 100px;
        }

        .chat-send {
            background: var(--primary);
            border: none;
            color: var(--light);
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: var(--transition-spring);
            box-shadow: 0 3px 8px rgba(94, 96, 206, 0.3);
        }

        .chat-send:hover {
            transform: scale(1.1);
            box-shadow: 0 5px 15px rgba(94, 96, 206, 0.4);
        }

        .chat-send:active {
            transform: scale(0.95);
        }

        .typing-indicator {
            padding: 10px 15px;
            background: var(--light);
            border-radius: var(--radius-sm);
            display: inline-flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 15px;
            align-self: flex-start;
            max-width: 100px;
            animation: fadeIn 0.3s forwards;
        }

        .typing-dots {
            display: flex;
            align-items: center;
            gap: 4px;
        }

        .typing-dot {
            width: 7px;
            height: 7px;
            border-radius: 50%;
            background: var(--text-light);
            animation: typingAnimation 1.4s infinite;
        }

        .typing-dot:nth-child(2) {
            animation-delay: 0.2s;
        }

        .typing-dot:nth-child(3) {
            animation-delay: 0.4s;
        }

        @keyframes typingAnimation {
            0%, 60%, 100% {
                transform: translateY(0);
                opacity: 0.6;
            }
            30% {
                transform: translateY(-4px);
                opacity: 1;
            }
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        /* Connection status */
        .connection-status {
            position: fixed;
            top: 10px;
            left: 50%;
            transform: translateX(-50%);
            background-color: var(--accent-red);
            color: white;
            padding: 8px 16px;
            border-radius: var(--radius-full);
            font-size: 14px;
            font-weight: 500;
            box-shadow: var(--shadow);
            display: flex;
            align-items: center;
            gap: 8px;
            opacity: 0;
            pointer-events: none;
            transition: var(--transition);
            z-index: 1000;
        }

        .connection-status.show {
            opacity: 1;
            pointer-events: auto;
        }

        .connection-status.connected {
            background-color: var(--accent-green);
            opacity: 1;
            animation: fadeOut 3s forwards 2s;
        }

        @keyframes fadeOut {
            to {
                opacity: 0;
                pointer-events: none;
            }
        }

        .connection-icon {
            font-size: 16px;
            animation: blink 1s infinite;
        }

        @keyframes blink {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }

        /* Responsive */
        @media (max-width: 1200px) {
            .main-container {
                flex-direction: column;
            }

            .sidebar {
                width: 100%;
            }

            .chat-panel {
                height: 500px;
            }
        }

        @media (max-width: 768px) {
            .header-container {
                flex-direction: column;
                gap: 10px;
                padding: 1rem;
            }

            .nav-menu {
                width: 100%;
                overflow-x: auto;
                padding-bottom: 10px;
                -ms-overflow-style: none;
                scrollbar-width: none;
            }

            .nav-menu::-webkit-scrollbar {
                display: none;
            }

            .nav-link {
                white-space: nowrap;
            }

            .main-container {
                padding: 1rem;
            }

            .overview-cards {
                grid-template-columns: 1fr;
            }

            .chat-conversations {
                flex-direction: column;
            }

            .chat-sidebar {
                width: 100%;
                height: 200px;
                border-right: none;
                border-bottom: 1px solid var(--gray-dark);
            }
        }
    </style>
</head>
<body>
    <!-- Connection status indicator -->
    <div class="connection-status" id="connectionStatus">
        <i class="fas fa-sync-alt connection-icon"></i>
        <span id="connectionText">Connessione in corso...</span>
    </div>

    <!-- Particle Background -->
    <div class="particles" id="particles"></div>

    <!-- Header -->
    <header>
        <div class="header-container">
            <div class="logo-wrapper">
                <img src="/img/logo.png" alt="YourBite Logo" class="logo">
                <a href="#" class="site-title">YourBite</a>
            </div>

            <nav class="nav-menu">
                <a href="#" class="nav-link active">Dashboard</a>
                <a href="#" class="nav-link">Ordini</a>
                <a href="#" class="nav-link">Menu</a>
                <a href="#" class="nav-link">Statistiche</a>
                <a href="#" class="nav-link">Personale</a>
            </nav>

            <div class="user-menu">
                <button class="notifications-btn">
                    <i class="far fa-bell"></i>
                    <span class="notification-badge">3</span>
                </button>
                <div class="user-profile" id="userProfileBtn">
                    <img src="https://source.unsplash.com/random/100x100/?person" alt="User" class="user-avatar">
                    <span class="user-name">Manager</span>
                </div>
            </div>
        </div>
    </header>

    <!-- Main Content -->
    <main class="main-container">
        <!-- Sidebar -->
        <aside class="sidebar">
            <div class="sidebar-header">
                <i class="fas fa-chart-line"></i>
                <h2 class="sidebar-title">Dashboard</h2>
            </div>

            <div class="sidebar-section">
                <h3 class="section-title">Menu</h3>
                <ul class="menu-list">
                    <li>
                        <a href="#" class="menu-item active">
                            <i class="fas fa-home"></i>
                            Dashboard
                        </a>
                    </li>
                    <li>
                        <a href="#" class="menu-item">
                            <i class="fas fa-shopping-bag"></i>
                            Ordini
                        </a>
                    </li>
                    <li>
                        <a href="#" class="menu-item">
                            <i class="fas fa-utensils"></i>
                            Menu
                        </a>
                    </li>
                    <li>
                        <a href="#" class="menu-item">
                            <i class="fas fa-chart-bar"></i>
                            Statistiche
                        </a>
                    </li>
                    <li>
                        <a href="#" class="menu-item">
                            <i class="fas fa-users"></i>
                            Personale
                        </a>
                    </li>
                </ul>
            </div>

            <div class="sidebar-section">
                <h3 class="section-title">Strumenti</h3>
                <ul class="menu-list">
                    <li>
                        <a href="#" class="menu-item">
                            <i class="fas fa-cog"></i>
                            Impostazioni
                        </a>
                    </li>
                    <li>
                        <a href="#" class="menu-item">
                            <i class="fas fa-user-cog"></i>
                            Profilo
                        </a>
                    </li>
                    <li>
                        <a href="#" class="menu-item" id="logoutBtn">
                            <i class="fas fa-sign-out-alt"></i>
                            Logout
                        </a>
                    </li>
                </ul>
            </div>

            <div class="sidebar-stats">
                <div class="stat-item">
                    <span class="stat-label">Ordini oggi</span>
                    <span class="stat-value">24</span>
                </div>
                <div class="stat-item">
                    <span class="stat-label">Clienti attivi</span>
                    <span class="stat-value">156</span>
                </div>
                <div class="stat-item">
                    <span class="stat-label">Tempo medio consegna</span>
                    <span class="stat-value">25 min</span>
                </div>
            </div>
        </aside>

        <!-- Content Area -->
        <div class="content-area">
            <!-- Overview Cards -->
            <div class="overview-cards">
                <div class="overview-card">
                    <div class="card-header">
                        <h3 class="card-title">Vendite Oggi</h3>
                        <div class="card-icon sales">
                            <i class="fas fa-euro-sign"></i>
                        </div>
                    </div>
                    <div class="card-value">€1,250</div>
                    <div class="card-footer">
                        <i class="fas fa-arrow-up trend-up"></i>
                        <span class="trend-up">+12% rispetto a ieri</span>
                    </div>
                </div>

                <div class="overview-card">
                    <div class="card-header">
                        <h3 class="card-title">Ordini Completati</h3>
                        <div class="card-icon orders">
                            <i class="fas fa-shopping-bag"></i>
                        </div>
                    </div>
                    <div class="card-value">24</div>
                    <div class="card-footer">
                        <i class="fas fa-arrow-up trend-up"></i>
                        <span class="trend-up">+8% rispetto a ieri</span>
                    </div>
                </div>

                <div class="overview-card">
                    <div class="card-header">
                        <h3 class="card-title">Nuovi Clienti</h3>
                        <div class="card-icon customers">
                            <i class="fas fa-user-plus"></i>
                        </div>
                    </div>
                    <div class="card-value">8</div>
                    <div class="card-footer">
                        <i class="fas fa-arrow-down trend-down"></i>
                        <span class="trend-down">-3% rispetto a ieri</span>
                    </div>
                </div>

                <div class="overview-card">
                    <div class="card-header">
                        <h3 class="card-title">Tempo Medio Consegna</h3>
                        <div class="card-icon time">
                            <i class="fas fa-clock"></i>
                        </div>
                    </div>
                    <div class="card-value">25 min</div>
                    <div class="card-footer">
                        <i class="fas fa-arrow-up trend-up"></i>
                        <span class="trend-up">+5% più veloce di ieri</span>
                    </div>
                </div>
            </div>

            <!-- Chat Panel -->
            <div class="chat-panel">
                <div class="chat-header">
                    <div class="chat-title">
                        <i class="fas fa-comments"></i>
                        Assistenza Clienti
                    </div>
                    <div class="chat-actions">
                        <button class="chat-action-btn" title="Filtra Chat">
                            <i class="fas fa-filter"></i>
                        </button>
                        <button class="chat-action-btn" title="Nuovo Messaggio">
                            <i class="fas fa-plus"></i>
                        </button>
                    </div>
                </div>

                <div class="chat-conversations">
                    <div class="chat-sidebar">
                        <div class="chat-search">
                            <div class="search-input">
                                <i class="fas fa-search"></i>
                                <input type="text" placeholder="Cerca clienti...">
                            </div>
                        </div>

                        <ul class="chat-list" id="chatList">
                            <!-- Le chat saranno aggiunte qui dinamicamente -->
                        </ul>
                    </div>

                    <div class="chat-main" id="chatMain">
                        <div class="chat-placeholder" id="chatPlaceholder">
                            <div class="placeholder-icon">
                                <i class="far fa-comments"></i>
                            </div>
                            <h3 class="placeholder-title">Seleziona una chat</h3>
                            <p class="placeholder-text">Seleziona una chat dalla lista per visualizzare i messaggi o iniziare una nuova conversazione.</p>
                        </div>

                        <div class="chat-content" id="chatContent" style="display: none;">
                            <!-- I messaggi saranno aggiunti qui dinamicamente -->
                        </div>

                        <div class="chat-footer" id="chatFooter" style="display: none;">
                            <div class="chat-tools">
                                <button class="chat-tool" title="Emoji">
                                    <i class="far fa-smile"></i>
                                </button>
                                <button class="chat-tool" title="Allega File">
                                    <i class="fas fa-paperclip"></i>
                                </button>
                            </div>
                            <div class="chat-input-wrapper">
                                <textarea class="chat-input" id="chatInput" placeholder="Scrivi un messaggio..." rows="1"></textarea>
                            </div>
                            <button class="chat-send" id="chatSend">
                                <i class="fas fa-paper-plane"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Create particles background
            createParticles();
            
            // Initialize WebSocket
            initializeWebSocket();
            
            // Setup message input autoresize
            setupMessageInput();
            
            // Setup logout button
            setupLogoutButton();
            
            // Get chats
            loadChats();
        });
        
        // Create particles background
        function createParticles() {
            const particles = document.getElementById('particles');
            if (!particles) return;
            
            // Clear any existing particles
            particles.innerHTML = '';
            
            // Settings
            const particleCount = 30;
            
            // Create particles
            for (let i = 0; i < particleCount; i++) {
                const particle = document.createElement('div');
                particle.className = 'particle';
                
                // Random position
                const posX = Math.random() * 100;
                const posY = Math.random() * 100;
                
                // Random size
                const size = Math.random() * 10 + 2;
                
                // Random opacity
                const opacity = Math.random() * 0.5 + 0.1;
                
                // Random animation duration
                const duration = Math.random() * 60 + 30;
                
                // Apply styles
                particle.style.left = `${posX}%`;
                particle.style.top = `${posY}%`;
                particle.style.width = `${size}px`;
                particle.style.height = `${size}px`;
                particle.style.opacity = opacity;
                
                // Alternate between primary and secondary colors
                if (i % 2 === 0) {
                    particle.style.backgroundColor = 'rgba(94, 96, 206, 0.15)';
                } else {
                    particle.style.backgroundColor = 'rgba(72, 191, 227, 0.15)';
                }
                
                // Add floating animation
                particle.style.animation = `
                    particleFloat ${duration}s infinite alternate ease-in-out ${Math.random() * 10}s,
                    particleFade ${duration * 1.5}s infinite alternate ease-in-out ${Math.random() * 10}s
                `;
                
                // Append to container
                particles.appendChild(particle);
            }
        }
        
        // Global WebSocket object
        let socket;
        let reconnectAttempts = 0;
        const maxReconnectAttempts = 5;
        const userType = 'capo';
        let activeChat = null;
        let clients = [];
        
        // Initialize WebSocket
        function initializeWebSocket() {
            const connectionStatus = document.getElementById('connectionStatus');
            const connectionText = document.getElementById('connectionText');
            
            connectionStatus.classList.add('show');
            
            // WebSocket URL - adjust to your server configuration
            // In un'applicazione reale, usa il protocollo wss:// per connessioni sicure
            const protocol = window.location.protocol === 'https:' ? 'wss://' : 'ws://';
            const wsUrl = `${protocol}${window.location.host}/ws/chat`;
            
            // Create WebSocket connection
            socket = new WebSocket(wsUrl);
            
            // Connection opened
            socket.addEventListener('open', function(event) {
                console.log('WebSocket connection established');
                connectionText.textContent = 'Connesso';
                connectionStatus.classList.add('connected');
                connectionStatus.classList.add('show');
                
                // Reset reconnect attempts
                reconnectAttempts = 0;
                
                // Send identification message
                sendIdentification();
                
                // After a while, hide the connection status
                setTimeout(() => {
                    connectionStatus.classList.remove('show');
                }, 3000);
                
                // Reload available chats
                loadChats();
            });
            
            // Listen for messages
            socket.addEventListener('message', function(event) {
                const data = JSON.parse(event.data);
                console.log('Message from server:', data);
                
                switch(data.type) {
                    case 'chat_message':
                        // Handle incoming message
                        if (data.sender !== userType) {
                            handleIncomingMessage(data);
                        }
                        break;
                    
                    case 'typing':
                        // Handle typing indicator
                        if (data.sender !== userType && data.userId === activeChat) {
                            if (data.is_typing) {
                                showTypingIndicator();
                            } else {
                                hideTypingIndicator();
                            }
                        }
                        break;
                        
                    case 'chat_history':
                        // Handle chat history
                        displayChatHistory(data.messages);
                        break;
                    
                    case 'client_list':
                        // Handle client list
                        updateClientList(data.clients);
                        break;
                        
                    default:
                        console.log('Unknown message type:', data.type);
                }
            });
            
            // Connection closed
            socket.addEventListener('close', function(event) {
                console.log('WebSocket connection closed');
                connectionText.textContent = 'Connessione interrotta';
                connectionStatus.classList.remove('connected');
                connectionStatus.classList.add('show');
                
                // Try to reconnect if not closed normally and max attempts not reached
                if (event.code !== 1000 && reconnectAttempts < maxReconnectAttempts) {
                    reconnectAttempts++;
                    connectionText.textContent = `Riconnessione in corso (${reconnectAttempts}/${maxReconnectAttempts})...`;
                    
                    setTimeout(() => {
                        initializeWebSocket();
                    }, 3000);
                } else if (reconnectAttempts >= maxReconnectAttempts) {
                    connectionText.textContent = 'Impossibile connettersi. Ricarica la pagina.';
                }
            });
            
            // Connection error
            socket.addEventListener('error', function(event) {
                console.error('WebSocket error:', event);
                connectionText.textContent = 'Errore di connessione';
                connectionStatus.classList.remove('connected');
                connectionStatus.classList.add('show');
            });
        }
        
        // Send identification message
        function sendIdentification() {
            if (socket && socket.readyState === WebSocket.OPEN) {
                socket.send(JSON.stringify({
                    type: 'identification',
                    user_type: userType,
                    username: 'Capo'
                }));
            }
        }
        
        // Setup message input
        function setupMessageInput() {
            const chatInput = document.getElementById('chatInput');
            if (!chatInput) return;
            
            chatInput.addEventListener('input', function() {
                // Auto-resize textarea
                this.style.height = 'auto';
                this.style.height = Math.min(this.scrollHeight, 100) + 'px';
                
                // Send typing indicator
                sendTypingStatus(this.value.trim() !== '');
            });
            
            chatInput.addEventListener('keydown', function(e) {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    sendChatMessage();
                }
            });
            
            const chatSend = document.getElementById('chatSend');
            chatSend.addEventListener('click', sendChatMessage);
        }
        
        // Send typing status
        let typingTimeout;
        function sendTypingStatus(isTyping) {
            if (!activeChat) return;
            
            if (socket && socket.readyState === WebSocket.OPEN) {
                clearTimeout(typingTimeout);
                
                socket.send(JSON.stringify({
                    type: 'typing',
                    is_typing: isTyping,
                    to_user: activeChat
                }));
                
                if (isTyping) {
                    typingTimeout = setTimeout(() => {
                        sendTypingStatus(false);
                    }, 3000);
                }
            }
        }
        
        // Send chat message
        function sendChatMessage() {
            if (!activeChat) return;
            
            const chatInput = document.getElementById('chatInput');
            const message = chatInput.value.trim();
            
            if (!message) return;
            
            if (socket && socket.readyState === WebSocket.OPEN) {
                socket.send(JSON.stringify({
                    type: 'chat_message',
                    message: message,
                    to_user: activeChat
                }));
                
                // Add message to chat
                addMessageToChat('outgoing', message);
                
                // Clear input
                chatInput.value = '';
                chatInput.style.height = 'auto';
                chatInput.focus();
                
                // Update chat list
                updateChatListItem(activeChat, message);
                
                // Clear typing indicator
                sendTypingStatus(false);
            } else {
                addSystemMessage('Errore: Impossibile inviare il messaggio. Riconnessione in corso...');
                
                // Try to reconnect
                initializeWebSocket();
            }
        }
        
        // Handle incoming message
        function handleIncomingMessage(data) {
            const message = data.message;
            const senderId = data.userId;
            
            // Update chat list
            updateChatListItem(senderId, message, true);
            
            // If this is the active chat, add message
            if (activeChat === senderId) {
                addMessageToChat('incoming', message);
                hideTypingIndicator();
            }
            
            // Play notification sound
            playNotificationSound();
        }
        
        // Play notification sound
        function playNotificationSound() {
            const audio = new Audio('/sounds/notification.mp3');
            audio.volume = 0.5;
            audio.play().catch(e => console.log('Audio play failed:', e));
        }
        
        // Load chats
        function loadChats() {
            if (socket && socket.readyState === WebSocket.OPEN) {
                socket.send(JSON.stringify({
                    type: 'get_clients'
                }));
            } else {
                console.log('Socket not ready, waiting...');
                setTimeout(loadChats, 1000);
            }
        }
        
        // Update client list
        function updateClientList(newClients) {
            clients = newClients;
            const chatList = document.getElementById('chatList');
            if (!chatList) return;
            
            chatList.innerHTML = '';
            
            if (!clients.length) {
                const emptyItem = document.createElement('li');
                emptyItem.className = 'chat-item';
                emptyItem.innerHTML = '<div class="chat-item-content"><div class="chat-name">Nessun cliente disponibile</div></div>';
                chatList.appendChild(emptyItem);
                return;
            }
            
            clients.forEach((client, index) => {
                const chatItem = document.createElement('li');
                chatItem.className = 'chat-item';
                chatItem.dataset.userId = client.id;
                
                // Format last message time
                let timeText = '';
                if (client.lastMessage && client.lastMessage.timestamp) {
                    const msgDate = new Date(client.lastMessage.timestamp);
                    const now = new Date();
                    const isToday = msgDate.toDateString() === now.toDateString();
                    
                    if (isToday) {
                        timeText = msgDate.toLocaleTimeString('it-IT', {hour: '2-digit', minute:'2-digit'});
                    } else {
                        timeText = msgDate.toLocaleDateString('it-IT', {day: '2-digit', month: '2-digit'});
                    }
                }
                
                chatItem.innerHTML = `
                    <img src="${client.avatar || 'https://source.unsplash.com/random/100x100/?person'}" alt="${client.name}" class="chat-avatar">
                    <div class="chat-item-content">
                        <div class="chat-item-header">
                            <div class="chat-name">${client.name}</div>
                            <div class="chat-time">${timeText}</div>
                        </div>
                        <div class="chat-message">${client.lastMessage ? client.lastMessage.text : 'Nessun messaggio'}</div>
                        <div class="chat-item-status">
                            <div class="chat-status">${client.online ? 'Online' : 'Offline'}</div>
                            ${client.unreadCount ? `<div class="message-count">${client.unreadCount}</div>` : ''}
                        </div>
                    </div>
                `;
                
                chatItem.addEventListener('click', () => {
                    openChat(client.id);
                });
                
                chatList.appendChild(chatItem);
            });
        }
        
        // Update chat list item
        function updateChatListItem(userId, message, isIncoming = false) {
            const chatList = document.getElementById('chatList');
            if (!chatList) return;
            
            // Find client
            const clientIndex = clients.findIndex(c => c.id === userId);
            if (clientIndex === -1) return;
            
            const client = clients[clientIndex];
            
            // Update client data
            client.lastMessage = {
                text: message,
                timestamp: new Date().toISOString()
            };
            
            if (isIncoming && activeChat !== userId) {
                client.unreadCount = (client.unreadCount || 0) + 1;
            }
            
            // Move this client to the top of the list
            clients.splice(clientIndex, 1);
            clients.unshift(client);
            
            // Redraw the chat list
            updateClientList(clients);
            
            // If this was the active chat, highlight it
            if (activeChat === userId) {
                const chatItems = chatList.querySelectorAll('.chat-item');
                chatItems.forEach(item => {
                    item.classList.remove('active');
                    if (item.dataset.userId === activeChat) {
                        item.classList.add('active');
                    }
                });
            }
        }
        
        // Open chat
        function openChat(userId) {
            if (activeChat === userId) return;
            
            activeChat = userId;
            
            // Update UI
            const chatItems = document.querySelectorAll('.chat-item');
            chatItems.forEach(item => item.classList.remove('active'));
            
            const selectedChat = document.querySelector(`.chat-item[data-userId="${userId}"]`);
            if (selectedChat) selectedChat.classList.add('active');
            
                        // Show chat content and footer
            document.getElementById('chatPlaceholder').style.display = 'none';
            document.getElementById('chatContent').style.display = 'flex';
            document.getElementById('chatFooter').style.display = 'flex';
            
            // Clear chat content
            document.getElementById('chatContent').innerHTML = '';
            
            // Clear any existing typing indicator
            hideTypingIndicator();
            
            // Reset unread count
            const clientIndex = clients.findIndex(c => c.id === userId);
            if (clientIndex !== -1) {
                clients[clientIndex].unreadCount = 0;
                updateClientList(clients);
            }
            
            // Get chat history
            if (socket && socket.readyState === WebSocket.OPEN) {
                socket.send(JSON.stringify({
                    type: 'get_history',
                    with_user: userId
                }));
            }
            
            // Focus chat input
            setTimeout(() => {
                document.getElementById('chatInput').focus();
            }, 100);
        }
        
        // Load chat history
        function displayChatHistory(messages) {
            const chatContent = document.getElementById('chatContent');
            if (!chatContent) return;
            
            // Clear existing messages
            chatContent.innerHTML = '';
            
            if (!messages || messages.length === 0) {
                addSystemMessage('Inizia a chattare con questo cliente!');
                return;
            }
            
            // Group messages by day
            const messagesByDay = groupMessagesByDay(messages);
            
            // Display messages grouped by day
            Object.keys(messagesByDay).forEach(day => {
                // Add day divider
                const dayDivider = document.createElement('div');
                dayDivider.className = 'chat-day';
                dayDivider.innerHTML = `<span>${formatDay(day)}</span>`;
                chatContent.appendChild(dayDivider);
                
                // Add messages for this day
                messagesByDay[day].forEach(msg => {
                    const type = msg.sender === userType ? 'outgoing' : 'incoming';
                    addMessageToChat(type, msg.message, msg.timestamp, true);
                });
            });
            
            // Scroll to bottom
            scrollToBottom();
        }
        
        // Group messages by day
        function groupMessagesByDay(messages) {
            const messagesByDay = {};
            
            messages.forEach(msg => {
                const date = new Date(msg.timestamp);
                const day = date.toISOString().split('T')[0]; // YYYY-MM-DD
                
                if (!messagesByDay[day]) {
                    messagesByDay[day] = [];
                }
                
                messagesByDay[day].push(msg);
            });
            
            return messagesByDay;
        }
        
        // Format day for display
        function formatDay(dateString) {
            const date = new Date(dateString);
            const today = new Date();
            const yesterday = new Date(today);
            yesterday.setDate(yesterday.getDate() - 1);
            
            if (date.toISOString().split('T')[0] === today.toISOString().split('T')[0]) {
                return 'Oggi';
            } else if (date.toISOString().split('T')[0] === yesterday.toISOString().split('T')[0]) {
                return 'Ieri';
            } else {
                return date.toLocaleDateString('it-IT', {
                    weekday: 'long',
                    day: 'numeric',
                    month: 'long',
                    year: 'numeric'
                });
            }
        }
        
        // Add message to chat
        function addMessageToChat(type, text, timestamp = null, isHistory = false) {
            const chatContent = document.getElementById('chatContent');
            if (!chatContent) return;
            
            const now = timestamp ? new Date(timestamp) : new Date();
            const timeString = formatTime(now);
            
            const message = document.createElement('div');
            message.className = `message ${type}`;
            
            message.innerHTML = `
                <div class="message-bubble">${text}</div>
                <div class="message-meta">
                    <span class="message-time">${timeString}</span>
                    ${type === 'outgoing' ? '<span class="message-status"><i class="fas fa-check"></i></span>' : ''}
                </div>
            `;
            
            chatContent.appendChild(message);
            
            // If not loading history, scroll to bottom
            if (!isHistory) {
                scrollToBottom();
            }
        }
        
        // Add system message
        function addSystemMessage(text) {
            const chatContent = document.getElementById('chatContent');
            if (!chatContent) return;
            
            const message = document.createElement('div');
            message.className = 'chat-day';
            message.innerHTML = `<span>${text}</span>`;
            
            chatContent.appendChild(message);
            scrollToBottom();
        }
        
        // Show typing indicator
        function showTypingIndicator() {
            const chatContent = document.getElementById('chatContent');
            if (!chatContent) return;
            
            // Remove existing indicator if any
            hideTypingIndicator();
            
            const indicator = document.createElement('div');
            indicator.className = 'typing-indicator';
            indicator.id = 'typingIndicator';
            
            indicator.innerHTML = `
                <div class="typing-dots">
                    <div class="typing-dot"></div>
                    <div class="typing-dot"></div>
                    <div class="typing-dot"></div>
                </div>
            `;
            
            chatContent.appendChild(indicator);
            scrollToBottom();
        }
        
        // Hide typing indicator
        function hideTypingIndicator() {
            const indicator = document.getElementById('typingIndicator');
            if (indicator) indicator.remove();
        }
        
        // Format time for messages
        function formatTime(date) {
            return date.toLocaleTimeString('it-IT', {
                hour: '2-digit',
                minute: '2-digit'
            });
        }
        
        // Scroll chat to bottom
        function scrollToBottom() {
            const chatContent = document.getElementById('chatContent');
            if (chatContent) {
                chatContent.scrollTop = chatContent.scrollHeight;
            }
        }
        
        // Setup logout button
        function setupLogoutButton() {
            const logoutBtn = document.getElementById('logoutBtn');
            if (!logoutBtn) return;
            
            logoutBtn.addEventListener('click', function(e) {
                e.preventDefault();
                
                // Show loading overlay
                const loadingOverlay = document.createElement('div');
                loadingOverlay.style.position = 'fixed';
                loadingOverlay.style.top = '0';
                loadingOverlay.style.left = '0';
                loadingOverlay.style.width = '100%';
                loadingOverlay.style.height = '100%';
                loadingOverlay.style.backgroundColor = 'rgba(255, 255, 255, 0.8)';
                loadingOverlay.style.display = 'flex';
                loadingOverlay.style.flexDirection = 'column';
                loadingOverlay.style.justifyContent = 'center';
                loadingOverlay.style.alignItems = 'center';
                loadingOverlay.style.zIndex = '2000';
                loadingOverlay.style.backdropFilter = 'blur(5px)';
                
                const spinnerContainer = document.createElement('div');
                spinnerContainer.style.width = '60px';
                spinnerContainer.style.height = '60px';
                spinnerContainer.style.position = 'relative';
                
                const spinner = document.createElement('div');
                spinner.style.border = '4px solid rgba(0, 0, 0, 0.1)';
                spinner.style.borderTopColor = 'var(--primary)';
                spinner.style.borderRadius = '50%';
                spinner.style.width = '100%';
                spinner.style.height = '100%';
                spinner.style.animation = 'spin 1s linear infinite';
                
                const style = document.createElement('style');
                style.textContent = `
                    @keyframes spin {
                        0% { transform: rotate(0deg); }
                        100% { transform: rotate(360deg); }
                    }
                `;
                
                document.head.appendChild(style);
                spinnerContainer.appendChild(spinner);
                
                const loadingText = document.createElement('p');
                loadingText.textContent = 'Logout in corso...';
                loadingText.style.marginTop = '20px';
                loadingText.style.color = 'var(--primary)';
                loadingText.style.fontWeight = '500';
                
                loadingOverlay.appendChild(spinnerContainer);
                loadingOverlay.appendChild(loadingText);
                document.body.appendChild(loadingOverlay);
                
                // Chiudi la connessione WebSocket
                if (socket && socket.readyState === WebSocket.OPEN) {
                    socket.close(1000, "User logged out");
                }
                
                // Esegui il logout
                fetch('/logout', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                .then(response => {
                    if (response.ok) {
                        loadingText.textContent = 'Reindirizzamento...';
                        setTimeout(() => {
                            window.location.href = '/login';
                        }, 800);
                    } else {
                        throw new Error('Errore durante il logout');
                    }
                })
                .catch(error => {
                    console.error('Errore durante il logout:', error);
                    loadingText.textContent = 'Si è verificato un errore. Riprova.';
                    
                    // Add retry button
                    const retryButton = document.createElement('button');
                    retryButton.textContent = 'Riprova';
                    retryButton.style.marginTop = '15px';
                    retryButton.style.padding = '8px 20px';
                    retryButton.style.background = 'var(--primary)';
                    retryButton.style.color = 'white';
                    retryButton.style.border = 'none';
                    retryButton.style.borderRadius = 'var(--radius-sm)';
                    retryButton.style.cursor = 'pointer';
                    
                    retryButton.onclick = function() {
                        document.body.removeChild(loadingOverlay);
                        setupLogoutButton();
                    };
                    
                    loadingOverlay.appendChild(retryButton);
                });
            });
        }
        
        // Close WebSocket when page unloads
        window.addEventListener('beforeunload', () => {
            if (socket && socket.readyState === WebSocket.OPEN) {
                socket.close(1000, "Page unloaded");
            }
        });
    </script>
</body>
</html>