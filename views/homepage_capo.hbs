<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard Capo - YourBite</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <script src="/socket.io/socket.io.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <style>
        :root {
            /* Palette colori moderna e vibrante */
            --primary: #5e60ce;
            --primary-light: #6930c3;
            --primary-dark: #5390d9;
            --secondary: #48bfe3;
            --secondary-light: #64dfdf;
            --accent: #80ffdb;
            --accent-green: #2ecc71;
            --accent-red: #e74c3c;
            --accent-orange: #f39c12;
            --dark: #212529;
            --dark-blue: #1a1a2e;
            --medium-dark: #252941;
            --light: #ffffff;
            --gray: #f8f9fa;
            --gray-light: #fafbff;
            --gray-dark: #e9ecef;
            --text: #212529;
            --text-light: #6c757d;
            
            /* Effetti e animazioni */
            --shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            --shadow-lg: 0 20px 40px rgba(0, 0, 0, 0.15);
            --shadow-colored: 0 8px 25px rgba(94, 96, 206, 0.25);
            --radius-sm: 12px;
            --radius: 16px;
            --radius-lg: 24px;
            --transition-fast: all 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);
            --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
            --transition-spring: all 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Poppins', sans-serif;
        }

        body {
            background-color: var(--gray);
            color: var(--text);
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }

        /* Particles */
        .particles {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: -1;
        }

        .particle {
            position: absolute;
            border-radius: 50%;
        }
    
    /* --- MODIFICATO: Stili originali per .delete-chat-btn commentati --- */
    /*
    .delete-chat-btn {
        background: transparent;
        border: none;
        width: 30px;
        height: 30px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        color: var(--text-light);
        cursor: pointer;
        transition: var(--transition);
        margin-left: auto;
        position: absolute;
        right: 15px;
        top: 50%;
        transform: translateY(-50%);
        opacity: 0;
    }
    
    .chat-item:hover .delete-chat-btn {
        opacity: 1;
    }
    
    .delete-chat-btn:hover {
        background: rgba(231, 76, 60, 0.1);
        color: var(--accent-red);
    }
    */
    
    /* --- MODIFICATO: Stile originale per .delete-all-btn:hover commentato --- */
    /*
    .delete-all-btn:hover {
        background: rgba(231, 76, 60, 0.1);
    }
    */
    
    /* Stile per l'overlay di conferma */
    .confirm-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
        backdrop-filter: blur(3px);
    }
    
    .confirm-dialog {
        background: var(--light);
        border-radius: var(--radius);
        padding: 25px;
        width: 90%;
        max-width: 400px;
        box-shadow: var(--shadow-lg);
        text-align: center;
    }
    
    .confirm-title {
        font-size: 1.3rem;
        font-weight: 600;
        margin-bottom: 15px;
        color: var(--text);
    }
    
    .confirm-icon {
        font-size: 3rem;
        color: var(--accent-red);
        margin-bottom: 15px;
    }
    
    .confirm-message {
        margin-bottom: 25px;
        color: var(--text);
        line-height: 1.5;
    }
    
    .confirm-buttons {
        display: flex;
        justify-content: center;
        gap: 15px;
    }
    
    .confirm-btn {
        padding: 10px 20px;
        border-radius: var(--radius-sm);
        font-weight: 500;
        cursor: pointer;
        transition: var(--transition);
    }
    
    .confirm-cancel {
        background: var(--gray-light);
        color: var(--text);
        border: 1px solid var(--gray-dark);
    }
    
    .confirm-cancel:hover {
        background: var(--gray-dark);
    }
    
    .confirm-delete {
        background: var(--accent-red);
        color: white;
        border: none;
    }
    
    .confirm-delete:hover {
        background: #d63031;
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(231, 76, 60, 0.3);
    }
        @keyframes particleFloat {
            0% {
                transform: translateY(0) rotate(0deg);
            }
            100% {
                transform: translateY(-20px) rotate(360deg);
            }
        }

        @keyframes particleFade {
            0% {
                opacity: 0.3;
            }
            100% {
                opacity: 0.6;
            }
        }

        /* Header */
        header {
            background: linear-gradient(135deg, var(--primary), var(--primary-dark));
            color: var(--light);
            padding: 1rem 0;
            box-shadow: var(--shadow);
            position: sticky;
            top: 0;
            z-index: 100;
        }

        .header-container {
            width: 100%;
            max-width: 1400px;
            margin: 0 auto;
            padding: 0 1.5rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }



        .logo {
            height: 40px;
            width: auto;
        }




        .nav-link:hover {
            background: rgba(255, 255, 255, 0.1);
            color: var(--light);
        }

        .nav-link.active {
            background: rgba(255, 255, 255, 0.2);
            color: var(--light);
            font-weight: 600;
        }


   

        .notifications-btn:hover {
            background: rgba(255, 255, 255, 0.2);
        }

        .notification-badge {
            position: absolute;
            top: -5px;
            right: -5px;
            background-color: var(--accent-red);
            color: var(--light);
            border-radius: 50%;
            padding: 2px;
            min-width: 18px;
            height: 18px;
            font-size: 12px;
            font-weight: 700;
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
            border: 2px solid var(--primary);
        }

        
        .user-profile:hover {
            background: rgba(255, 255, 255, 0.2);
        }

       



header {
    background: linear-gradient(135deg, var(--primary), var(--primary-dark));
    padding: 0; /* Rimosso padding: 1rem 0; per allinearsi al primo file */
    box-shadow: var(--shadow-colored); /* Usata variabile del primo file */
    position: sticky;
    top: 0;
    z-index: 100;
    transition: var(--transition);
    height: 70px; /* Altezza fissa come nel primo file */
    display: flex;
    align-items: center;
    font-family: 'Montserrat', 'Arial', sans-serif; /* Aggiunto per coerenza font */
}

header:hover {
    box-shadow: 0 8px 30px rgba(94, 96, 206, 0.35);
}

header::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(120deg,
            rgba(0, 0, 0, 0),
            rgba(255, 255, 255, 0.1),
            rgba(0, 0, 0, 0));
    background-size: 200% 100%;
    animation: headerShimmer 6s linear infinite;
    pointer-events: none;
}

@keyframes headerShimmer {
    0% {
        background-position: 200% 0;
    }

    100% {
        background-position: -200% 0;
    }
}

.header-container {
    display: flex;
    justify-content: space-between;
    align-items: center;
    width: 100%;
    max-width: 1600px; /* Max-width del primo file */
    margin: 0 auto;
    padding: 0 25px; /* Padding del primo file */
}

.logo-container { /* Sostituisce .logo-wrapper */
    display: flex;
    align-items: center;
    gap: 16px; /* Gap del primo file */
}

.logo {
    width: 42px; /* Dimensioni del primo file */
    height: 42px;
    border-radius: 12px; /* Border-radius del primo file */
    object-fit: cover;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.15);
    transition: var(--transition-spring);
    position: relative;
    overflow: hidden;
    border: 2px solid rgba(255, 255, 255, 0.4);
}

.logo::after {
    content: '';
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: linear-gradient(to bottom right,
            rgba(255, 255, 255, 0),
            rgba(255, 255, 255, 0),
            rgba(255, 255, 255, 0.3),
            rgba(255, 255, 255, 0));
           transform: rotate(45deg);
    transition: var(--transition);
    opacity: 0;
}

.logo:hover {
    transform: scale(1.1) rotate(5deg);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.25);
    border-color: rgba(255, 255, 255, 0.8);
}

.logo:hover::after {
    animation: logoPulse 1.5s ease-out infinite;
    opacity: 1;
}

@keyframes logoPulse {
    0% {
        transform: translateX(-100%) rotate(45deg);
    }

    100% {
        transform: translateX(100%) rotate(45deg);
    }
}

.header-title { /* Sostituisce .site-title */
    color: white;
    font-size: 1.5rem; /* Dimensione del primo file (era 1.8rem) */
    font-weight: 700;
    margin: 0;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.15);
    position: relative;
    letter-spacing: 0.5px;
    text-decoration: none; /* Aggiunto per rimuovere sottolineatura se fosse un link */
    font-family: 'Montserrat', 'Arial', sans-serif; /* Coerenza font */
}

.header-title::after {
    content: '';
    display: block;
    width: 0;
    height: 2px;
    background: var(--accent);
    transition: var(--transition);
    position: absolute;
    bottom: -5px;
    left: 0;
}

.header-title:hover::after {
    width: 100%;
}

.header-nav { /* Sostituisce .nav-menu */
    display: flex;
    gap: 8px; /* Gap del primo file (era 1rem) */
    align-items: center;
}

.header-nav a { /* Sostituisce .nav-link */
    color: white; /* Colore del primo file (era rgba(255,255,255,0.85)) */
    text-decoration: none;
    font-weight: 500;
    padding: 10px 16px; /* Padding del primo file */
    border-radius: 12px; /* --radius-sm del primo file (era --radius-sm che valeva 12px, il primo ha --radius:16px, --radius-sm:10px, --radius-lg:24px. Userò 12px per coerenza con il design dei bottoni) */
    transition: all 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);
    font-size: 14px;
    letter-spacing: 0.5px;
    position: relative;
    overflow: hidden;
    background-color: rgba(255, 255, 255, 0.05);
    border: 1px solid rgba(255, 255, 255, 0.1);
    display: flex;
    align-items: center;
    gap: 6px;
    backdrop-filter: blur(5px);
    font-family: 'Montserrat', 'Arial', sans-serif; /* Coerenza font */
}

.header-nav a i {
    transition: transform 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);
    font-size: 16px;
    /* margin-right: 6px; Rimosso perché ora c'è gap sul parent 'a' */
}

.header-nav a span { /* Per nascondere il testo su schermi piccoli, come nel primo file */
    /* Lo span è visibile di default, le media query lo nasconderanno */
}

.header-nav a::before {
    content: '';
    position: absolute;
    width: 100%;
    height: 100%;
    background: linear-gradient(120deg,
            rgba(255, 255, 255, 0),
            rgba(255, 255, 255, 0.2),
            rgba(255, 255, 255, 0));
    top: 0;
    left: -100%;
    transition: var(--transition);
    transform: skewX(-15deg);
}

.header-nav a:hover {
    background-color: rgba(255, 255, 255, 0.15); /* Stile hover del primo file */
    transform: translateY(-5px);
    border-color: rgba(255, 255, 255, 0.3);
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
    color: white; /* Assicura che il testo rimanga bianco */
}

.header-nav a:hover i {
    transform: scale(1.2) rotate(10deg);
}

.header-nav a:hover::before {
    left: 100%;
    transition: all 0.7s ease;
}

.header-nav a.active {
    background-color: rgba(255, 255, 255, 0.2); /* Stile active del primo file */
    font-weight: 600;
    border-color: rgba(255, 255, 255, 0.4);
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
}

/* Stile per il bottone Home con effetto shimmer */
.header-nav a.home-button {
    background-color: rgba(255, 255, 255, 0.08);
    border-color: rgba(255, 255, 255, 0.25);
    position: relative;
    overflow: hidden;
}

.header-nav a.home-button::after {
    content: '';
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: linear-gradient(
        to bottom right,
        rgba(255, 255, 255, 0),
        rgba(255, 255, 255, 0.1),
        rgba(255, 255, 255, 0)
    );
    transform: rotate(45deg);
    animation: homeButtonShimmer 3s infinite;
    opacity: 0.5;
}

@keyframes homeButtonShimmer {
    0% { transform: translateX(-100%) rotate(45deg); }
    50% { transform: translateX(100%) rotate(45deg); }
    100% { transform: translateX(-100%) rotate(45deg); }
}


.user-role-badge {
    background-color: rgba(255, 255, 255, 0.15);
    color: white;
    padding: 8px 16px;
    border-radius: 12px; /* Uso 12px per coerenza con i bottoni nav */
    font-weight: 600;
    font-size: 14px;
    letter-spacing: 0.5px;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
    display: flex;
    align-items: center;
    gap: 8px;
    backdrop-filter: blur(5px);
    animation: badgePulse 3s infinite alternate;
    border: 2px solid rgba(255, 255, 255, 0.3);
    margin-left: 10px; /* Come nel primo file */
    font-family: 'Montserrat', 'Arial', sans-serif; /* Coerenza font */
}

@keyframes badgePulse {
    0% {
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
    }

    100% {
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.2);
    }
}

.user-role-badge i {
    font-size: 14px;
    animation: rotateIcon 5s linear infinite;
}

@keyframes rotateIcon {
    0% {
        transform: rotate(0deg);
    }

    25% {
        transform: rotate(10deg);
    }

    50% {
        transform: rotate(0deg);
    }

    75% {
        transform: rotate(-10deg);
    }

    100% {
        transform: rotate(0deg);
    }
}

#notification-badge { /* Sostituisce .notification-badge del secondo file */
    position: absolute;
    top: -5px;
    right: -5px;
    background: linear-gradient(135deg, #ff6b6b, #e63946);
    color: white;
    border-radius: 50%;
    width: 22px;
    height: 22px;
    display: flex; /* Già 'flex' nel primo file */
    align-items: center;
    justify-content: center;
    font-size: 12px;
    font-weight: bold; /* 'bold' nel primo file, era 700 */
    box-shadow: 0 4px 10px rgba(230, 57, 70, 0.3); /* Box shadow del primo file */
    border: 2px solid white; /* Border del primo file */
    animation: notificationPulse 1.5s infinite alternate;
}

@keyframes notificationPulse {
    from {
        transform: scale(1);
    }

    to {
        transform: scale(1.15);
    }
}

.user-controls { /* Sostituisce .user-menu */
    display: flex;
    align-items: center;
    margin-left: 20px; /* Aggiunge margine come nel primo file */
}

.username { /* Sostituisce .user-name */
    color: white;
    font-weight: 500;
    margin-right: 15px;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.15);
    letter-spacing: 0.3px;
    font-family: 'Montserrat', 'Arial', sans-serif; /* Coerenza font */
}

.logout-btn {
    background: rgba(255, 255, 255, 0.15);
    border: 1px solid rgba(255, 255, 255, 0.3);
    color: white;
    padding: 8px 15px;
    border-radius: var(--radius-sm); /* Usa --radius-sm del primo file (10px) */
    cursor: pointer;
    font-size: 14px;
    font-weight: 500;
    transition: var(--transition-spring);
    display: flex;
    align-items: center;
    gap: 5px;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    overflow: hidden;
    position: relative;
    font-family: 'Montserrat', 'Arial', sans-serif; /* Coerenza font */
}
.logout-btn.btn-glow { /* Stile per l'effetto glow del primo file */
    position: relative;
    overflow: hidden;
}

.logout-btn.btn-glow::after {
    content: '';
    position: absolute;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
    background: radial-gradient(circle at center, rgba(255, 255, 255, 0.8) 0%, transparent 70%);
    opacity: 0;
    transition: opacity 0.3s ease;
}

.logout-btn.btn-glow:hover::after {
    opacity: 0.2;
    animation: glowPulse 1.5s ease infinite; /* Usa la stessa animazione del badge */
}

/* Keyframes glowPulse se non già definito globalmente per altri bottoni */
@keyframes glowPulse {
    0% { opacity: 0; }
    50% { opacity: 0.2; }
    100% { opacity: 0; }
}

.logout-btn::before {
    content: '';
    position: absolute;
    width: 100%;
    height: 100%;
    background: linear-gradient(120deg,
            rgba(255, 255, 255, 0),
            rgba(255, 255, 255, 0.2),
            rgba(255, 255, 255, 0));
    top: 0;
    left: -100%;
    transition: var(--transition);
    transform: skewX(-15deg);
}

.logout-btn:hover {
    background: rgba(255, 255, 255, 0.25);
    transform: translateY(-3px);
    box-shadow: 0 8px 15px rgba(0, 0, 0, 0.15);
}

.logout-btn:hover::before {
    left: 100%;
    transition: all 0.7s ease;
}

/* === Stili responsivi per la navbar (dal primo file) === */
@media (max-width: 1200px) {
    .header-nav a span {
        display: none; /* Nasconde il testo dei link, lascia solo icone */
    }

    .header-nav a {
        padding: 10px; /* Padding ridotto per solo icone */
        font-size: 16px;
        justify-content: center;
    }

    .header-nav a i {
        margin: 0; /* Rimuove margine se c'era */
    }

    .user-role-badge {
        padding: 8px 12px;
    }
}

@media (max-width: 992px) {
    .header-container {
        flex-wrap: wrap;
        justify-content: center;
        gap: 10px;
    }

    .logo-container {
        margin-right: auto; /* Spinge logo a sinistra */
    }

    .user-controls {
        margin-left: auto; /* Spinge controlli utente a destra */
    }

    header {
        height: auto; /* Altezza automatica per wrap */
        padding: 10px 0;
    }
}

@media (max-width: 768px) {
    .header-container {
        padding: 0 15px;
        flex-direction: column; /* Elementi impilati verticalmente */
        gap: 15px;
    }

    .header-nav {
        flex-wrap: wrap;
        justify-content: center;
        margin: 10px 0;
    }

    .logo-container,
    .user-controls {
        margin: 0; /* Centra logo e controlli utente */
        justify-content: center;
        width: 100%;
    }
}

        /* Main Content */
        .main-container {
            flex: 1;
            display: flex;
            width: 100%;
            max-width: 1400px;
            margin: 0 auto;
            padding: 1.5rem;
            gap: 1.5rem;
        }

        /* Sidebar */
        .sidebar {
            width: 280px;
            flex-shrink: 0;
            background: var(--light);
            border-radius: var(--radius);
            box-shadow: var(--shadow);
            padding: 1.5rem;
            display: flex;
            flex-direction: column;
            gap: 1.5rem;
        }

        .sidebar-header {
            display: flex;
            align-items: center;
            gap: 10px;
            padding-bottom: 15px;
            border-bottom: 1px solid var(--gray-dark);
        }

        .sidebar-title {
            font-size: 1.2rem;
            font-weight: 600;
            color: var(--dark);
        }

        .sidebar-section {
            margin-bottom: 1rem;
        }

        .section-title {
            font-size: 0.9rem;
            font-weight: 600;
            color: var(--text-light);
            text-transform: uppercase;
            letter-spacing: 0.5px;
            margin-bottom: 10px;
        }

        .menu-list {
            list-style: none;
            display: flex;
            flex-direction: column;
            gap: 5px;
        }

        .menu-item {
            display: flex;
            align-items: center;
            padding: 10px 15px;
            border-radius: var(--radius-sm);
            cursor: pointer;
            transition: var(--transition);
            color: var(--text);
            text-decoration: none;
            font-weight: 500;
        }

        .menu-item:hover {
            background-color: var(--gray-light);
        }

        .menu-item.active {
            background-color: rgba(94, 96, 206, 0.1);
            color: var(--primary);
            font-weight: 600;
        }

        .menu-item i {
            margin-right: 10px;
            width: 20px;
            text-align: center;
            color: var(--text-light);
        }

        .menu-item.active i {
            color: var(--primary);
        }

        .sidebar-stats {
            margin-top: auto;
            padding-top: 1rem;
            border-top: 1px solid var(--gray-dark);
        }

        .stat-item {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 10px;
        }

        .stat-label {
            font-size: 0.9rem;
            color: var(--text-light);
        }

        .stat-value {
            font-weight: 600;
            color: var(--dark);
        }

        /* Content Area */
        .content-area {
            flex: 1;
            display: flex;
            flex-direction: column;
            gap: 1.5rem;
        }

        /* Dashboard Overview */
        .overview-cards {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));
            gap: 1.5rem;
        }

        .overview-card {
            background: var(--light);
            border-radius: var(--radius);
            box-shadow: var(--shadow);
            padding: 1.5rem;
            display: flex;
            flex-direction: column;
            gap: 10px;
            transition: var(--transition);
            cursor: pointer;
        }

        .overview-card:hover {
            transform: translateY(-5px);
            box-shadow: var(--shadow-lg);
        }

        .card-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
        }

        .card-title {
            font-size: 0.9rem;
            color: var(--text-light);
            font-weight: 500;
        }

        .card-icon {
            width: 40px;
            height: 40px;
            border-radius: var(--radius-sm);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.2rem;
        }

        .card-icon.sales {
            background-color: rgba(94, 96, 206, 0.1);
            color: var(--primary);
        }

        .card-icon.orders {
            background-color: rgba(72, 191, 227, 0.1);
            color: var(--secondary);
        }

        .card-icon.customers {
            background-color: rgba(46, 204, 113, 0.1);
            color: var(--accent-green);
        }

        .card-icon.time {
            background-color: rgba(243, 156, 18, 0.1);
            color: var(--accent-orange);
        }

        .card-value {
            font-size: 1.5rem;
            font-weight: 700;
            color: var(--dark);
        }

        .card-footer {
            display: flex;
            align-items: center;
            gap: 5px;
            font-size: 0.8rem;
        }

        .trend-up {
            color: var(--accent-green);
        }

        .trend-down {
            color: var(--accent-red);
        }

        /* Pannello Chat */
        .chat-panel {
            background: var(--light);
            border-radius: var(--radius);
            box-shadow: var(--shadow);
            display: flex;
            flex-direction: column;
            height: 650px;
            overflow: hidden;
            position: relative;
        }

        .chat-header {
            padding: 1rem 1.5rem;
            border-bottom: 1px solid var(--gray-dark);
            display: flex;
            justify-content: space-between;
            align-items: center;
            background: var(--light);
            z-index: 10;
        }

        .chat-title {
            font-size: 1.2rem;
            font-weight: 600;
            color: var(--dark);
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .chat-title i {
            color: var(--primary);
        }

        .chat-actions {
            display: flex;
            gap: 10px;
        }

        .chat-action-btn {
            background: var(--gray-light);
            border: none;
            width: 36px;
            height: 36px;
            border-radius: var(--radius-sm);
            display: flex;
            align-items: center;
            justify-content: center;
            color: var(--primary);
            cursor: pointer;
            transition: var(--transition);
        }

        .chat-action-btn:hover {
            background: rgba(94, 96, 206, 0.1);
            color: var(--primary-dark);
            transform: translateY(-2px);
        }

        .chat-conversations {
            flex: 1;
            display: flex;
            overflow: hidden;
        }

        .chat-sidebar {
            width: 320px;
            border-right: 1px solid var(--gray-dark);
            overflow-y: auto;
            background: var(--gray-light);
            display: flex;
            flex-direction: column;
        }

        .chat-search {
            padding: 15px;
            position: sticky;
            top: 0;
            background: var(--gray-light);
            z-index: 5;
            border-bottom: 1px solid var(--gray-dark);
        }

        .search-input {
            width: 100%;
            padding: 10px 15px;
            border-radius: var(--radius-sm);
            border: 1px solid var(--gray-dark);
            background: var(--light);
            display: flex;
            align-items: center;
            gap: 10px;
            transition: var(--transition);
        }

        .search-input i {
            color: var(--text-light);
        }

        .search-input input {
            flex: 1;
            border: none;
            outline: none;
            background: transparent;
            font-size: 0.9rem;
            color: var(--text);
        }

        .search-input:focus-within {
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(94, 96, 206, 0.1);
        }

        .chat-list {
            flex: 1;
            list-style: none;
            display: flex;
            flex-direction: column;
        }

        .chat-item {
            padding: 15px;
            display: flex;
            gap: 15px;
            border-bottom: 1px solid var(--gray-dark);
            cursor: pointer;
            transition: var(--transition);
            position: relative;
        }

        .chat-item:hover {
            background: var(--light);
        }

        .chat-item.active {
            background: var(--light);
        }

        .chat-avatar {
            width: 48px;
            height: 48px;
            border-radius: var(--radius-sm);
            object-fit: cover;
        }

        .chat-item-content {
            flex: 1;
            min-width: 0;
            display: flex;
            flex-direction: column;
            gap: 5px;
        }

        .chat-item-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .chat-name {
            font-weight: 600;
            font-size: 0.95rem;
            color: var(--dark);
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .chat-time {
            font-size: 0.8rem;
            color: var(--text-light);
        }

        .chat-message {
            font-size: 0.85rem;
            color: var(--text-light);
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
            max-width: 100%;
        }

        .chat-item-status {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .chat-status {
            font-size: 0.75rem;
            color: var(--text-light);
        }

        .message-count {
            display: flex;
            align-items: center;
            justify-content: center;
            min-width: 20px;
            height: 20px;
            padding: 0 6px;
            background: var(--primary);
            color: var(--light);
            border-radius: 10px;
            font-size: 0.75rem;
            font-weight: 600;
            margin-left: auto;
        }

        .chat-main {
            flex: 1;
            display: flex;
            flex-direction: column;
            background-color: var(--gray-light);
            background-image: url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%239C92AC' fill-opacity='0.03'%3E%3Cpath d='M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E");
            position: relative;
        }

        .chat-placeholder {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100%;
            padding: 2rem;
            text-align: center;
            color: var(--text-light);
        }

        .placeholder-icon {
            font-size: 4rem;
            margin-bottom: 1rem;
            color: var(--gray-dark);
            background: var(--light);
            width: 100px;
            height: 100px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .placeholder-title {
            font-size: 1.2rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
            color: var(--text);
        }

        .placeholder-text {
            max-width: 400px;
        }

        .chat-content {
            flex: 1;
            padding: 20px;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
        }

        .chat-day {
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 20px 0;
            color: var(--text-light);
            font-size: 0.8rem;
        }

        .chat-day span {
            background: var(--light);
            padding: 5px 10px;
            border-radius: 20px;
        }

        .message {
            display: flex;
            flex-direction: column;
            max-width: 70%;
            margin-bottom: 15px;
            animation: fadeIn 0.3s forwards;
        }

        .message.outgoing {
            align-self: flex-end;
        }

        .message.incoming {
            align-self: flex-start;
        }

        .message-bubble {
            padding: 12px 16px;
            border-radius: var(--radius-sm);
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
            position: relative;
            overflow-wrap: break-word;
        }

        .outgoing .message-bubble {
            background: linear-gradient(135deg, var(--primary), var(--primary-dark));
            color: var(--light);
            border-top-right-radius: 2px;
        }

        .outgoing .message-bubble::after {
            content: '';
            position: absolute;
            right: -8px;
            top: 0;
            border-left: 10px solid var(--primary-dark);
            border-right: 0;
            border-bottom: 10px solid transparent;
        }

        .incoming .message-bubble {
            background: var(--light);
            color: var(--text);
            border-top-left-radius: 2px;
        }

        .incoming .message-bubble::after {
            content: '';
            position: absolute;
            left: -8px;
            top: 0;
            border-right: 10px solid var(--light);
            border-left: 0;
            border-bottom: 10px solid transparent;
        }

        .message-meta {
            margin-top: 5px;
            display: flex;
            align-items: center;
            justify-content: flex-end;
            font-size: 0.75rem;
            color: var(--text-light);
        }

        .outgoing .message-meta {
            color: rgba(255, 255, 255, 0.7);
        }

        .message-time {
            margin-right: 5px;
        }

        .message-status i {
            margin-left: 3px;
        }

        .chat-footer {
            padding: 15px 20px;
            background: var(--light);
            border-top: 1px solid var(--gray-dark);
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .chat-tools {
            display: flex;
            gap: 10px;
        }

        .chat-tool {
            background: transparent;
            border: none;
            color: var(--text-light);
            width: 36px;
            height: 36px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: var(--transition);
        }

        .chat-tool:hover {
            background: var(--gray-light);
            color: var(--primary);
        }

        .chat-input-wrapper {
            flex: 1;
            display: flex;
            align-items: center;
            background: var(--gray-light);
            border-radius: 20px;
            padding: 5px 15px;
            gap: 10px;
            border: 1px solid var(--gray-dark);
            transition: var(--transition);
        }

        .chat-input-wrapper:focus-within {
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(94, 96, 206, 0.1);
        }

        .chat-input {
            flex: 1;
            border: none;
            outline: none;
            background: transparent;
            padding: 10px 0;
            font-size: 0.95rem;
            color: var(--text);
            resize: none;
            min-height: 24px;
            max-height: 100px;
        }

        .chat-send {
            background: var(--primary);
            border: none;
            color: var (--light);
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: var(--transition-spring);
            box-shadow: 0 3px 8px rgba(94, 96, 206, 0.3);
        }

        .chat-send:hover {
            transform: scale(1.1);
            box-shadow: 0 5px 15px rgba(94, 96, 206, 0.4);
        }

        .chat-send:active {
            transform: scale(0.95);
        }

        .typing-indicator {
            padding: 10px 15px;
            background: var(--light);
            border-radius: var(--radius-sm);
            display: inline-flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 15px;
            align-self: flex-start;
            max-width: 100px;
            animation: fadeIn 0.3s forwards;
        }


            .error-message {
        padding: 20px;
        background-color: #ffeeee;
        color: #d85030;
        border-radius: 8px;
        margin: 20px;
        text-align: center;
        font-size: 14px;
        line-height: 1.5;
    }
    
    .refresh-button {
        margin-top: 15px;
        padding: 8px 16px;
        background-color: var(--primary);
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }
    
    .refresh-button:hover {
        background-color: #4850e0;
    }

        .typing-dots {
            display: flex;
            align-items: center;
            gap: 4px;
        }

        .typing-dot {
            width: 7px;
            height: 7px;
            border-radius: 50%;
            background: var(--text-light);
            animation: typingAnimation 1.4s infinite;
        }

        .typing-dot:nth-child(2) {
            animation-delay: 0.2s;
        }

        .typing-dot:nth-child(3) {
            animation-delay: 0.4s;
        }

        @keyframes typingAnimation {
            0%, 60%, 100% {
                transform: translateY(0);
                opacity: 0.6;
            }
            30% {
                transform: translateY(-4px);
                opacity: 1;
            }
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        /* Connection status */
        .connection-status {
            position: fixed;
            top: 10px;
            left: 50%;
            transform: translateX(-50%);
            background-color: var(--accent-red);
            color: white;
            padding: 8px 16px;
            border-radius: var(--radius-full);
            font-size: 14px;
            font-weight: 500;
            box-shadow: var(--shadow);
            display: flex;
            align-items: center;
            gap: 8px;
            opacity: 0;
            pointer-events: none;
            transition: var(--transition);
            z-index: 1000;
        }

        .connection-status.show {
            opacity: 1;
            pointer-events: auto;
        }

        .connection-status.connected {
            background-color: var(--accent-green);
            opacity: 1;
            animation: fadeOut 3s forwards 2s;
        }

        @keyframes fadeOut {
            to {
                opacity: 0;
                pointer-events: none;
            }
        }

        .connection-icon {
            font-size: 16px;
            animation: blink 1s infinite;
        }

        @keyframes blink {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }

        /* Responsive */
        @media (max-width: 1200px) {
            .main-container {
                flex-direction: column;
            }

            .sidebar {
                width: 100%;
            }

            .chat-panel {
                height: 500px;
            }
        }

        @media (max-width: 768px) {
            .header-container {
                flex-direction: column;
                gap: 10px;
                padding: 1rem;
            }

            .nav-menu {
                width: 100%;
                overflow-x: auto;
                padding-bottom: 10px;
                -ms-overflow-style: none;
                scrollbar-width: none;
            }

            .nav-menu::-webkit-scrollbar {
                display: none;
            }

            .nav-link {
                white-space: nowrap;
            }

            .main-container {
                padding: 1rem;
            }

            .overview-cards {
                grid-template-columns: 1fr;
            }

            .chat-conversations {
                flex-direction: column;
            }

            .chat-sidebar {
                width: 100%;
                height: 200px;
                border-right: none;
                border-bottom: 1px solid var(--gray-dark);
            }
        }
    </style>
</head>
<body>
    <!-- Connection status indicator -->
    <div class="connection-status" id="connectionStatus">
        <i class="fas fa-sync-alt connection-icon"></i>
        <span id="connectionText">Connessione in corso...</span>
    </div>

    <!-- Particle Background -->
    <div class="particles" id="particles"></div>

    <!-- Header -->
<!-- Header (Navbar) - Sostituisci il tuo <header> esistente con questo -->
<header>
    <div class="header-container">
        <div class="logo-container">
            <img src="/img/logo.png" alt="YourBite Logo" class="logo">
            <h1 class="header-title">YourBite</h1>
        </div>

        <div class="header-nav">
            <!-- Se questa è la homepage_capo, il link "Homepage" sarà attivo -->
            <a href="/homepage_capo" class="active home-button"> <!-- Assumi che /homepage_capo sia l'URL della homepage capo -->
                <i class="fas fa-home"></i> <span>Homepage</span>
            </a>
            <a href="/dashboard"> <!-- Assumi che /dashboard sia l'URL della dashboard -->
                <i class="fas fa-chart-line"></i> <span>Dashboard</span>
            </a>
            <a href="/ordini"> <!-- Assumi che /ordini sia l'URL degli ordini -->
                <i class="fas fa-shopping-bag"></i> <span>Ordini</span>
            </a>
            <a href="/menu"> <!-- Assumi che /menu sia l'URL del menu -->
                <i class="fas fa-utensils"></i> <span>Menu</span>
            </a>
            <a href="/clienti"> <!-- Assumi che /clienti sia l'URL dei clienti -->
                <i class="fas fa-users"></i> <span>Clienti</span>
            </a>
            <a href="/impostazioni"> <!-- Assumi che /impostazioni sia l'URL delle impostazioni -->
                <i class="fas fa-cog"></i> <span>Impostazioni</span>
            </a>

            <div style="position: relative; margin-left: 10px;">
                <!-- Il numero di notifiche (0) e display:none dovrebbe essere gestito da JS -->
                <span id="notification-badge" style="display: none;">0</span>
                <span class="user-role-badge">
                    <i class="fas fa-crown"></i> Capo
                </span>
            </div>
        </div>

        <div class="user-controls">
            <!-- Dovrai popolare dinamicamente lo username. Uso "Manager" come nel tuo secondo file,
                 ma idealmente sarebbe qualcosa come {{user.username}} se usi un template engine -->
            
            <button class="logout-btn btn-glow" onclick="logout()"> <!-- Assicurati che la funzione logout() sia definita e funzionante -->
                <i class="fas fa-sign-out-alt"></i> Logout
            </button>
        </div>
    </div>
</header>

    <!-- Main Content -->
    <main class="main-container">
        <!-- Sidebar -->
        <aside class="sidebar">
            <div class="sidebar-header">
                <i class="fas fa-chart-line"></i>
                <h2 class="sidebar-title">Dashboard</h2>
            </div>

            <div class="sidebar-section">
                <h3 class="section-title">Menu</h3>
                <ul class="menu-list">
                    <li>
                        <a href="#" class="menu-item active">
                            <i class="fas fa-home"></i>
                            Homepage
                        </a>
                    </li>
                    <li>
                        <a href="Dashboard" class="menu-item">
                            <i class="fas fa-home"></i>
                            Dashboard
                        </a>
                    </li>
                    <li>
                        <a href="Ordini" class="menu-item">
                            <i class="fas fa-shopping-bag"></i>
                            Ordini
                        </a>
                    </li>
                    <li>
                        <a href="Menu" class="menu-item">
                            <i class="fas fa-utensils"></i>
                            Menu
                        </a>
                    </li>
                    <li>
                        <a href="Clienti" class="menu-item">
                            <i class="fas fa-users"></i>
                            Clienti
                        </a>
                    </li>
                    <li>
                        <a href="Personale" class="menu-item">
                            <i class="fas fa-users"></i>
                            Personale
                        </a>
                    </li>
                </ul>
            </div>

            <div class="sidebar-section">
                <h3 class="section-title">Strumenti</h3>
                <ul class="menu-list">
                    <li>
                        <a href="Impostazioni" class="menu-item">
                            <i class="fas fa-cog"></i>
                            Impostazioni
                        </a>
                    </li>
                    <li>
                        <a href="Profilo" class="menu-item">
                            <i class="fas fa-user-cog"></i>
                            Profilo
                        </a>
                    </li>
                    <li>
                        <a href="Login" class="menu-item" id="logoutBtn">
                            <i class="fas fa-sign-out-alt"></i>
                            Logout
                        </a>
                    </li>
                </ul>
            </div>

            <div class="sidebar-stats">
                <div class="stat-item">
                    <span class="stat-label">Ordini oggi</span>
                    <span class="stat-value">24</span>
                </div>
                <div class="stat-item">
                    <span class="stat-label">Clienti attivi</span>
                    <span class="stat-value">156</span>
                </div>
                <div class="stat-item">
                    <span class="stat-label">Tempo medio consegna</span>
                    <span class="stat-value">25 min</span>
                </div>
            </div>
        </aside>

        <!-- Content Area -->
        <div class="content-area">
            <!-- Overview Cards -->
            <div class="overview-cards">
                <div class="overview-card">
                    <div class="card-header">
                        <h3 class="card-title">Vendite Oggi</h3>
                        <div class="card-icon sales">
                            <i class="fas fa-euro-sign"></i>
                        </div>
                    </div>
                    <div class="card-value">€1,250</div>
                    <div class="card-footer">
                        <i class="fas fa-arrow-up trend-up"></i>
                        <span class="trend-up">+12% rispetto a ieri</span>
                    </div>
                </div>

                <div class="overview-card">
                    <div class="card-header">
                        <h3 class="card-title">Ordini Completati</h3>
                        <div class="card-icon orders">
                            <i class="fas fa-shopping-bag"></i>
                        </div>
                    </div>
                    <div class="card-value">24</div>
                    <div class="card-footer">
                        <i class="fas fa-arrow-up trend-up"></i>
                        <span class="trend-up">+8% rispetto a ieri</span>
                    </div>
                </div>

                <div class="overview-card">
                    <div class="card-header">
                        <h3 class="card-title">Nuovi Clienti</h3>
                        <div class="card-icon customers">
                            <i class="fas fa-user-plus"></i>
                        </div>
                    </div>
                    <div class="card-value">8</div>
                    <div class="card-footer">
                        <i class="fas fa-arrow-down trend-down"></i>
                        <span class="trend-down">-3% rispetto a ieri</span>
                    </div>
                </div>

                <div class="overview-card">
                    <div class="card-header">
                        <h3 class="card-title">Tempo Medio Consegna</h3>
                        <div class="card-icon time">
                            <i class="fas fa-clock"></i>
                        </div>
                    </div>
                    <div class="card-value">25 min</div>
                    <div class="card-footer">
                        <i class="fas fa-arrow-up trend-up"></i>
                        <span class="trend-up">+5% più veloce di ieri</span>
                    </div>
                </div>
            </div>

            <!-- Chat Panel -->
            <div class="chat-panel">
                <div class="chat-header">
                    <div class="chat-title">
                        <i class="fas fa-comments"></i>
                        Assistenza Clienti
                    </div>
                    <div class="chat-actions">
                        <button class="chat-action-btn" title="Filtra Chat">
                            <i class="fas fa-filter"></i>
                        </button>
                        <!-- --- MODIFICATO: Aggiunto stile inline all'icona per colore rosso --- -->
                        <button class="chat-action-btn delete-all-btn" title="Elimina tutte le chat" id="deleteAllChatsBtn">
                            <i class="fas fa-trash" style="color: var(--accent-red);"></i>
                        </button>
                        <button class="chat-action-btn" title="Nuovo Messaggio">
                            <i class="fas fa-plus"></i>
                        </button>
                    </div>
                </div>

                <div class="chat-conversations">
                    <div class="chat-sidebar">
                        <div class="chat-search">
                            <div class="search-input">
                                <i class="fas fa-search"></i>
                                <input type="text" placeholder="Cerca clienti...">
                            </div>
                        </div>

                        <ul class="chat-list" id="chatList">
                            <!-- Le chat saranno aggiunte qui dinamicamente -->
                        </ul>
                    </div>

                    <div class="chat-main" id="chatMain">
                        <div class="chat-placeholder" id="chatPlaceholder">
                            <div class="placeholder-icon">
                                <i class="far fa-comments"></i>
                            </div>
                            <h3 class="placeholder-title">Seleziona una chat</h3>
                            <p class="placeholder-text">Seleziona una chat dalla lista per visualizzare i messaggi o iniziare una nuova conversazione.</p>
                        </div>

                        <div class="chat-content" id="chatContent" style="display: none;">
                            <!-- I messaggi saranno aggiunti qui dinamicamente -->
                        </div>

                        <div class="chat-footer" id="chatFooter" style="display: none;">
                            <div class="chat-tools">
                                <button class="chat-tool" title="Emoji">
                                    <i class="far fa-smile"></i>
                                </button>
                                <button class="chat-tool" title="Allega File">
                                    <i class="fas fa-paperclip"></i>
                                </button>
                            </div>
                            <div class="chat-input-wrapper">
                                <textarea class="chat-input" id="chatInput" placeholder="Scrivi un messaggio..." rows="1"></textarea>
                            </div>
                            <button class="chat-send" id="chatSend">
                                <i class="fas fa-paper-plane"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </main>

<script>
    // Soluzione alternativa per forzare il funzionamento del pulsante
document.querySelector('#chatSend').onclick = function() {
  console.log("Click forzato");
  const chatInput = document.getElementById('chatInput');
  const message = chatInput.value.trim();
  if (!message) return;
  
  const chatContent = document.getElementById('chatContent');
  const now = new Date();
  const timeString = now.toLocaleTimeString('it-IT', {hour: '2-digit', minute: '2-digit'});
  
  const messageDiv = document.createElement('div');
  messageDiv.className = 'message outgoing';
  messageDiv.innerHTML = `
    <div class="message-bubble">${message}</div>
    <div class="message-meta">
      <span class="message-time">${timeString}</span>
      <span class="message-status"><i class="fas fa-check"></i></span>
    </div>
  `;
  
  chatContent.appendChild(messageDiv);
  chatContent.scrollTop = chatContent.scrollHeight;
  chatInput.value = '';
  
  if (socket) {
    socket.emit('message', {
      sender: operatorId,
      senderName: operatorName,
      content: message,
      timestamp: now.toISOString(),
      roomId: `support_${activeChat}`
    });
  }
};
document.addEventListener('DOMContentLoaded', function() {
    // Rimuoviamo il precedente onclick per evitare conflitti
    const sendButton = document.getElementById('chatSend');
    if (sendButton) {
        sendButton.onclick = null;
    }

    // Verifica i cookie prima di tutto
    checkCookieStatus();
    
    // Verifica la sessione ma senza reindirizzamenti automatici
    checkSessionStatusWithoutRedirect();
    
    // Initialize Socket.IO connection
    initializeSocketIO();
    
    // Setup message input e chat send (modificato)
    setupMessageInput();
    
    // Setup logout button
    setupLogoutButton();
    
    // Aggiungi qui il nuovo handler per il pulsante di invio (garantisce che venga applicato per ultimo)
    setTimeout(fixSendButton, 1000);

    // --- MODIFICATO: Snippet di iniezione CSS aggiornato ---
    document.head.insertAdjacentHTML('beforeend', `
      <style>
        /* Delete button styling for individual chats (quello su ogni chat item) */
        .delete-chat-btn {
          position: absolute;
          right: 10px;
          top: 50%;
          transform: translateY(-50%);
          background: transparent;
          border: none;
          color: var(--accent-red, #e74c3c); /* Icona rossa */
          width: 30px;
          height: 30px;
          border-radius: 50%;
          display: none; /* Nascosto di default, mostrato su hover del .chat-item */
          align-items: center;
          justify-content: center;
          cursor: pointer;
          transition: all 0.2s ease;
          z-index: 10;
        }
        
        .chat-item {
          position: relative;
        }
        
        .chat-item:hover .delete-chat-btn {
          display: flex; /* Mostra il pulsante su hover del .chat-item */
        }
        
        .delete-chat-btn:hover {
          background-color: rgba(231, 76, 60, 0.1);
          transform: translateY(-50%) scale(1.1);
        }
        
        /* Delete all button styling (quello nel chat-header) */
        /* L'HTML ha <i style="color: var(--accent-red);">, quindi l'icona è già rossa.
           Il pulsante ha le classi .chat-action-btn .delete-all-btn.
           .chat-action-btn dà lo sfondo grigio chiaro (var(--gray-light)).
           Non dobbiamo sovrascrivere lo sfondo o il colore dell'icona qui.
           Dobbiamo solo definire lo stato :hover per coerenza con gli altri pulsanti rossi.
        */
        #deleteAllChatsBtn { 
          /* Eredita width, height, padding, border-radius, display, align-items, justify-content
             border, cursor, transition da .chat-action-btn.
             Eredita anche lo sfondo da .chat-action-btn.
             L'icona è rossa grazie allo stile inline.
          */
          /* margin-left: 10px; /* Se .chat-actions non ha 'gap', altrimenti rimuovere.
                                     Sembra che .chat-actions abbia già 'gap: 10px' */
        }
        
        #deleteAllChatsBtn:hover {
          background: rgba(231, 76, 60, 0.1); /* Sfondo rosso leggero su hover, come .delete-chat-btn:hover */
          /* L'icona rimane rossa grazie allo stile inline.
             Eredita transform: translateY(-2px) da .chat-action-btn:hover
          */
        }

        /* Toast notification styles */
        .toast-notification {
            position: fixed;
            top: 20px;
            right: 20px;
            background-color: #fff;
            border-radius: var(--radius-sm);
            box-shadow: var(--shadow-lg);
            display: flex;
            align-items: center;
            padding: 15px 20px;
            z-index: 1001;
            transform: translateX(120%);
            transition: transform 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
            min-width: 300px;
            max-width: 400px;
        }
        .toast-notification.show {
            transform: translateX(0);
        }
        .toast-icon {
            font-size: 1.5rem;
            margin-right: 15px;
        }
        .toast-success .toast-icon { color: var(--accent-green); }
        .toast-error .toast-icon { color: var(--accent-red); }
        .toast-warning .toast-icon { color: var(--accent-orange); }
        .toast-info .toast-icon { color: var(--secondary); }

        .toast-content {
            flex-grow: 1;
        }
        .toast-title {
            font-weight: 600;
            color: var(--dark);
            margin-bottom: 3px;
        }
        .toast-message {
            font-size: 0.9rem;
            color: var(--text-light);
        }
        .toast-close {
            margin-left: 15px;
            background: transparent;
            border: none;
            color: var(--text-light);
            cursor: pointer;
            padding: 5px;
        }
        .toast-close:hover {
            color: var(--dark);
        }
      </style>
    `);

    // Setup delete all chats button
    const deleteAllChatsBtn = document.getElementById('deleteAllChatsBtn');
    if (deleteAllChatsBtn) {
        deleteAllChatsBtn.addEventListener('click', function() {
            showConfirmDialog(
                'Eliminare tutte le chat?', 
                'Sei sicuro di voler eliminare TUTTE le chat? Questa azione è irreversibile e tutti i messaggi verranno persi definitivamente.',
                deleteAllChats
            );
        });
    }

    // Initialize delete buttons (per i chat items) e altre logiche
    setTimeout(initializeDeleteButtons, 1000); // setTimeout già presente per questo
});


    
    // Update client list (la funzione che aggiunge i .delete-chat-btn)
    function updateClientList(newClients) {
        clients = newClients;
        const chatList = document.getElementById('chatList');
        if (!chatList) return;
        
        chatList.innerHTML = '';
        
        if (!clients || !clients.length) {
            const emptyItem = document.createElement('li');
            emptyItem.className = 'chat-item';
            emptyItem.innerHTML = '<div class="chat-item-content"><div class="chat-name">Nessun cliente disponibile</div></div>';
            chatList.appendChild(emptyItem);
            return;
        }
        
        clients.forEach((client, index) => {
            const chatItem = document.createElement('li');
            chatItem.className = 'chat-item';
            chatItem.dataset.userId = client.id;
            
            if (client.id === activeChat) {
                chatItem.classList.add('active');
            }
            
            let timeText = '';
            if (client.lastMessage && client.lastMessage.timestamp) {
                const msgDate = new Date(client.lastMessage.timestamp);
                const now = new Date();
                const isToday = msgDate.toDateString() === now.toDateString();
                
                if (isToday) {
                    timeText = msgDate.toLocaleTimeString('it-IT', {hour: '2-digit', minute:'2-digit'});
                } else {
                    timeText = msgDate.toLocaleDateString('it-IT', {day: '2-digit', month: '2-digit'});
                }
            }
            
            const displayName = client.name || `Cliente ${index + 1}`;
            
            chatItem.innerHTML = `
                <img src="${client.avatar || 'https://source.unsplash.com/random/100x100/?person'}" alt="${displayName}" class="chat-avatar">
                <div class="chat-item-content">
                    <div class="chat-item-header">
                        <div class="chat-name">${displayName} (ID: ${client.id.substring(0, 5)}...)</div>
                        <div class="chat-time">${timeText}</div>
                    </div>
                    <div class="chat-message">${client.lastMessage ? client.lastMessage.text : 'Nessun messaggio'}</div>
                    <div class="chat-item-status">
                        <div class="chat-status">${client.online ? 'Online' : 'Offline'}</div>
                        ${client.unreadCount ? `<div class="message-count">${client.unreadCount}</div>` : ''}
                    </div>
                </div>
                <button class="delete-chat-btn" title="Elimina chat" data-user-id="${client.id}">
                    <i class="fas fa-trash"></i>
                </button>
            `; // Il pulsante delete-chat-btn è qui
            
            chatItem.addEventListener('click', (e) => {
                if (e.target.closest('.delete-chat-btn')) {
                    return;
                }
                openChat(client.id);
            });
            
            chatList.appendChild(chatItem);
        });
        
        // Non è necessario ri-attaccare i listener qui se initializeDeleteButtons viene chiamato dopo updateClientList
        // tramite l'override, o se la chiamata a initializeDeleteButtons nel DOMContentLoaded è sufficiente
        // dato che .delete-chat-btn sono creati DENTRO updateClientList.
        // L'override di window.updateClientList che chiama initializeDeleteButtons() dopo 
        // aver chiamato l'originale è la soluzione più robusta.
    }
    
    // Funzione per mostrare il dialogo di conferma
    function showConfirmDialog(title, message, confirmCallback) {
        const overlay = document.createElement('div');
        overlay.className = 'confirm-overlay';
        
        overlay.innerHTML = `
            <div class="confirm-dialog">
                <div class="confirm-icon">
                    <i class="fas fa-exclamation-triangle"></i>
                </div>
                <h3 class="confirm-title">${title}</h3>
                <p class="confirm-message">${message}</p>
                <div class="confirm-buttons">
                    <button class="confirm-btn confirm-cancel">Annulla</button>
                    <button class="confirm-btn confirm-delete">Elimina</button>
                </div>
            </div>
        `;
        
        document.body.appendChild(overlay);
        
        overlay.querySelector('.confirm-cancel').addEventListener('click', () => {
            document.body.removeChild(overlay);
        });
        
        overlay.querySelector('.confirm-delete').addEventListener('click', () => {
            document.body.removeChild(overlay);
            confirmCallback();
        });
    }
    
    // Funzione per eliminare una chat specifica
    function deleteChat(userId) {
        console.log("Deleting chat for user:", userId);
        const roomId = `support_${userId}`;
        
        const loadingOverlay = createLoadingOverlay('Eliminazione in corso...');
        document.body.appendChild(loadingOverlay);
        
        fetch(`/api/chat/messages/${roomId}`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json'
            }
        })
        .then(response => {
            if (!response.ok) {
                throw new Error(`Errore ${response.status}: ${response.statusText}`);
            }
            return response.json();
        })
        .then(data => {
            console.log('Chat eliminata con successo:', data);
            clients = clients.filter(client => client.id !== userId);
            updateClientList(clients); // Questo chiamerà initializeDeleteButtons a causa dell'override
            
            if (activeChat === userId) {
                activeChat = null;
                document.getElementById('chatPlaceholder').style.display = 'flex';
                document.getElementById('chatContent').style.display = 'none';
                document.getElementById('chatFooter').style.display = 'none';
            }
            showToast('Chat eliminata', 'La chat è stata eliminata con successo', 'success');
            document.body.removeChild(loadingOverlay);
        })
        .catch(error => {
            console.error('Errore durante l\'eliminazione della chat:', error);
            showToast('Errore', 'Si è verificato un errore durante l\'eliminazione della chat', 'error');
            document.body.removeChild(loadingOverlay);
        });
    }
    
    // Funzione per eliminare tutte le chat
    function deleteAllChats() {
      const loadingOverlay = createLoadingOverlay('Eliminazione di tutte le chat in corso...');
      document.body.appendChild(loadingOverlay);
      
      fetch('/api/chat/all-conversations', {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json'
        }
      })
      .then(response => {
        if (!response.ok) {
          throw new Error(`Errore ${response.status}: ${response.statusText}`);
        }
        return response.json();
      })
      .then(data => {
        console.log('Tutte le chat eliminate con successo:', data);
        clients = [];
        activeChat = null;
        updateClientList(clients); // Questo chiamerà initializeDeleteButtons
        document.getElementById('chatPlaceholder').style.display = 'flex';
        document.getElementById('chatContent').style.display = 'none';
        document.getElementById('chatFooter').style.display = 'none';
        showToast('Chat eliminate', 'Tutte le chat sono state eliminate con successo', 'success');
        document.body.removeChild(loadingOverlay);
      })
      .catch(error => {
        console.error('Errore durante l\'eliminazione di tutte le chat:', error);
        showToast('Errore', 'Si è verificato un errore durante l\'eliminazione delle chat', 'error');
        document.body.removeChild(loadingOverlay);
      });
    }
    
    function createLoadingOverlay(message) {
        const overlay = document.createElement('div');
        overlay.style.position = 'fixed';
        overlay.style.top = '0';
        overlay.style.left = '0';
        overlay.style.width = '100%';
        overlay.style.height = '100%';
        overlay.style.backgroundColor = 'rgba(255, 255, 255, 0.8)';
        overlay.style.display = 'flex';
        overlay.style.flexDirection = 'column';
        overlay.style.justifyContent = 'center';
        overlay.style.alignItems = 'center';
        overlay.style.zIndex = '2000';
        overlay.style.backdropFilter = 'blur(5px)';
        
        const spinnerContainer = document.createElement('div');
        spinnerContainer.style.width = '60px';
        spinnerContainer.style.height = '60px';
        spinnerContainer.style.position = 'relative';
        
        const spinner = document.createElement('div');
        spinner.style.border = '4px solid rgba(0, 0, 0, 0.1)';
        spinner.style.borderTopColor = 'var(--primary)';
        spinner.style.borderRadius = '50%';
        spinner.style.width = '100%';
        spinner.style.height = '100%';
        spinner.style.animation = 'spin 1s linear infinite';
        
        // Assicura che l'animazione @keyframes spin sia definita una sola volta
        if (!document.getElementById('spin-animation-style')) {
            const style = document.createElement('style');
            style.id = 'spin-animation-style';
            style.textContent = `
                @keyframes spin {
                    0% { transform: rotate(0deg); }
                    100% { transform: rotate(360deg); }
                }
            `;
            document.head.appendChild(style);
        }
        
        spinnerContainer.appendChild(spinner);
        
        const loadingText = document.createElement('p');
        loadingText.textContent = message;
        loadingText.style.marginTop = '20px';
        loadingText.style.color = 'var(--primary)';
        loadingText.style.fontWeight = '500';
        
        overlay.appendChild(spinnerContainer);
        overlay.appendChild(loadingText);
        
        return overlay;
    }
    
    function showToast(title, message, type = 'success') {
        const existingToast = document.querySelector('.toast-notification');
        if (existingToast) {
            existingToast.remove();
        }
        
        const toast = document.createElement('div');
        toast.className = `toast-notification toast-${type}`;
        
        let iconClass = 'check-circle';
        if (type === 'error') iconClass = 'exclamation-circle';
        if (type === 'warning') iconClass = 'exclamation-triangle';
        if (type === 'info') iconClass = 'info-circle';
        
        toast.innerHTML = `
            <div class="toast-icon">
                <i class="fas fa-${iconClass}"></i>
            </div>
            <div class="toast-content">
                <div class="toast-title">${title}</div>
                <div class="toast-message">${message}</div>
            </div>
            <button class="toast-close">
                <i class="fas fa-times"></i>
            </button>
        `;
        
        document.body.appendChild(toast);
        
        setTimeout(() => {
            toast.classList.add('show');
        }, 10);
        
        const closeButton = toast.querySelector('.toast-close');
        closeButton.addEventListener('click', () => {
            toast.classList.remove('show');
            setTimeout(() => {
                if (toast.parentNode) {
                    toast.parentNode.removeChild(toast);
                }
            }, 300);
        });
        
        setTimeout(() => {
            if (toast.classList.contains('show')) {
                toast.classList.remove('show');
                setTimeout(() => {
                    if (toast.parentNode) {
                        toast.parentNode.removeChild(toast);
                    }
                }, 300);
            }
        }, 5000);
    }
    
// Funzione specifica per correggere il pulsante di invio
function fixSendButton() {
    console.log("Correzione pulsante invio");
    const chatSendButton = document.getElementById('chatSend');
    
    if (!chatSendButton) {
        console.error("Elemento chatSend non trovato!");
        return;
    }
    
    const newButton = chatSendButton.cloneNode(true);
    chatSendButton.parentNode.replaceChild(newButton, chatSendButton);
    
    newButton.addEventListener('click', function(e) {
        console.log("Pulsante invio cliccato");
        e.preventDefault();
        sendChatMessage();
    });
    
    console.log("Listener aggiunto correttamente al pulsante di invio");
}

function checkCookieStatus() {
    const cookies = document.cookie;
    console.log("Cookie attuali:", cookies);
    if (!cookies.includes('connect.sid')) {
        console.warn("Il cookie di sessione connect.sid non è presente!");
    }
}

function checkSessionStatusWithoutRedirect() {
    console.log("Verifico lo stato della sessione...");
    fetch('/auth-status')
        .then(response => response.json())
        .then(data => {
            console.log("Risposta auth-status completa:", data);
            const isAuthenticated = 
                (data.isAuthenticated === true) || 
                (data.sessionUser && data.sessionUser.tipo) || 
                (data.user && data.user.tipo);
            
            if (!isAuthenticated) {
                console.error("Utente non autenticato");
                showAuthAlert("Sessione non valida", "La tua sessione non è attiva. Per favore rieffettua il login.", true);
            } else {
                console.log("Autenticazione verificata con successo");
                const debugDivs = document.querySelectorAll('[style*="position:fixed;bottom:10px;right:10px"]');
                debugDivs.forEach(div => div.remove());
                
                const authMsgDiv = document.createElement('div');
                authMsgDiv.style.cssText = "position:fixed;bottom:10px;right:10px;background:#d4edda;border:1px solid green;padding:10px;z-index:10000";
                authMsgDiv.textContent = 'Autenticato come: ' + (data.sessionUser ? data.sessionUser.tipo : 'capo');
                document.body.appendChild(authMsgDiv);
                
                setTimeout(() => {
                    if (authMsgDiv.parentNode) {
                        authMsgDiv.parentNode.removeChild(authMsgDiv);
                    }
                }, 3000);
            }
        })
        .catch(error => {
            console.error("Errore nella verifica della sessione:", error);
            const errorMsgDiv = document.createElement('div');
            errorMsgDiv.style.cssText = "position:fixed;bottom:10px;right:10px;background:#f8d7da;border:1px solid red;padding:10px;z-index:10000";
            errorMsgDiv.textContent = 'Errore tecnico: ' + error.message;
            document.body.appendChild(errorMsgDiv);
        });
}

function showAuthAlert(title, message, showLoginButton = false) {
    const alertDiv = document.createElement('div');
    alertDiv.className = 'auth-alert';
    alertDiv.style.cssText = `
        position: fixed; top: 20px; right: 20px;
        background-color: #f8d7da; border-color: #f5c6cb; color: #721c24;
        padding: 12px 20px; border-radius: 5px;
        box-shadow: 0 3px 6px rgba(0,0,0,0.1);
        z-index: 9999; max-width: 400px;
    `;
    
    alertDiv.innerHTML = `
        <h4 style="margin-top:0;margin-bottom:10px;font-size:18px">${title}</h4>
        <p style="margin-bottom: ${showLoginButton ? '15px' : '0'};margin-top:0">${message}</p>
        ${showLoginButton ? '<button id="redirectLoginBtn" style="background:#dc3545;color:white;border:none;padding:8px 15px;border-radius:5px;cursor:pointer">Vai al login</button>' : ''}
    `;
    
    document.body.appendChild(alertDiv);
    
    if (showLoginButton) {
        document.getElementById('redirectLoginBtn').addEventListener('click', function() {
            window.location.href = '/login';
        });
    }
    
    if (!showLoginButton) {
        setTimeout(() => {
            if (alertDiv.parentNode) {
                alertDiv.parentNode.removeChild(alertDiv);
            }
        }, 10000);
    }
}

function createParticles() {
    const particles = document.getElementById('particles');
    if (!particles) return;
    console.log("Particles background would be created here");
}

let socket;
const userType = 'capo';
const operatorId = 'operator_' + Math.random().toString(36).substring(2, 9);
const operatorName = 'Assistenza YourBite';
let activeChat = null;
let clients = [];

function initializeDeleteButtons() {
  console.log("Initializing delete buttons for chat items...");
  document.querySelectorAll('.delete-chat-btn').forEach(btn => {
    const newBtn = btn.cloneNode(true); // Clone to remove old listeners
    btn.parentNode.replaceChild(newBtn, btn);
    
    newBtn.addEventListener('click', function(e) {
      e.stopPropagation();
      const userId = this.dataset.userId;
      showConfirmDialog(
        'Eliminare la chat?',
        'Sei sicuro di voler eliminare questa chat? Questa azione è irreversibile e tutti i messaggi verranno persi.',
        () => deleteChat(userId)
      );
    });
  });
}

// Override the updateClientList function to ensure delete buttons work
const originalUpdateClientList = window.updateClientList; // Store original if already defined, else it's the one above
window.updateClientList = function(newClients) {
  if (typeof originalUpdateClientList === 'function' && originalUpdateClientList !== window.updateClientList) {
      originalUpdateClientList(newClients); // Call the original function in the file
  } else {
      // This is the case if originalUpdateClientList was not yet defined or was this same function
      // Call the actual implementation of updateClientList defined in this script
      // To avoid infinite recursion if originalUpdateClientList points to this override.
      // We need a way to call the "base" updateClientList defined in this file.
      // Let's rename the base function slightly for clarity
      baseUpdateClientListLogic(newClients);
  }
  
  initializeDeleteButtons(); // Ensure listeners are re-attached
};

// Renamed base function for updateClientList logic
function baseUpdateClientListLogic(newClients) {
    clients = newClients;
    const chatList = document.getElementById('chatList');
    if (!chatList) return;
    
    chatList.innerHTML = '';
    
    if (!clients || !clients.length) {
        const emptyItem = document.createElement('li');
        emptyItem.className = 'chat-item';
        emptyItem.innerHTML = '<div class="chat-item-content"><div class="chat-name">Nessun cliente disponibile</div></div>';
        chatList.appendChild(emptyItem);
        return;
    }
    
    clients.forEach((client, index) => {
        const chatItem = document.createElement('li');
        chatItem.className = 'chat-item';
        chatItem.dataset.userId = client.id;
        
        if (client.id === activeChat) {
            chatItem.classList.add('active');
        }
        
        let timeText = '';
        if (client.lastMessage && client.lastMessage.timestamp) {
            const msgDate = new Date(client.lastMessage.timestamp);
            const now = new Date();
            const isToday = msgDate.toDateString() === now.toDateString();
            
            if (isToday) {
                timeText = msgDate.toLocaleTimeString('it-IT', {hour: '2-digit', minute:'2-digit'});
            } else {
                timeText = msgDate.toLocaleDateString('it-IT', {day: '2-digit', month: '2-digit'});
            }
        }
        
        const displayName = client.name || `Cliente ${index + 1}`;
        
        chatItem.innerHTML = `
            <img src="${client.avatar || 'https://source.unsplash.com/random/100x100/?person'}" alt="${displayName}" class="chat-avatar">
            <div class="chat-item-content">
                <div class="chat-item-header">
                    <div class="chat-name">${displayName} (ID: ${client.id.substring(0, 5)}...)</div>
                    <div class="chat-time">${timeText}</div>
                </div>
                <div class="chat-message">${client.lastMessage ? client.lastMessage.text : 'Nessun messaggio'}</div>
                <div class="chat-item-status">
                    <div class="chat-status">${client.online ? 'Online' : 'Offline'}</div>
                    ${client.unreadCount ? `<div class="message-count">${client.unreadCount}</div>` : ''}
                </div>
            </div>
            <button class="delete-chat-btn" title="Elimina chat" data-user-id="${client.id}">
                <i class="fas fa-trash"></i>
            </button>
        `;
        
        chatItem.addEventListener('click', (e) => {
            if (e.target.closest('.delete-chat-btn')) {
                return;
            }
            openChat(client.id);
        });
        
        chatList.appendChild(chatItem);
    });
}


// Inizializza Socket.IO
function initializeSocketIO() {
    const connectionStatus = document.getElementById('connectionStatus');
    const connectionText = document.getElementById('connectionText');
    connectionStatus.classList.remove('show');
    socket = io();
    const connectionTimeout = setTimeout(() => {
        connectionStatus.classList.add('show');
        connectionText.textContent = 'Connessione in corso...';
    }, 2000);
    
    socket.on('connect', function() {
        console.log('Socket.IO connection established');
        clearTimeout(connectionTimeout);
        connectionStatus.classList.remove('show');
        socket.emit('operatorJoin', { userId: operatorId, username: operatorName });
        loadSupportRequests();
    });
    
    socket.on('new_support_request', function(data) {
        console.log('Nuova richiesta di supporto:', data);
        const existingClientIndex = clients.findIndex(c => c.id === data.user.userId);
        if (existingClientIndex === -1) {
            const newClient = {
                id: data.user.userId,
                name: data.user.username || 'Cliente',
                roomId: data.roomId,
                online: true,
                unreadCount: 1,
                avatar: `https://source.unsplash.com/random/100x100/?face&${data.user.userId}`,
                lastMessage: { text: 'Nuova richiesta di assistenza', timestamp: new Date().toISOString() }
            };
            clients.unshift(newClient);
            window.updateClientList(clients); // Usa l'override
            playNotificationSound();
        } else {
            clients[existingClientIndex].online = true;
            window.updateClientList(clients); // Usa l'override
        }
    });
    
    socket.on('message', function(data) {
        console.log('Messaggio ricevuto:', data);
        if (data.sender !== operatorId && data.sender.startsWith('client_')) {
            handleIncomingMessage({
                userId: data.sender,
                senderName: data.senderName || 'Cliente',
                message: data.content,
                timestamp: data.timestamp
            });
        }
    });
    
    socket.on('typing', function(data) {
        console.log('Typing event:', data);
        if (activeChat === data.userId) {
            if (data.isTyping) showTypingIndicator(); else hideTypingIndicator();
        }
    });
    
    socket.on('userLeave', function(data) {
        console.log('Utente ha lasciato la chat:', data);
        const clientIndex = clients.findIndex(c => c.id === data.userId);
        if (clientIndex !== -1) {
            clients[clientIndex].online = false;
            window.updateClientList(clients); // Usa l'override
        }
    });
    
    socket.on('disconnect', function() {
        console.log('Socket.IO disconnected');
        connectionText.textContent = 'Connessione interrotta';
        connectionStatus.classList.remove('connected');
        connectionStatus.classList.add('show');
    });
    
    socket.on('reconnect', function() {
        console.log('Socket.IO reconnected');
        connectionText.textContent = 'Connesso';
        connectionStatus.classList.add('connected');
        setTimeout(() => connectionStatus.classList.remove('show'), 3000);
        socket.emit('operatorJoin', { userId: operatorId, username: operatorName });
        if (activeChat) {
            socket.emit('operatorJoin', { userId: operatorId, username: operatorName, roomId: `support_${activeChat}` });
        }
        loadSupportRequests();
    });
    
    socket.on('connect_error', function(error) {
        console.error('Socket.IO connection error:', error);
        connectionText.textContent = 'Errore di connessione';
        connectionStatus.classList.remove('connected');
        connectionStatus.classList.add('show');
    });
    
    socket.on('past_messages', function(data) {
        console.log('Messaggi passati ricevuti:', data);
        if (data.roomId === `support_${activeChat}`) {
            displayChatHistory(data.messages);
        }
    });
}

function loadSupportRequests() {
    console.log("Carico le richieste di assistenza...");
    setTimeout(() => {
        fetch('/api/chat/rooms')
            .then(response => {
                if (response.status === 403) {
                    console.error("Errore di autorizzazione: accesso negato alle chat rooms");
                    const chatList = document.getElementById('chatList');
                    if (chatList) {
                        chatList.innerHTML = '<div class="error-message">Non hai i permessi necessari per visualizzare le chat.<br>Il server potrebbe non aver ancora riconosciuto la tua autenticazione.<br><button id="retryBtn" class="refresh-button">Riprova dopo 3 secondi</button></div>';
                        const retryBtn = document.getElementById('retryBtn');
                        retryBtn.addEventListener('click', () => {
                            retryBtn.disabled = true;
                            retryBtn.textContent = 'Riprovo dopo 3 secondi...';
                            setTimeout(loadSupportRequests, 3000);
                        });
                        setTimeout(() => retryBtn.click(), 3000);
                    }
                    throw new Error("Errore 403: Accesso negato");
                }
                if (!response.ok) throw new Error(`Errore ${response.status}: ${response.statusText}`);
                return response.json();
            })
            .then(data => {
                console.log("Dati stanze ricevuti:", data);
                if (data.rooms && data.rooms.length > 0) {
                    const loadedClients = data.rooms.map(room => ({
                        id: room.room_id.replace('support_', ''),
                        name: room.sender_name || 'Cliente',
                        roomId: room.room_id,
                        online: true,
                        unreadCount: 0,
                        avatar: `https://source.unsplash.com/random/100x100/?face&${room.room_id.replace('support_', '')}`,
                        lastMessage: { text: room.last_message || 'Conversazione iniziata', timestamp: new Date().toISOString() }
                    }));
                    console.log("Client caricati:", loadedClients);
                    clients = loadedClients;
                    window.updateClientList(clients); // Usa l'override
                } else {
                    console.log("Nessuna stanza trovata, utilizzo mock data");
                    createMockClients();
                }
            })
            .catch(error => {
                console.error('Errore nel caricamento delle chat:', error);
                createMockClients();
            });
    }, 1000);
}

function createMockClients() {
    clients = [
        { id: 'client_123', name: 'Mario Rossi', roomId: 'support_client_123', online: true, unreadCount: 2, avatar: 'https://source.unsplash.com/random/100x100/?face&1', lastMessage: { text: 'Ho un problema con il mio ordine', timestamp: new Date().toISOString() } },
        { id: 'client_456', name: 'Giulia Bianchi', roomId: 'support_client_456', online: true, unreadCount: 0, avatar: 'https://source.unsplash.com/random/100x100/?face&2', lastMessage: { text: 'Grazie per l\'assistenza', timestamp: new Date(Date.now() - 3600000).toISOString() } }
    ];
    window.updateClientList(clients); // Usa l'override
}

function handleIncomingMessage(data) {
    const message = data.message;
    const senderId = data.userId;
    console.log("Messaggio ricevuto da:", senderId, "Contenuto:", message);
    let clientIndex = clients.findIndex(c => c.id === senderId);
    if (clientIndex === -1) {
        const newClient = {
            id: senderId, name: data.senderName || 'Cliente', roomId: `support_${senderId}`, online: true, unreadCount: 1,
            avatar: `https://source.unsplash.com/random/100x100/?face&${senderId}`,
            lastMessage: { text: message, timestamp: data.timestamp || new Date().toISOString() }
        };
        clients.unshift(newClient);
        console.log("Aggiunto nuovo cliente:", newClient);
    } else {
        clients[clientIndex].lastMessage = { text: message, timestamp: data.timestamp || new Date().toISOString() };
        if (activeChat !== senderId) {
            clients[clientIndex].unreadCount = (clients[clientIndex].unreadCount || 0) + 1;
        }
        const client = clients.splice(clientIndex, 1)[0];
        clients.unshift(client);
    }
    window.updateClientList(clients); // Usa l'override
    if (activeChat === senderId) {
        addMessageToChat('incoming', message, data.timestamp);
        hideTypingIndicator();
    }
    playNotificationSound();
}

function playNotificationSound() {
    try {
        const audio = new Audio('/sounds/notification.mp3');
        audio.volume = 0.5;
        audio.play().catch(e => console.log('Audio play failed:', e));
    } catch (e) {
        console.log('Audio init failed:', e);
    }
}

function openChat(userId) {
    if (activeChat === userId) return;
    activeChat = userId;
    document.querySelectorAll('.chat-item').forEach(item => item.classList.remove('active'));
    const selectedChat = document.querySelector(`.chat-item[data-userId="${userId}"]`);
    if (selectedChat) selectedChat.classList.add('active');
    document.getElementById('chatPlaceholder').style.display = 'none';
    document.getElementById('chatContent').style.display = 'flex';
    document.getElementById('chatFooter').style.display = 'flex';
    document.getElementById('chatContent').innerHTML = '';
    hideTypingIndicator();
    const clientIndex = clients.findIndex(c => c.id === userId);
    if (clientIndex !== -1) {
        clients[clientIndex].unreadCount = 0;
        window.updateClientList(clients); // Usa l'override
    }
    const roomId = `support_${userId}`;
    socket.emit('operatorJoin', { userId: operatorId, username: operatorName, roomId: roomId });
    addSystemMessage('Caricamento messaggi in corso...');
    fetch(`/api/chat/history/${roomId}`)
        .then(response => {
            if (!response.ok) throw new Error(`Errore ${response.status}: ${response.statusText}`);
            return response.json();
        })
        .then(messages => {
            console.log("Messaggi ricevuti:", messages);
            document.getElementById('chatContent').innerHTML = '';
            if (messages && messages.length > 0) displayChatHistory(messages);
            else addSystemMessage('Nessun messaggio. Inizia a chattare con questo cliente!');
        })
        .catch(error => {
            console.error('Error fetching chat history:', error);
            document.getElementById('chatContent').innerHTML = '';
            addSystemMessage(`Errore nel caricamento dei messaggi: ${error.message}`);
        });
    setTimeout(() => document.getElementById('chatInput').focus(), 100);
}

function displayChatHistory(messages) {
    const chatContent = document.getElementById('chatContent');
    if (!chatContent) return;
    chatContent.innerHTML = '';
    if (!messages || messages.length === 0) {
        addSystemMessage('Nessun messaggio. Inizia a chattare con questo cliente!');
        return;
    }
    console.log("Mostrando messaggi:", messages.length);
    messages.forEach(msg => {
        console.log("Elaborazione messaggio:", msg);
        if (msg.sender_id === 'system') addSystemMessage(msg.message, msg.timestamp);
        else if (msg.sender_id.startsWith('operator_') || msg.sender_name === 'Assistenza YourBite' || msg.sender_name === 'Capo')
            addMessageToChat('outgoing', msg.message, msg.timestamp, true);
        else addMessageToChat('incoming', msg.message, msg.timestamp, true);
    });
    scrollToBottom();
}

function groupMessagesByDay(messages) { /* Non usata attivamente ma definita */ }
function formatDay(dateString) { /* Non usata attivamente ma definita */ }

function sendChatMessage() {
    if (!activeChat) return;
    const chatInput = document.getElementById('chatInput');
    const message = chatInput.value.trim();
    if (!message) return;
    if (socket && socket.connected) {
        const timestamp = new Date().toISOString();
        const roomId = `support_${activeChat}`;
        addMessageToChat('outgoing', message);
        socket.emit('message', { sender: operatorId, senderName: operatorName, content: message, timestamp: timestamp, roomId: roomId });
        chatInput.value = '';
        chatInput.style.height = 'auto';
        chatInput.focus();
        updateChatListItem(activeChat, message);
        sendTypingStatus(false);
    } else {
        addSystemMessage('Errore: Impossibile inviare il messaggio. Riconnessione in corso...');
    }
}

let typingTimeout;
function sendTypingStatus(isTyping) {
    if (!activeChat || !socket || !socket.connected) return;
    clearTimeout(typingTimeout);
    socket.emit('typing', { userId: operatorId, username: operatorName, isTyping: isTyping, roomId: `support_${activeChat}` });
    if (isTyping) typingTimeout = setTimeout(() => sendTypingStatus(false), 3000);
}

// Questa è la funzione che viene sovrascritta. Rinominata a baseUpdateClientListLogic
// e chiamata dall'override window.updateClientList. La definizione originale di updateClientList
// che conteneva la logica di creazione degli elementi è ora baseUpdateClientListLogic.

function updateChatListItem(userId, message, isIncoming = false) {
    // const chatList = document.getElementById('chatList'); // Non necessario se chiamiamo updateClientList
    // if (!chatList) return;
    const clientIndex = clients.findIndex(c => c.id === userId);
    if (clientIndex === -1) return;
    const client = clients[clientIndex];
    client.lastMessage = { text: message, timestamp: new Date().toISOString() };
    if (isIncoming && activeChat !== userId) {
        client.unreadCount = (client.unreadCount || 0) + 1;
    }
    clients.splice(clientIndex, 1);
    clients.unshift(client);
    window.updateClientList(clients); // Usa l'override
}

function setupMessageInput() {
    const chatInput = document.getElementById('chatInput');
    if (!chatInput) return;
    chatInput.addEventListener('input', function() {
        this.style.height = 'auto';
        this.style.height = Math.min(this.scrollHeight, 100) + 'px';
        sendTypingStatus(this.value.trim() !== '');
    });
    chatInput.addEventListener('keydown', function(e) {
        if (e.key === 'Enter' && !e.shiftKey) { e.preventDefault(); sendChatMessage(); }
    });
    const chatSend = document.getElementById('chatSend');
    // L'event listener per chatSend è gestito da fixSendButton e dall'onclick forzato all'inizio
}

function addMessageToChat(type, text, timestamp = null, isHistory = false) {
    const chatContent = document.getElementById('chatContent');
    if (!chatContent) return;
    const now = timestamp ? new Date(timestamp) : new Date();
    const timeString = formatTime(now);
    const messageEl = document.createElement('div'); // Rinomina variabile per evitare conflitto
    messageEl.className = `message ${type}`;
    messageEl.innerHTML = `
        <div class="message-bubble">${text}</div>
        <div class="message-meta">
            <span class="message-time">${timeString}</span>
            ${type === 'outgoing' ? '<span class="message-status"><i class="fas fa-check"></i></span>' : ''}
        </div>
    `;
    chatContent.appendChild(messageEl);
    if (!isHistory) scrollToBottom();
}

function addSystemMessage(text, timestamp = null) {
    const chatContent = document.getElementById('chatContent');
    if (!chatContent) return;
    const messageEl = document.createElement('div'); // Rinomina variabile
    messageEl.className = 'chat-day';
    messageEl.innerHTML = `<span>${text}</span>`;
    chatContent.appendChild(messageEl);
    scrollToBottom();
}

function showTypingIndicator() {
    const chatContent = document.getElementById('chatContent');
    if (!chatContent) return;
    hideTypingIndicator();
    const indicator = document.createElement('div');
    indicator.className = 'typing-indicator';
    indicator.id = 'typingIndicator';
    indicator.innerHTML = `<div class="typing-dots"><div class="typing-dot"></div><div class="typing-dot"></div><div class="typing-dot"></div></div>`;
    chatContent.appendChild(indicator);
    scrollToBottom();
}

function hideTypingIndicator() {
    const indicator = document.getElementById('typingIndicator');
    if (indicator) indicator.remove();
}

function formatTime(date) {
    return date.toLocaleTimeString('it-IT', { hour: '2-digit', minute: '2-digit' });
}

function scrollToBottom() {
    const chatContent = document.getElementById('chatContent');
    if (chatContent) chatContent.scrollTop = chatContent.scrollHeight;
}

function setupLogoutButton() {
    const logoutBtn = document.getElementById('logoutBtn');
    if (!logoutBtn) return;
    logoutBtn.addEventListener('click', function(e) {
        e.preventDefault();
        const loadingOverlay = createLoadingOverlay('Logout in corso...');
        document.body.appendChild(loadingOverlay);
        fetch('/logout', { method: 'POST', headers: { 'Content-Type': 'application/json' } })
        .then(response => {
            if (response.ok) {
                loadingOverlay.querySelector('p').textContent = 'Reindirizzamento...';
                setTimeout(() => window.location.href = '/login', 800);
            } else throw new Error('Errore durante il logout');
        })
        .catch(error => {
            console.error('Errore durante il logout:', error);
            loadingOverlay.querySelector('p').textContent = 'Si è verificato un errore. Riprova.';
            const retryButton = document.createElement('button');
            retryButton.textContent = 'Riprova';
            retryButton.style.cssText = "margin-top:15px;padding:8px 20px;background:var(--primary);color:white;border:none;border-radius:var(--radius-sm);cursor:pointer;";
            retryButton.onclick = function() { document.body.removeChild(loadingOverlay); /* setupLogoutButton(); Non ricorsivo */ };
            loadingOverlay.appendChild(retryButton);
        });
    });
}
</script>
</body>
</html>