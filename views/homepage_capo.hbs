<!DOCTYPE html>
<html lang="it">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>YourBite - Support Dashboard</title>
    <link rel="stylesheet" href="style.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        :root {
            --primary-color: #4e8df5;
            --secondary-color: #f5d84e;
            --light-bg: #f8f9fa;
            --border-radius: 18px;
            --box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }

        body {
            background-color: #f5f7fa;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        .chat-container {
            height: 70vh;
            display: flex;
            border-radius: 16px;
            overflow: hidden;
            box-shadow: 0 5px 15px rgba(0,0,0,0.08);
            background-color: white;
        }
        
        .chat-sidebar {
            width: 300px;
            border-right: 1px solid #e6e6e6;
            overflow-y: auto;
            padding: 15px;
            background-color: #f9fafc;
        }
        
        .chat-main {
            flex-grow: 1;
            display: flex;
            flex-direction: column;
        }
        
        .chat-header {
            padding: 15px 20px;
            border-bottom: 1px solid #e6e6e6;
            background-color: white;
            display: flex;
            align-items: center;
        }
        
        .message-list {
            flex-grow: 1;
            overflow-y: auto;
            padding: 20px;
            display: flex;
            flex-direction: column;
            background-color: #f9fafc;
        }
        
        .chat-input {
            padding: 15px 20px;
            border-top: 1px solid #e6e6e6;
            background-color: white;
        }

        .chat-input .input-group {
            border-radius: 25px;
            overflow: hidden;
            box-shadow: 0 2px 8px rgba(0,0,0,0.05);
        }
        
        .chat-input .form-control {
            border-radius: 25px 0 0 25px;
            border: 1px solid #e6e6e6;
            padding: 12px 20px;
        }
        
        .chat-input .btn {
            border-radius: 0 25px 25px 0;
            padding: 0 20px;
        }
        
        .chat-request {
            padding: 12px;
            margin-bottom: 10px;
            border-radius: 10px;
            cursor: pointer;
            transition: all 0.3s ease;
            border: 1px solid #e6e6e6;
            background-color: white;
        }
        
        .chat-request:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 10px rgba(0,0,0,0.05);
        }
        
        .chat-request.active {
            background-color: #e3f2fd;
            border-left: 4px solid var(--primary-color);
        }
        
        .message {
            padding: 12px 16px;
            border-radius: var(--border-radius);
            margin-bottom: 15px;
            max-width: 80%;
            position: relative;
            animation: fadeIn 0.3s ease-in-out;
            box-shadow: var(--box-shadow);
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .user-message {
            background-color: #f1f1f1;
            align-self: flex-start;
            border-radius: 3px 18px 18px 18px;
            color: #333;
        }

        .user-message::before {
            content: '';
            position: absolute;
            left: -8px;
            top: 0;
            border-right: 10px solid #f1f1f1;
            border-bottom: 10px solid transparent;
        }
        
        .operator-message {
            background-color: var(--primary-color);
            align-self: flex-end;
            margin-left: auto;
            border-radius: 18px 18px 3px 18px;
            color: white;
        }

        .operator-message::after {
            content: '';
            position: absolute;
            right: -8px;
            bottom: 0;
            border-left: 10px solid var(--primary-color);
            border-top: 10px solid transparent;
        }
        
        .system-message {
            background-color: #f8f9fa;
            align-self: center;
            text-align: center;
            font-style: italic;
            color: #6c757d;
            border-radius: 20px;
            padding: 6px 15px;
            margin: 10px 0;
            font-size: 0.85rem;
            box-shadow: none;
        }
        
        .welcome-screen {
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            height: 100%;
            color: #6c757d;
            background-color: #f9fafc;
        }

        .welcome-screen i {
            font-size: 4rem;
            color: #d1d8e4;
            margin-bottom: 20px;
        }
        
        .timestamp {
            font-size: 0.7rem;
            color: rgba(255,255,255,0.8);
            margin-top: 4px;
            text-align: right;
        }

        .user-message .timestamp {
            color: #777;
        }
        
        .typing-indicator {
            display: flex;
            align-items: center;
            font-style: italic;
            color: #6c757d;
            margin-bottom: 15px;
            margin-left: 10px;
        }

        .typing-indicator::before {
            content: '';
            width: 10px;
            height: 10px;
            margin-right: 8px;
            background-color: #6c757d;
            border-radius: 50%;
            animation: pulse 1.5s infinite;
        }
        
        .new-request {
            background-color: #fff8e1;
            border-left: 4px solid var(--secondary-color);
            animation: pulse 1.5s infinite;
        }

        .avatar {
            width: 38px;
            height: 38px;
            border-radius: 50%;
            background-color: #e0e0e0;
            display: flex;
            justify-content: center;
            align-items: center;
            margin-right: 15px;
            font-weight: bold;
            color: white;
        }

        .user-avatar {
            background-color: #ff9800;
        }

        .operator-avatar {
            background-color: var(--primary-color);
        }

        .navbar-brand {
            font-weight: bold;
            color: var(--primary-color);
        }

        #sidebar-toggle {
            display: none;
        }

        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.6; }
            100% { opacity: 1; }
        }

        /* Responsive design */
        @media (max-width: 768px) {
            .chat-sidebar {
                position: absolute;
                left: -300px;
                height: 70vh;
                z-index: 10;
                transition: left 0.3s ease;
                background-color: white;
            }
            
            .chat-sidebar.show {
                left: 0;
                box-shadow: 2px 0 10px rgba(0,0,0,0.1);
            }
            
            #sidebar-toggle {
                display: block;
                position: absolute;
                left: 10px;
                z-index: 11;
            }

            .chat-header {
                padding-left: 50px;
            }
            
            .message {
                max-width: 90%;
            }
        }
    </style>
</head>

<body>
    <!-- Header Section -->
    <header class="header">
        <img src="img/logo.png" alt="YourBite Logo" class="logo">
    </header>

    <!-- Main Content -->
    <main class="content container mt-4">
        <!-- Navigation Bar -->
        <nav class="navbar navbar-expand-lg navbar-light bg-light mb-4 rounded shadow-sm">
            <div class="container-fluid">
                <span class="navbar-brand">Support Dashboard</span>
                <div class="collapse navbar-collapse">
                    <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                        <li class="nav-item">
                            <a class="nav-link active" href="/support"><i class="fas fa-home me-1"></i>Dashboard</a>
                        </li>
                    </ul>
                    <div class="me-3"></div>
                    <button class="btn btn-outline-danger" id="logoutBtn"><i class="fas fa-sign-out-alt me-1"></i>Logout</button>
                </div>
            </div>
        </nav>

        <!-- Welcome Message -->
        <div class="d-flex align-items-center mb-4">
            <i class="fas fa-user-headset me-2" style="color: var(--primary-color);"></i>
            <h2 class="welcome-message mb-0">Benvenuto Operatore: <span class="text-primary">{{username}}</span></h2>
        </div>

        <!-- Chat Interface -->
        <div class="chat-container border rounded">
            <!-- Mobile toggle button -->
            <button id="sidebar-toggle" class="btn btn-sm btn-light">
                <i class="fas fa-bars"></i>
            </button>
            
            <!-- Sidebar with active chats -->
            <div class="chat-sidebar" id="chatSidebar">
                <h5 class="mb-3"><i class="fas fa-comments me-2"></i>Active Support Requests</h5>
                <div id="activeChats">
                    <div class="text-center text-muted py-3">
                        <i class="fas fa-coffee mb-2" style="font-size: 1.5rem;"></i>
                        <p>Waiting for support requests...</p>
                    </div>
                </div>
            </div>

            <!-- Main chat area -->
            <div class="chat-main">
                <!-- Initial welcome screen (shown when no chat is selected) -->
                <div id="welcomeScreen" class="welcome-screen">
                    <i class="fas fa-comment-dots"></i>
                    <h4>Select a chat to begin</h4>
                    <p>Choose a user from the sidebar to provide support</p>
                </div>

                <!-- Chat interface (hidden initially, shown when a chat is selected) -->
                <div id="chatInterface" style="display: none; height: 100%;">
                    <div class="chat-header">
                        <div class="avatar user-avatar" id="currentUserAvatar">U</div>
                        <div>
                            <h5 class="mb-0">Chatting with: <span id="currentChatUser">User</span></h5>
                            <small class="text-muted" id="userStatus">Online</small>
                        </div>
                    </div>
                    <div class="message-list" id="messageList"></div>
                    <div id="typingIndicator" class="typing-indicator" style="display: none;">
                        User is typing...
                    </div>
                    <div class="chat-input">
                        <div class="input-group">
                            <input type="text" class="form-control" id="messageInput" placeholder="Type your message...">
                            <button class="btn btn-primary" id="sendButton">
                                <i class="fas fa-paper-plane"></i>
                                <span class="d-none d-md-inline ms-1">Send</span>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function() {
            // Socket.io connection
            const socket = io();
            
            // Set up chat handling
            setupChatInterface(socket);
            
            // Handle logout
            document.getElementById("logoutBtn").addEventListener("click", function(event) {
                event.preventDefault();
                
                fetch('/logout', { 
                    method: 'POST',
                    credentials: 'include'
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        window.location.href = "/login";
                    }
                })
                .catch(error => {
                    console.error('Errore durante il logout:', error);
                    alert('Errore durante il logout. Riprova.');
                });
            });
            
            function setupChatInterface(socket) {
                // Elements
                const activeChats = document.getElementById('activeChats');
                const welcomeScreen = document.getElementById('welcomeScreen');
                const chatInterface = document.getElementById('chatInterface');
                const messageList = document.getElementById('messageList');
                const messageInput = document.getElementById('messageInput');
                const sendButton = document.getElementById('sendButton');
                const currentChatUser = document.getElementById('currentChatUser');
                const currentUserAvatar = document.getElementById('currentUserAvatar');
                const typingIndicator = document.getElementById('typingIndicator');
                const sidebarToggle = document.getElementById('sidebar-toggle');
                const chatSidebar = document.getElementById('chatSidebar');
                
                let currentChat = null;
                
                // Toggle sidebar on mobile
                sidebarToggle.addEventListener('click', function() {
                    chatSidebar.classList.toggle('show');
                });
                
                // Socket events
                socket.on('connect', () => {
                    console.log('Connected to server');
                    socket.emit('operator-connect', { operatorId: '{{operatorId}}' });
                });
                
                socket.on('chat-request', (data) => {
                    addChatRequest(data);
                });
                
                socket.on('user-message', (data) => {
                    if (currentChat && currentChat.userId === data.userId) {
                        addMessage(data.message, 'user', data.timestamp);
                    }
                    // Update unread count if not current chat
                });
                
                socket.on('user-typing', (data) => {
                    if (currentChat && currentChat.userId === data.userId) {
                        typingIndicator.style.display = 'flex';
                        // Clear typing indicator after a delay
                        setTimeout(() => {
                            typingIndicator.style.display = 'none';
                        }, 3000);
                    }
                });
                
                // Functions
                function addChatRequest(request) {
                    // Remove placeholder if exists
                    const placeholder = activeChats.querySelector('.text-center');
                    if (placeholder) {
                        activeChats.innerHTML = '';
                    }
                    
                    const chatEl = document.createElement('div');
                    chatEl.className = 'chat-request new-request';
                    chatEl.setAttribute('data-user-id', request.userId);
                    
                    chatEl.innerHTML = `
                        <div class="d-flex justify-content-between align-items-center">
                            <div class="d-flex align-items-center">
                                <div class="avatar user-avatar me-2">${request.username.charAt(0)}</div>
                                <div>
                                    <strong>${request.username}</strong>
                                    <div class="small text-muted">${request.timestamp}</div>
                                </div>
                            </div>
                            <span class="badge bg-danger">New</span>
                        </div>
                    `;
                    
                    activeChats.appendChild(chatEl);
                    
                    chatEl.addEventListener('click', () => {
                        selectChat(request);
                        chatEl.classList.remove('new-request');
                        const badge = chatEl.querySelector('.badge');
                        if (badge) badge.remove();
                        
                        // Hide sidebar on mobile after selection
                        if (window.innerWidth <= 768) {
                            chatSidebar.classList.remove('show');
                        }
                    });
                }
                
                function selectChat(chat) {
                    currentChat = chat;
                    
                    // Update active chat
                    const chatElements = activeChats.querySelectorAll('.chat-request');
                    chatElements.forEach(el => el.classList.remove('active'));
                    
                    const selectedChat = activeChats.querySelector(`[data-user-id="${chat.userId}"]`);
                    if (selectedChat) selectedChat.classList.add('active');
                    
                    // Show chat interface
                    welcomeScreen.style.display = 'none';
                    chatInterface.style.display = 'flex';
                    
                    // Update chat header
                    currentChatUser.textContent = chat.username;
                    currentUserAvatar.textContent = chat.username.charAt(0);
                    
                    // Clear message list and load chat history
                    messageList.innerHTML = '';
                    
                    // Add system message
                    addMessage('Operatore connesso alla chat', 'system');
                    
                    // Load chat history from server
                    socket.emit('get-chat-history', { userId: chat.userId });
                }
                
                function addMessage(message, type, timestamp = new Date().toLocaleTimeString()) {
                    const messageEl = document.createElement('div');
                    messageEl.className = `message ${type}-message`;
                    
                    if (type === 'system') {
                        messageEl.textContent = message;
                    } else {
                        messageEl.innerHTML = `
                            <div>${message}</div>
                            <div class="timestamp">${timestamp}</div>
                        `;
                    }
                    
                    messageList.appendChild(messageEl);
                    messageList.scrollTop = messageList.scrollHeight;
                }
                
                // Send message
                function sendMessage() {
                    const message = messageInput.value.trim();
                    if (!message || !currentChat) return;
                    
                    // Send to server
                    socket.emit('operator-message', {
                        userId: currentChat.userId,
                        message: message
                    });
                    
                    // Add to UI
                    addMessage(message, 'operator');
                    
                    // Clear input
                    messageInput.value = '';
                }
                
                sendButton.addEventListener('click', sendMessage);
                messageInput.addEventListener('keypress', (e) => {
                    if (e.key === 'Enter') sendMessage();
                });
                
                // Notify about typing
                messageInput.addEventListener('input', () => {
                    if (currentChat) {
                        socket.emit('operator-typing', {
                            userId: currentChat.userId
                        });
                    }
                });
                
                // Handle chat history
                socket.on('chat-history', (data) => {
                    data.messages.forEach(msg => {
                        addMessage(msg.message, msg.sender, msg.timestamp);
                    });
                });
            }
        });
    </script>
</body>
</html>