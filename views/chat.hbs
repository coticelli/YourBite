<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Support Chat</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .chat-container {
            max-width: 600px;
            margin: 0 auto;
        }
        .message-list {
            height: 400px;
            overflow-y: auto;
            border: 1px solid #ddd;
            padding: 10px;
            margin-bottom: 15px;
            border-radius: 5px;
        }
        .message {
            margin-bottom: 10px;
            padding: 8px 12px;
            border-radius: 18px;
        }
        .user-message {
            background-color: #dcf8c6;
            align-self: flex-end;
            margin-left: auto;
            max-width: 80%;
        }
        .system-message {
            background-color: #f1f1f1;
            text-align: center;
            max-width: 100%;
        }
        .other-message {
            background-color: #f1f1f1;
            align-self: flex-start;
            max-width: 80%;
        }
        .timestamp {
            font-size: 0.7rem;
            color: #777;
            margin-top: 2px;
        }
    </style>
</head>
<body>
    <div class="container mt-5 chat-container">
        <h2 class="text-center mb-4">Support Chat</h2>
        <div class="message-list d-flex flex-column" id="messageList"></div>
        <div id="typingIndicator" class="mb-2 text-muted" style="display: none;">
            The operator is typing...
        </div>
        <div class="input-group mb-3">
            <input type="text" class="form-control" id="messageInput" placeholder="Type a message...">
            <button class="btn btn-primary" id="sendButton">Send</button>
        </div>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        // Get user data from session (this value will be available on the page if the user is logged in)
        let userData = {
            userId: sessionStorage.getItem('userId') || "guest_" + Date.now(),
            username: sessionStorage.getItem('username') || "Customer"
        };
        
        // When the page starts, try to retrieve this information from the server if available
        fetch('/api/user/info', { credentials: 'include' })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    userData = {
                        userId: data.user.id,
                        username: data.user.username
                    };
                    sessionStorage.setItem('userId', userData.userId);
                    sessionStorage.setItem('username', userData.username);
                }
                initializeChat();
            })
            .catch(err => {
                console.log('Using default user data', err);
                initializeChat();
            });
        
        function initializeChat() {
            const socket = io();
            const messageList = document.getElementById('messageList');
            const messageInput = document.getElementById('messageInput');
            const sendButton = document.getElementById('sendButton');
            const typingIndicator = document.getElementById('typingIndicator');
            
            // Socket connection
            socket.on('connect', () => {
                console.log('Connected to WebSocket server');
                
                // Send user information to server
                socket.emit('userJoin', userData);
                
                // Add a system message to the interface
                addSystemMessage('Connected to support. An operator will join shortly.');
            });
            
            // Handle message reception
            socket.on('message', (message) => {
                addMessage(message);
            });
            
            // Handle typing indicator
            socket.on('typing', (data) => {
                if (data.isTyping && data.userId !== userData.userId) {
                    typingIndicator.style.display = 'block';
                } else {
                    typingIndicator.style.display = 'none';
                }
            });
            
            // Handle operator connection
            socket.on('operatorJoin', (data) => {
                addSystemMessage(`Operator ${data.username} has joined the chat`);
            });
            
            // Handle operator disconnection
            socket.on('operatorLeave', (data) => {
                addSystemMessage(`Operator ${data.username} has left the chat`);
            });
            
            // Handle connection errors
            socket.on('connect_error', (error) => {
                console.error('Connection error:', error);
                addSystemMessage('Error connecting to server. Please try again later.');
            });
            
            // Send message event
            sendButton.addEventListener('click', sendMessage);
            messageInput.addEventListener('keypress', (e) => {
                // Send notification that user is typing
                socket.emit('typing', { isTyping: true });
                
                // If Enter is pressed, send message
                if (e.key === 'Enter') {
                    sendMessage();
                }
            });
            
            // Stop typing indicator when user stops typing
            messageInput.addEventListener('blur', () => {
                socket.emit('typing', { isTyping: false });
            });
            
            function sendMessage() {
                const content = messageInput.value.trim();
                if (content) {
                    // Create message object
                    const message = {
                        content: content,
                        sender: userData.userId,
                        senderName: userData.username,
                        timestamp: new Date().toISOString()
                    };
                    
                    // Send message to server
                    socket.emit('message', message);
                    
                    // Clear input field
                    messageInput.value = '';
                    
                    // Reset typing indicator
                    socket.emit('typing', { isTyping: false });
                }
            }
            
            function addMessage(message) {
                const messageElement = document.createElement('div');
                const isCurrentUser = message.sender === userData.userId;
                
                messageElement.classList.add('message', 'd-flex');
                if (isCurrentUser) {
                    messageElement.classList.add('user-message', 'justify-content-end');
                } else {
                    messageElement.classList.add('other-message');
                }
                
                const time = new Date(message.timestamp).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
                
                messageElement.innerHTML = `
                    <div>
                        <div class="message-content">
                            ${isCurrentUser ? '' : `<strong>${message.senderName}</strong><br>`}
                            ${message.content}
                        </div>
                        <div class="timestamp">${time}</div>
                    </div>
                `;
                
                messageList.appendChild(messageElement);
                scrollToBottom();
            }
            
            function addSystemMessage(text) {
                const messageElement = document.createElement('div');
                messageElement.classList.add('message', 'system-message', 'align-self-center');
                
                messageElement.innerHTML = `
                    <div>
                        <div class="message-content">${text}</div>
                        <div class="timestamp">${new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}</div>
                    </div>
                `;
                
                messageList.appendChild(messageElement);
                scrollToBottom();
            }
            
            function scrollToBottom() {
                messageList.scrollTop = messageList.scrollHeight;
            }
            
            // Retrieve previous message history
            fetch('/api/chat/history', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ userId: userData.userId }),
                credentials: 'include'
            })
            .then(response => response.json())
            .then(data => {
                if (data.success && data.messages.length > 0) {
                    // Add previous messages to interface
                    data.messages.forEach(message => {
                        addMessage(message);
                    });
                    addSystemMessage('Previous messages loaded');
                }
            })
            .catch(err => {
                console.error('Error loading history:', err);
            });
        }
    </script>
</body>
</html>