<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{pageTitle}} - YourBite</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <script src="/socket.io/socket.io.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <style>
        /* === Stili CSS come nella versione precedente, mantenuti invariati === */
        :root { /* ... Variabili CSS ... */
            --primary: #7764E4; --primary-light: #9684FF; --primary-dark: #5B4DB8; --secondary: #FF7D56; --secondary-light: #FF9C7D; --accent: #FFD166; --accent-green: #2CD889; --accent-red: #FF6B6B; --accent-blue: #5FAAFF; --dark: #2D2A4A; --dark-blue: #212040; --medium-dark: #403D72; --light: #FFFFFF; --gray: #F8F9FD; --gray-light: #FAFBFF; --gray-dark: #E9ECFD; --text: #2D2A4A; --text-light: #6B7280; --shadow: 0 10px 30px rgba(0, 0, 0, 0.08); --shadow-lg: 0 20px 40px rgba(0, 0, 0, 0.12); --shadow-colored: 0 10px 25px rgba(119, 100, 228, 0.2); --radius-sm: 12px; --radius: 16px; --radius-lg: 24px; --radius-full: 9999px; --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1); --transition-spring: all 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55);
        }
        * { margin: 0; padding: 0; box-sizing: border-box; font-family: 'Poppins', 'Arial', sans-serif; scroll-behavior: smooth; }
        body { background-color: var(--gray); color: var(--text); min-height: 100vh; display: flex; flex-direction: column; overflow: hidden; }
        .background-decoration { position: absolute; z-index: -1; pointer-events: none; }
        .decoration-1 { top: -150px; right: -150px; width: 500px; height: 500px; background: radial-gradient(circle, rgba(119, 100, 228, 0.1), transparent 60%); border-radius: 50%; }
        .decoration-2 { bottom: -100px; left: -100px; width: 400px; height: 400px; background: radial-gradient(circle, rgba(255, 125, 86, 0.08), transparent 60%); border-radius: 50%; }
        .decoration-3 { top: 50%; right: 10%; width: 60px; height: 60px; background: radial-gradient(circle, rgba(255, 209, 102, 0.2), transparent 60%); border-radius: 50%; animation: floatAnimation 8s infinite alternate ease-in-out; }
        .decoration-4 { top: 20%; left: 5%; width: 80px; height: 80px; background: radial-gradient(circle, rgba(44, 216, 137, 0.1), transparent 60%); border-radius: 50%; animation: floatAnimation 12s infinite alternate-reverse ease-in-out; }
        @keyframes floatAnimation { 0% { transform: translate(0, 0); } 100% { transform: translate(20px, -20px); } }
        .app-container { display: flex; height: 100vh; max-width: 1800px; margin: 0 auto; padding: 20px; gap: 20px; }
        .sidebar { width: 280px; background: linear-gradient(135deg, var(--primary), var(--primary-dark)); border-radius: var(--radius); padding: 25px; display: flex; flex-direction: column; box-shadow: var(--shadow-colored); flex-shrink: 0; overflow: hidden; position: relative; }
        .sidebar-overlay { position: absolute; top: 0; left: 0; width: 100%; height: 100%; background-image: url("data:image/svg+xml,%3Csvg width='100' height='100' viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M11 18c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm48 25c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm-43-7c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm63 31c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM34 90c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm56-76c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM12 86c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm28-65c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm23-11c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-6 60c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm29 22c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zM32 63c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm57-13c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-9-21c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM60 91c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM35 41c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM12 60c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2z' fill='rgba(255,255,255,0.05)' fill-opacity='0.05' fill-rule='evenodd'/%3E%3C/svg%3E"); z-index: 0; }
        .logo-section { display: flex; align-items: center; gap: 15px; margin-bottom: 25px; z-index: 1; }
        .logo { width: 42px; height: 42px; background-color: var(--light); border-radius: var(--radius-sm); padding: 8px; display: flex; align-items: center; justify-content: center; box-shadow: 0 4px 10px rgba(0, 0, 0, 0.15); }
        .logo img { max-width: 100%; max-height: 100%; }
        .app-name { color: var(--light); font-weight: 700; font-size: 24px; letter-spacing: 0.5px; }
        .menu-section { margin-top: 20px; z-index: 1; }
        .menu-label { color: rgba(255, 255, 255, 0.7); font-size: 12px; font-weight: 500; text-transform: uppercase; letter-spacing: 1px; margin-bottom: 10px; }
        .menu-list { list-style: none; display: flex; flex-direction: column; gap: 10px; }
        .menu-item { border-radius: var(--radius-sm); transition: var(--transition); overflow: hidden; }
        .menu-link { display: flex; align-items: center; gap: 15px; padding: 12px 15px; color: rgba(255, 255, 255, 0.8); text-decoration: none; font-weight: 500; font-size: 15px; transition: var(--transition); border-radius: var(--radius-sm); }
        .menu-link:hover { background-color: rgba(255, 255, 255, 0.1); color: white; }
        .menu-link.active { background-color: rgba(255, 255, 255, 0.2); color: white; font-weight: 600; box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1); }
        .menu-icon { font-size: 18px; width: 24px; height: 24px; display: flex; align-items: center; justify-content: center; }
        .profile-section { margin-top: auto; padding-top: 20px; border-top: 1px solid rgba(255, 255, 255, 0.1); display: flex; align-items: center; gap: 15px; z-index: 1; }
        .profile-avatar { width: 42px; height: 42px; border-radius: var(--radius-full); object-fit: cover; border: 2px solid white; box-shadow: 0 4px 10px rgba(0, 0, 0, 0.15); background-color: var(--gray-light); }
        .profile-info { flex-grow: 1; }
        .profile-name { color: white; font-weight: 600; font-size: 15px; margin-bottom: 2px; }
        .profile-role { color: rgba(255, 255, 255, 0.7); font-size: 12px; }
        .profile-menu { color: rgba(255, 255, 255, 0.8); cursor: pointer; padding: 5px; border-radius: var(--radius-full); transition: var(--transition); }
        .profile-menu:hover { background-color: rgba(255, 255, 255, 0.1); color: white; }
        .chat-area { flex-grow: 1; display: flex; flex-direction: column; background: var(--light); border-radius: var(--radius); box-shadow: var(--shadow); overflow: hidden; }
        .chat-header { padding: 20px; background: var(--light); border-bottom: 1px solid var(--gray-dark); display: flex; align-items: center; justify-content: space-between; position: relative; z-index: 10; box-shadow: 0 2px 10px rgba(0, 0, 0, 0.02); }
        .chat-header-info { display: flex; align-items: center; gap: 15px; }
        .operator-avatar { width: 50px; height: 50px; border-radius: var(--radius-full); object-fit: cover; border: 2px solid var(--primary-light); box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05); }
        .operator-info { display: flex; flex-direction: column; }
        .operator-name { font-size: 18px; font-weight: 600; color: var(--dark); margin-bottom: 3px; }
        .operator-status { display: flex; align-items: center; gap: 5px; font-size: 14px; color: var(--text-light); }
        .status-indicator { width: 8px; height: 8px; border-radius: 50%; background-color: var(--accent-green); position: relative; }
        .status-indicator::after { content: ''; position: absolute; width: 100%; height: 100%; border-radius: 50%; background-color: var(--accent-green); opacity: 0.5; animation: pulse 2s infinite; }
        @keyframes pulse { 0% { transform: scale(1); opacity: 0.5; } 70% { transform: scale(1.5); opacity: 0; } 100% { transform: scale(1.5); opacity: 0; } }
        .chat-header-actions { display: flex; align-items: center; gap: 10px; }
        .header-action-btn { width: 36px; height: 36px; border-radius: var(--radius-full); background-color: var(--gray-light); color: var(--primary); border: none; display: flex; align-items: center; justify-content: center; cursor: pointer; transition: var(--transition); box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05); }
        .header-action-btn:hover { background-color: var(--primary); color: white; box-shadow: 0 2px 10px rgba(119, 100, 228, 0.3); transform: translateY(-2px); }
        .chat-body { flex-grow: 1; padding: 20px; overflow-y: auto; background-color: var(--gray-light); background-image: url("data:image/svg+xml,%3Csvg width='100' height='100' viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M11 18c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm48 25c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm-43-7c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm63 31c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM34 90c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm56-76c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM12 86c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm28-65c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm23-11c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-6 60c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm29 22c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zM32 63c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm57-13c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-9-21c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM60 91c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM35 41c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM12 60c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2z' fill='%23f0f0f5' fill-opacity='0.3' fill-rule='evenodd'/%3E%3C/svg%3E"); }
        .day-divider { display: flex; align-items: center; gap: 15px; margin: 20px 0; color: var(--text-light); font-size: 13px; text-align: center; }
        .day-divider::before, .day-divider::after { content: ''; flex-grow: 1; height: 1px; background-color: var(--gray-dark); }
        .day-divider-text { background: var(--gray-light); padding: 5px 15px; border-radius: var(--radius-full); border: 1px solid var(--gray-dark); box-shadow: 0 2px 5px rgba(0, 0, 0, 0.02); font-weight: 500; }
        .message-container { display: flex; flex-direction: column; gap: 10px; margin-bottom: 10px; }
        .message-group { display: flex; flex-direction: column; max-width: 75%; }
        .message-group.user { align-self: flex-end; } .message-group.operator { align-self: flex-start; } .message-group.system { align-self: center; max-width: 90%; }
        .message-content { padding: 12px 15px; border-radius: var(--radius-sm); box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05); margin-bottom: 2px; position: relative; animation: fadeIn 0.3s ease-in-out; }
        @keyframes fadeIn { from { opacity: 0; transform: translateY(10px); } to { opacity: 1; transform: translateY(0); } }
        .user .message-content { background: linear-gradient(135deg, var(--primary), var(--primary-dark)); color: white; border-top-right-radius: 2px; }
        .user .message-content::before { content: ''; position: absolute; right: -8px; top: 0; width: 0; height: 0; border-left: 10px solid var(--primary-dark); border-right: 0; border-bottom: 10px solid transparent; }
        .operator .message-content { background: white; color: var(--text); border-top-left-radius: 2px; box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05); }
        .operator .message-content::before { content: ''; position: absolute; left: -8px; top: 0; width: 0; height: 0; border-right: 10px solid white; border-left: 0; border-bottom: 10px solid transparent; }
        .system .message-content { background: rgba(0, 0, 0, 0.05); color: var(--text-light); font-style: italic; text-align: center; font-size: 14px; box-shadow: none; }
        .message-text { line-height: 1.5; margin-bottom: 5px; word-break: break-word; }
        .message-meta { display: flex; justify-content: flex-end; align-items: center; font-size: 12px; margin-top: 5px; }
        .user .message-meta { color: rgba(255, 255, 255, 0.7); } .operator .message-meta { color: var(--text-light); }
        .message-time { font-weight: 500; margin-right: 5px; }
        .message-status i { font-size: 12px; margin-left: 3px; }
        .status-sent i { color: rgba(255, 255, 255, 0.6); } .status-delivered i { color: rgba(255, 255, 255, 0.8); } .status-read i { color: var(--accent); }
        .typing-indicator { display: flex; align-items: center; gap: 10px; padding: 10px 15px; background: white; border-radius: var(--radius-sm); box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05); max-width: 200px; position: relative; animation: fadeIn 0.3s ease-in-out; align-self: flex-start; margin-bottom: 10px; }
        .typing-indicator::before { content: ''; position: absolute; left: -8px; top: 0; width: 0; height: 0; border-right: 10px solid white; border-left: 0; border-bottom: 10px solid transparent; }
        .typing-text { font-size: 14px; color: var(--text-light); }
        .typing-dots { display: flex; align-items: center; gap: 4px; }
        .typing-dot { width: 8px; height: 8px; border-radius: 50%; background: var(--primary); opacity: 0.6; animation: typingAnimation 1.4s infinite; }
        .typing-dot:nth-child(2) { animation-delay: 0.2s; } .typing-dot:nth-child(3) { animation-delay: 0.4s; }
        @keyframes typingAnimation { 0%, 60%, 100% { transform: translateY(0); opacity: 0.6; } 30% { transform: translateY(-4px); opacity: 1; } }
        .chat-footer { padding: 15px 20px; background: var(--light); border-top: 1px solid var(--gray-dark); display: flex; align-items: flex-end; gap: 10px; }
        .message-input-container { display: flex; align-items: flex-end; flex-grow: 1; background: var(--gray-light); border-radius: var(--radius-full); transition: var(--transition); padding: 10px 20px; border: 1px solid var(--gray-dark); }
        .message-input-container:focus-within { border-color: var(--primary); box-shadow: 0 0 0 3px rgba(119, 100, 228, 0.1); background: white; }
        .message-input { flex-grow: 1; border: none; background: transparent; min-height: 24px; max-height: 120px; resize: none; padding: 0; font-size: 15px; line-height: 1.5; outline: none; color: var(--text); margin-right: 10px; }
        .message-input::placeholder { color: var(--text-light); }
        .input-actions { display: flex; align-items: center; gap: 10px; }
        .input-action-btn { background: transparent; border: none; color: var(--text-light); font-size: 18px; padding: 5px; cursor: pointer; border-radius: var(--radius-full); transition: var(--transition); display: flex; align-items: center; justify-content: center; }
        .input-action-btn:hover { color: var(--primary); background: rgba(119, 100, 228, 0.1); transform: translateY(-2px); }
        .send-btn { width: 45px; height: 45px; border-radius: var(--radius-full); background: linear-gradient(135deg, var(--primary), var(--primary-dark)); color: white; border: none; display: flex; align-items: center; justify-content: center; cursor: pointer; transition: var(--transition-spring); box-shadow: var(--shadow-colored); }
        .send-btn:hover { transform: translateY(-3px) scale(1.05); box-shadow: 0 8px 20px rgba(119, 100, 228, 0.3); }
        .send-btn:active { transform: scale(0.95); }
        .send-btn i { font-size: 18px; transform: rotate(45deg); }
        .emoji-picker { position: absolute; bottom: 80px; right: 20px; background: white; border-radius: var(--radius); box-shadow: var(--shadow-lg); width: 300px; padding: 15px; display: none; z-index: 100; }
        .emoji-picker.show { display: block; animation: fadeIn 0.3s ease-in-out; }
        .emoji-tabs { display: flex; gap: 10px; margin-bottom: 10px; }
        .emoji-tab { flex-grow: 1; text-align: center; padding: 5px; font-size: 18px; border-radius: var(--radius-sm); cursor: pointer; transition: var(--transition); }
        .emoji-tab:hover { background: var(--gray-light); } .emoji-tab.active { background: var(--gray-light); color: var(--primary); }
        .emoji-content { height: 200px; overflow-y: auto; padding: 5px; }
        .emoji-group { display: grid; grid-template-columns: repeat(7, 1fr); gap: 10px; }
        .emoji-item { width: 30px; height: 30px; display: flex; align-items: center; justify-content: center; cursor: pointer; font-size: 20px; border-radius: var(--radius-sm); transition: var(--transition); }
        .emoji-item:hover { background: var(--gray-light); transform: scale(1.2); }
        .connection-status { position: fixed; top: 10px; left: 50%; transform: translateX(-50%); background-color: var(--accent-red); color: white; padding: 8px 16px; border-radius: var(--radius-full); font-size: 14px; font-weight: 500; box-shadow: var(--shadow); display: flex; align-items: center; gap: 8px; opacity: 0; pointer-events: none; transition: var(--transition); z-index: 1000; }
        .connection-status.show { opacity: 1; pointer-events: auto; } .connection-status.connected { background-color: var(--accent-green); opacity: 1; animation: fadeOut 3s forwards 2s; }
        @keyframes fadeOut { to { opacity: 0; pointer-events: none; } }
        .connection-icon { font-size: 16px; animation: blink 1s infinite; }
        @keyframes blink { 0%, 100% { opacity: 1; } 50% { opacity: 0.5; } }
        /* Responsive */
        @media (max-width: 992px) { .app-container { padding: 10px; gap: 10px; } .sidebar { width: 240px; padding: 20px; } }
        @media (max-width: 768px) { .app-container { flex-direction: column; padding: 0; height: 100vh; overflow: hidden; } .sidebar { width: 100%; padding: 15px; border-radius: 0; flex-direction: row; height: auto; align-items: center; } .logo-section { margin-bottom: 0; } .app-name { font-size: 20px; } .menu-section { display: none; } .profile-section { margin-top: 0; margin-left: auto; border-top: none; padding-top: 0; } .chat-area { border-radius: 0; flex-grow: 1; max-height: calc(100vh - 76px); } .chat-header { padding: 15px; } .operator-avatar { width: 40px; height: 40px; } .operator-name { font-size: 16px; } .chat-body { padding: 15px; } .message-group { max-width: 90%; } .message-content { padding: 12px; } }
        @media (max-width: 480px) { .profile-name, .profile-role { display: none; } .emoji-picker { width: calc(100% - 40px); left: 20px; right: 20px; } }
        /* Auth Alert */
        .auth-alert { position: fixed; top: 20px; right: 20px; background-color: #f8d7da; border: 1px solid #f5c6cb; color: #721c24; padding: 15px 20px; border-radius: var(--radius-sm); box-shadow: var(--shadow); z-index: 9999; max-width: 400px; }
        .auth-alert h4 { margin-top: 0; margin-bottom: 10px; font-size: 1rem; font-weight: 600; }
        .auth-alert p { margin-bottom: 15px; margin-top: 0; font-size: 0.9rem; }
        .auth-alert button { background: #dc3545; color: white; border: none; padding: 8px 15px; border-radius: var(--radius-sm); cursor: pointer; transition: background-color 0.2s; }
        .auth-alert button:hover { background: #c82333; }

    </style>
</head>
<body>
    <!-- Connection status indicator -->
    <div class="connection-status" id="connectionStatus">
        <i class="fas fa-sync-alt connection-icon"></i>
        <span id="connectionText">Connessione in corso...</span>
    </div>

    <!-- Background decorations -->
    <div class="background-decoration decoration-1"></div>
    <div class="background-decoration decoration-2"></div>
    <div class="background-decoration decoration-3"></div>
    <div class="background-decoration decoration-4"></div>

    <!-- App container -->
    <div class="app-container">
        <!-- Sidebar -->
        <div class="sidebar">
            <div class="sidebar-overlay"></div>

            <div class="logo-section">
                <div class="logo">
                    <img src="/img/logo.png" alt="YourBite Logo"> <!-- Corretto percorso -->
                </div>
                <div class="app-name">YourBite</div>
            </div>

            <div class="menu-section">
                <div class="menu-label">Menu</div>
                <ul class="menu-list">
                    <li class="menu-item"> <a href="/homepage_cliente" class="menu-link"><div class="menu-icon"><i class="fas fa-home"></i></div> <span>Homepage</span></a> </li>
                    <li class="menu-item"> <a href="#" class="menu-link"><div class="menu-icon"><i class="fas fa-shopping-bag"></i></div> <span>I miei Ordini</span></a> </li>
                    <li class="menu-item"> <a href="#" class="menu-link"><div class="menu-icon"><i class="fas fa-heart"></i></div> <span>Preferiti</span></a> </li>
                    <li class="menu-item"> <a href="/chat" class="menu-link active"><div class="menu-icon"><i class="fas fa-comment-dots"></i></div> <span>Assistenza</span></a> </li>
                </ul>
                <div class="menu-label">Profilo</div>
                <ul class="menu-list">
                    <li class="menu-item"> <a href="#" class="menu-link"><div class="menu-icon"><i class="fas fa-user"></i></div> <span>Il mio Profilo</span></a> </li>
                    <li class="menu-item"> <a href="#" class="menu-link"><div class="menu-icon"><i class="fas fa-cog"></i></div> <span>Impostazioni</span></a> </li>
                    <li class="menu-item"> <a href="#" class="menu-link" id="logoutBtn"><div class="menu-icon"><i class="fas fa-sign-out-alt"></i></div> <span>Logout</span></a> </li>
                </ul>
            </div>

            <div class="profile-section">
                <img src="https://ui-avatars.com/api/?name=Cliente&background=random&color=fff&size=42" alt="Profile" class="profile-avatar" id="profileAvatarSidebar">
                <div class="profile-info">
                    <div class="profile-name" id="usernameSidebar">Cliente</div>
                    <div class="profile-role">Account Cliente</div>
                </div>
                <!-- <div class="profile-menu"> <i class="fas fa-ellipsis-v"></i> </div> -->
            </div>
        </div>

        <!-- Chat area -->
        <div class="chat-area">
            <!-- Chat header -->
            <div class="chat-header">
                <div class="chat-header-info">
                    <img src="https://ui-avatars.com/api/?name=Assistenza&background=random&color=fff&size=50" alt="Operator" class="operator-avatar">
                    <div class="operator-info">
                        <div class="operator-name">Assistenza YourBite</div>
                        <div class="operator-status">
                            <div class="status-indicator"></div>
                            <span id="operatorStatus">Online</span>
                        </div>
                    </div>
                </div>
                <div class="chat-header-actions">
                    <button class="header-action-btn" title="Cerca nei messaggi"> <i class="fas fa-search"></i> </button>
                    <button class="header-action-btn" title="Chiamata vocale (non disponibile)"> <i class="fas fa-phone-alt"></i> </button>
                    <button class="header-action-btn" title="Altro"> <i class="fas fa-ellipsis-v"></i> </button>
                </div>
            </div>

            <!-- Chat body -->
            <div class="chat-body" id="chatBody">
                <div class="day-divider"> <span class="day-divider-text" id="todayDate">Oggi</span> </div>
                <div class="message-container" id="messagesContainer">
                     <div class="message-group system"> <div class="message-content"> <div class="message-text">Benvenuto! Come possiamo aiutarti?</div> </div> </div>
                </div>
            </div>

            <!-- Chat footer -->
            <div class="chat-footer">
                <div class="message-input-container">
                    <textarea class="message-input" id="messageInput" placeholder="Scrivi un messaggio..." rows="1"></textarea>
                    <div class="input-actions">
                        <button class="input-action-btn" title="Emoji" id="emojiBtn"> <i class="far fa-smile"></i> </button>
                        <button class="input-action-btn" title="Allegati" id="attachBtn"> <i class="fas fa-paperclip"></i> </button>
                    </div>
                </div>
                <button class="send-btn" id="sendBtn"> <i class="fas fa-paper-plane"></i> </button>
            </div>

            <!-- Emoji picker (hidden by default) -->
            <div class="emoji-picker" id="emojiPicker">
                <div class="emoji-tabs"> <div class="emoji-tab active"><i class="far fa-smile"></i></div> <div class="emoji-tab"><i class="far fa-hand-peace"></i></div> <div class="emoji-tab"><i class="fas fa-hamburger"></i></div> <div class="emoji-tab"><i class="fas fa-car"></i></div> <div class="emoji-tab"><i class="fas fa-heart"></i></div> </div>
                <div class="emoji-content"> <div class="emoji-group"> <div class="emoji-item">😊</div> <div class="emoji-item">😂</div> <div class="emoji-item">😍</div> <div class="emoji-item">🙂</div> <div class="emoji-item">😎</div> <div class="emoji-item">😋</div> <div class="emoji-item">🤔</div> <div class="emoji-item">😐</div> <div class="emoji-item">😴</div> <div class="emoji-item">😆</div> <div class="emoji-item">🙄</div> <div class="emoji-item">😡</div> <div class="emoji-item">👍</div> <div class="emoji-item">👋</div> <div class="emoji-item">👏</div> <div class="emoji-item">🙏</div> <div class="emoji-item">❤️</div> <div class="emoji-item">✨</div> <div class="emoji-item">🔥</div> <div class="emoji-item">💯</div> <div class="emoji-item">🎉</div> </div> </div>
            </div>
        </div>
    </div>

    <!-- Toast Notifications Container -->
    <div class="toast-container" id="toastContainer"></div>

    <!-- Includi i dati utente passati dal server -->
    <script>
        // Rendi disponibili i dati dell'utente loggato al JavaScript
        // Il server DEVE passare l'oggetto 'user' quando renderizza questa vista
        const currentUser = {{{ json user }}};
        console.log("Dati utente ricevuti dal server (chat.hbs):", currentUser);
    </script>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Verifica se currentUser è definito e valido
            if (typeof currentUser === 'undefined' || !currentUser || !currentUser.id) {
                console.error("ERRORE CRITICO: Dati utente non disponibili nel frontend (chat.hbs)!");
                showAuthAlert("Errore Autenticazione", "Impossibile identificare l'utente. Riprova il login.", true);
                disableChatFunctionality(); // Disabilita la chat
                return; // Interrompi l'esecuzione
            }

            // Imposta la data di oggi
            setTodayDate();

            // Inizializza Socket.IO
            initializeSocketIO();

            // Setup UI (emoji, input, bottoni)
            setupEmojiPicker();
            setupMessageInput();
            setupSendButton();
            setupAttachButton();

            // Update username nella UI
            updateUsernameDisplay();

            // Setup bottone logout
            setupLogoutButton();
        });

        // Variabili globali (ora usano currentUser)
        let socket;
        const userType = 'cliente'; // Fisso per questa pagina
        // Usa i dati reali passati dal server
        const username = currentUser?.username || 'Cliente Sconosciuto';
        const userId = `client_${currentUser?.id}`; // Usa ID reale dal server, prefissato
        const roomId = `support_${userId}`; // Room ID basato sull'ID utente reale

        // --- FUNZIONI HELPER (invariate rispetto a prima) ---
        function showToast(type = 'info', title = 'Notifica', message = '') { /* ... */ const el = document.getElementById('toastContainer'); if (!el) return; const t = document.createElement('div'); t.className = `toast ${type}`; let i = 'fa-info-circle'; if (type === 'success') i = 'fa-check-circle'; if (type === 'error') i = 'fa-times-circle'; if (type === 'warning') i = 'fa-exclamation-triangle'; t.innerHTML = `<i class="fas ${i} toast-icon"></i><div class="toast-content"><div class="toast-title">${title}</div><div class="toast-message">${message}</div></div><button class="toast-close"><i class="fas fa-times"></i></button>`; t.querySelector('.toast-close').onclick = () => { t.style.animation = 'slideOut 0.3s forwards'; t.onanimationend = () => t.remove(); }; el.appendChild(t); setTimeout(() => { if (t.parentElement) { t.style.animation = 'slideOut 0.3s forwards'; t.onanimationend = () => t.remove(); } }, 5000); }
        function getAvatarUrl(name, size = 48) { /* ... */ const apiUrl = `https://ui-avatars.com/api/?name=${encodeURIComponent(name || '??')}&background=random&color=fff&size=${size}&bold=true`; return apiUrl; }
        function formatTime(date) { /* ... */ return new Date(date).toLocaleTimeString('it-IT', { hour: '2-digit', minute: '2-digit' }); }
        function formatDay(dateString) { /* ... */ const d = new Date(dateString); const today = new Date(); const y = new Date(today); y.setDate(y.getDate() - 1); const ds = d.toISOString().split('T')[0]; if (ds === today.toISOString().split('T')[0]) return 'Oggi'; if (ds === y.toISOString().split('T')[0]) return 'Ieri'; return d.toLocaleDateString('it-IT', { weekday: 'long', day: 'numeric', month: 'long' }); }
        function scrollToBottom(elementId = 'chatBody') { /* ... */ const el = document.getElementById(elementId); if (el) { setTimeout(() => el.scrollTop = el.scrollHeight, 50); } }
        function playNotificationSound() { /* ... */ try { const a = new Audio('/sounds/notification.mp3'); a.volume = 0.3; a.play().catch(e => console.log('Audio play failed:', e)); } catch (e) { console.log('Audio init failed:', e); } }
        function showAuthAlert(title, message, showLoginButton = false) { /* ... */ const a = document.createElement('div'); a.className = 'auth-alert'; a.style.cssText = "position: fixed; top: 80px; right: 20px; background-color: #f8d7da; border: 1px solid #f5c6cb; color: #721c24; padding: 15px 20px; border-radius: var(--radius-sm); box-shadow: var(--shadow); z-index: 9999; max-width: 400px;"; a.innerHTML = `<h4 style="margin-top:0;margin-bottom:10px;font-size:1rem;font-weight:600">${title}</h4><p style="margin-bottom:${showLoginButton ? '15px' : '0'};margin-top:0;font-size:0.9rem;">${message}</p>${showLoginButton ? '<button id="redirectLoginBtn" style="background:#dc3545;color:white;border:none;padding:8px 15px;border-radius:var(--radius-sm);cursor:pointer">Vai al login</button>' : ''}`; document.body.appendChild(a); if (showLoginButton) { document.getElementById('redirectLoginBtn').onclick = () => window.location.href = '/login'; } else { setTimeout(() => a.remove(), 10000); } }
        function setTodayDate() { /* ... */ const today = new Date(); const options = { weekday: 'long', day: 'numeric', month: 'long', year: 'numeric' }; document.getElementById('todayDate').textContent = today.toLocaleDateString('it-IT', options); }

        // --- SOCKET.IO (Lato Cliente Aggiornato) ---
        function initializeSocketIO() {
            const connectionStatus = document.getElementById('connectionStatus');
            const connectionText = document.getElementById('connectionText');
            connectionStatus.classList.remove('show', 'connected');

            socket = io({ reconnectionAttempts: 5, reconnectionDelay: 3000 });

            const connectionTimeout = setTimeout(() => { connectionStatus.classList.add('show'); connectionText.textContent = 'Connessione...'; }, 2000);

            socket.on('connect', () => {
                console.log('Socket.IO Cliente Connesso:', socket.id);
                clearTimeout(connectionTimeout);
                connectionText.textContent = 'Connesso';
                connectionStatus.classList.add('connected', 'show');
                setTimeout(() => connectionStatus.classList.remove('show'), 3000);

                // **INVIA IDENTIFICAZIONE CORRETTA**
                console.log(`[Cliente] Invio identify: userId=${userId}, username=${username}, userType=${userType}`);
                socket.emit('identify', {
                    userId: userId,
                    username: username,
                    userType: userType
                });

                loadChatHistory();
            });

            socket.on('message', handleIncomingMessage);
            socket.on('typing', handleTypingEvent);
            socket.on('operator_joined', handleOperatorJoined);

            socket.on('disconnect', (reason) => { /* ... codice come prima ... */
                console.log('Socket.IO Disconnesso:', reason); connectionText.textContent = 'Connessione persa'; connectionStatus.classList.remove('connected'); connectionStatus.classList.add('show'); updateOperatorStatus(false);
            });
            socket.on('reconnect', () => { /* ... codice come prima ... */
                 console.log('Socket.IO Riconnesso'); connectionText.textContent = 'Connesso'; connectionStatus.classList.add('connected'); setTimeout(() => { connectionStatus.classList.remove('show'); }, 3000);
                 socket.emit('identify', { userId: userId, username: username, userType: userType }); loadChatHistory();
             });
            socket.on('connect_error', (error) => { /* ... codice come prima ... */
                console.error('Socket.IO Errore Connessione:', error); connectionText.textContent = 'Errore Connessione'; connectionStatus.classList.remove('connected'); connectionStatus.classList.add('show');
            });
        }

        function handleIncomingMessage(data) {
            console.log('[Cliente] Messaggio ricevuto:', data);
            if (data.sender !== userId) { // Mostra solo messaggi dell'operatore
                addOperatorMessage(data.content, data.timestamp);
                hideTypingIndicator();
                playNotificationSound();
            }
        }

        function handleTypingEvent(data) {
            console.log('[Cliente] Typing event:', data);
            if (data.userId !== userId) { // Mostra solo typing dell'operatore
                if (data.isTyping) showTypingIndicator(); else hideTypingIndicator();
            }
        }

        function handleOperatorJoined(data) {
             console.log("[Cliente] Operatore si è unito:", data);
             addSystemMessage(`${data.username || 'Assistenza'} è ora connesso/a.`);
             updateOperatorStatus(true);
         }

        // --- GESTIONE UI (invariato) ---
        function setupUIElements() { /* ... */ setupEmojiPicker(); setupMessageInput(); setupSendButton(); setupAttachButton(); setupLogoutButton(); }
        function setupEmojiPicker() { /* ... */ const eBtn=document.getElementById('emojiBtn'); const ePick=document.getElementById('emojiPicker'); const eItems=document.querySelectorAll('.emoji-item'); const eTabs=document.querySelectorAll('.emoji-tab'); if(!eBtn||!ePick) return; eBtn.onclick=(e)=>{e.stopPropagation();ePick.classList.toggle('show');}; document.onclick=(e)=>{if(!eBtn.contains(e.target)&&!ePick.contains(e.target)) ePick.classList.remove('show');}; eItems.forEach(i=>{i.onclick=()=>{const input=document.getElementById('messageInput');input.value+=i.innerText;input.focus();input.dispatchEvent(new Event('input',{bubbles:true}));};}); eTabs.forEach(t=>{t.onclick=()=>{eTabs.forEach(et=>et.classList.remove('active'));t.classList.add('active');};}); }
        function setupMessageInput() { /* ... */ const input=document.getElementById('messageInput'); if(!input) return; let typingTimeout; input.oninput=function(){this.style.height='auto';this.style.height=Math.min(this.scrollHeight,120)+'px';clearTimeout(typingTimeout);sendTypingStatus(this.value.trim()!=='');typingTimeout=setTimeout(()=>sendTypingStatus(false),2000);}; input.onkeydown=function(e){if(e.key==='Enter'&&!e.shiftKey){e.preventDefault();sendMessage(this.value);this.value='';this.style.height='auto';}}; }
        function setupSendButton() { /* ... */ const btn=document.getElementById('sendBtn'); if(!btn) return; btn.onclick=()=>{const input=document.getElementById('messageInput');const msg=input.value.trim();if(msg){sendMessage(msg);input.value='';input.style.height='auto';input.focus();}}; }
        function setupAttachButton() { /* ... */ const btn=document.getElementById('attachBtn'); if(!btn) return; btn.onclick=()=>{showToast('Info','Allegati non disponibili','info');}; }
        function setupLogoutButton() { /* ... */ const btn=document.getElementById('logoutBtn'); if(!btn) return; btn.onclick=handleLogout; }
        function updateUsernameDisplay() { /* ... */ const el=document.getElementById('usernameSidebar'); const av=document.getElementById('profileAvatarSidebar'); if(el) el.textContent=username; if(av) av.src=getAvatarUrl(username,42); }
        function updateOperatorStatus(isOnline) { /* ... */ const st=document.getElementById('operatorStatus'); const si=document.querySelector('.status-indicator'); if(!st||!si) return; if(isOnline){st.textContent='Online';si.style.backgroundColor='var(--accent-green)';si.style.display='block';}else{st.textContent='Offline';si.style.backgroundColor='var(--text-light)';si.style.display='none';hideTypingIndicator();} }
        function loadChatHistory() { /* ... */ console.log(`Carico cronologia per ${roomId}`); fetch(`/api/chat/history/${roomId}`).then(r=>r.ok?r.json():Promise.reject(new Error(`HTTP ${r.status}`))).then(m=>{displayChatHistory(m);}).catch(e=>{console.error('Errore fetch cronologia:',e);addSystemMessage('Benvenuto! Inizia a chattare.');}); }
        function displayChatHistory(messages) { /* ... */ const c=document.getElementById('messagesContainer'); c.innerHTML=''; if(!messages||messages.length===0){addSystemMessage('Benvenuto! Come possiamo aiutarti?'); return;} let lastDate=null; messages.forEach(m=>{const d=new Date(m.timestamp).toISOString().split('T')[0];if(d!==lastDate){addSystemMessage(formatDay(d));lastDate=d;} const type=(m.sender_id===userId)?'user':'operator'; addMessageToChat(type,m.message||m.content,m.timestamp,true);}); scrollToBottom('chatBody'); }
        function addMessageToChat(type, text, timestamp = null, isHistory = false) { /* ... */ const c=document.getElementById('messagesContainer'); if(!c) return; const n=timestamp?new Date(timestamp):new Date(); const t=formatTime(n); const mg=document.createElement('div'); mg.className=`message-group ${type}`; mg.innerHTML=`<div class="message-content"><div class="message-text">${text.replace(/\n/g,'<br>')}</div><div class="message-meta"><span class="message-time">${t}</span>${type==='user'?'<span class="message-status status-sent"><i class="fas fa-check"></i></span>':''}</div></div>`; c.appendChild(mg); if(!isHistory){scrollToBottom('chatBody'); if(type==='user'){const s=mg.querySelector('.message-status'); setTimeout(()=>{if(s){s.classList.replace('status-sent','status-delivered');s.innerHTML='<i class="fas fa-check-double"></i>';}},800); setTimeout(()=>{if(s){s.classList.replace('status-delivered','status-read');}},2500);}} }
        function addUserMessage(messageText, timestamp = null, isHistory = false) { addMessageToChat('user', messageText, timestamp, isHistory); }
        function addOperatorMessage(messageText, timestamp = null) { addMessageToChat('operator', messageText, timestamp); }
        function addSystemMessage(messageText, timestamp = null) { /* ... */ const c=document.getElementById('messagesContainer'); if(!c) return; const m=`<div class="message-group system"><div class="message-content"><div class="message-text">${messageText}</div></div></div>`; c.insertAdjacentHTML('beforeend',m); if(!messageText.toLowerCase().includes('caricamento')) scrollToBottom('chatBody'); }
        function showTypingIndicator() { /* ... */ const c=document.getElementById('messagesContainer'); if(!c||document.getElementById('typingIndicator')) return; const t=`<div class="message-group operator typing-indicator" id="typingIndicator"><div class="message-content"><div class="typing-dots"><div class="typing-dot"></div><div class="typing-dot"></div><div class="typing-dot"></div></div></div></div>`; c.insertAdjacentHTML('beforeend',t); scrollToBottom('chatBody'); }
        function hideTypingIndicator() { /* ... */ const t=document.getElementById('typingIndicator'); if(t) t.remove(); }
        function sendTypingStatus(isTyping) { /* ... */ if(socket&&socket.connected){clearTimeout(typingTimeout);socket.emit('typing',{userId:userId,username:username,isTyping:isTyping,roomId:roomId}); if(isTyping){typingTimeout=setTimeout(()=>sendTypingStatus(false),2000);}} }
        function sendMessage(messageText) { /* Modificato per usare variabili corrette */ if(!messageText.trim()) return; if(socket&&socket.connected){const timestamp=new Date().toISOString(); addUserMessage(messageText, timestamp); console.log(`[Cliente] Invio messaggio a ${roomId}:`, {sender:userId,senderName:username,content:messageText,timestamp:timestamp,roomId:roomId}); socket.emit('message',{sender:userId,senderName:username,content:messageText,timestamp:timestamp,roomId:roomId}); sendTypingStatus(false);}else{addSystemMessage('Errore: Connessione persa.'); const cs=document.getElementById('connectionStatus');const ct=document.getElementById('connectionText');ct.textContent='Connessione interrotta';cs.classList.remove('connected');cs.classList.add('show');}}
        function handleLogout(e) { /* ... codice logout come prima ... */
             e.preventDefault(); const loadingOverlay = document.createElement('div'); loadingOverlay.style.cssText = 'position:fixed;top:0;left:0;width:100%;height:100%;background:rgba(255,255,255,0.8);display:flex;flex-direction:column;justify-content:center;align-items:center;z-index:2000;backdrop-filter:blur(5px);'; const spinnerContainer = document.createElement('div'); spinnerContainer.style.cssText = 'width:60px;height:60px;position:relative;'; const spinner = document.createElement('div'); spinner.style.cssText = 'border:4px solid rgba(0,0,0,0.1);border-top-color:var(--primary);border-radius:50%;width:100%;height:100%;animation:spin 1s linear infinite;'; const style = document.createElement('style'); style.textContent = `@keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }`; document.head.appendChild(style); spinnerContainer.appendChild(spinner); const loadingText = document.createElement('p'); loadingText.textContent = 'Logout in corso...'; loadingText.style.cssText = 'margin-top:20px;color:var(--primary);font-weight:500;'; loadingOverlay.appendChild(spinnerContainer); loadingOverlay.appendChild(loadingText); document.body.appendChild(loadingOverlay); fetch('/logout', { method: 'POST' }).then(response => response.ok ? response.json() : Promise.reject(new Error('Logout failed'))).then(() => { loadingText.textContent = 'Reindirizzamento...'; setTimeout(() => window.location.href = '/login', 800); }).catch(error => { console.error('Logout error:', error); loadingText.textContent = 'Errore Logout.'; setTimeout(() => loadingOverlay.remove(), 2000); });
         }
         // Funzione per disabilitare la chat in caso di errore di autenticazione
         function disableChatFunctionality() {
             const messageInput = document.getElementById('messageInput');
             const sendBtn = document.getElementById('sendBtn');
             const attachBtn = document.getElementById('attachBtn');
             const emojiBtn = document.getElementById('emojiBtn');
             if (messageInput) messageInput.disabled = true;
             if (sendBtn) sendBtn.disabled = true;
             if (attachBtn) attachBtn.disabled = true;
             if (emojiBtn) emojiBtn.disabled = true;
             addSystemMessage("Autenticazione fallita. Impossibile usare la chat.");
             if (socket && socket.connected) socket.disconnect(); // Disconnette se non autorizzato
         }

    </script>
</body>
</html>

---

**File: `homepage_capo.hbs` (Completo e Aggiornato)**

```html
<!DOCTYPE html>
<html lang="it">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard Capo - YourBite</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap"
        rel="stylesheet">
    <script src="/socket.io/socket.io.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <style>
        /* === Stili CSS come nella versione precedente, mantenuti invariati === */
        :root { /* ... Variabili CSS ... */
            --primary: #5e60ce; --primary-light: #6930c3; --primary-dark: #5390d9; --secondary: #48bfe3; --secondary-light: #64dfdf; --accent: #80ffdb; --accent-green: #2ecc71; --accent-red: #e74c3c; --accent-orange: #f39c12; --dark: #212529; --dark-blue: #1a1a2e; --medium-dark: #252941; --light: #ffffff; --gray: #f8f9fa; --gray-light: #fafbff; --gray-dark: #e9ecef; --text: #212529; --text-light: #6c757d; --shadow: 0 10px 30px rgba(0, 0, 0, 0.1); --shadow-lg: 0 20px 40px rgba(0, 0, 0, 0.15); --shadow-colored: 0 8px 25px rgba(94, 96, 206, 0.25); --radius-sm: 12px; --radius: 16px; --radius-lg: 24px; --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1); --transition-spring: all 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55);
        }
        * { margin: 0; padding: 0; box-sizing: border-box; font-family: 'Poppins', sans-serif; }
        body { background-color: var(--gray); color: var(--text); min-height: 100vh; display: flex; flex-direction: column; overflow-x: hidden; }
        .particles { position: fixed; top: 0; left: 0; width: 100%; height: 100%; pointer-events: none; z-index: -1; }
        .particle { position: absolute; border-radius: 50%; }
        @keyframes particleFloat { 0% { transform: translateY(0) rotate(0deg); } 100% { transform: translateY(-20px) rotate(360deg); } }
        @keyframes particleFade { 0% { opacity: 0.3; } 100% { opacity: 0.6; } }
        header { background: linear-gradient(135deg, var(--primary), var(--primary-dark)); color: var(--light); padding: 1rem 0; box-shadow: var(--shadow); position: sticky; top: 0; z-index: 100; }
        .header-container { width: 100%; max-width: 1400px; margin: 0 auto; padding: 0 1.5rem; display: flex; justify-content: space-between; align-items: center; }
        .logo-wrapper { display: flex; align-items: center; gap: 15px; }
        .logo { height: 40px; width: auto; }
        .site-title { font-size: 1.8rem; font-weight: 700; color: var(--light); text-decoration: none; }
        .nav-menu { display: flex; gap: 1rem; align-items: center; }
        .nav-link { color: rgba(255, 255, 255, 0.85); text-decoration: none; padding: 8px 16px; border-radius: var(--radius-sm); transition: var(--transition); font-weight: 500; }
        .nav-link:hover { background: rgba(255, 255, 255, 0.1); color: var(--light); }
        .nav-link.active { background: rgba(255, 255, 255, 0.2); color: var(--light); font-weight: 600; }
        .user-menu { display: flex; align-items: center; gap: 10px; }
        .notifications-btn { background: rgba(255, 255, 255, 0.1); border: none; color: var(--light); width: 40px; height: 40px; border-radius: var(--radius-sm); display: flex; align-items: center; justify-content: center; position: relative; cursor: pointer; transition: var(--transition); }
        .notifications-btn:hover { background: rgba(255, 255, 255, 0.2); }
        .notification-badge { position: absolute; top: -5px; right: -5px; background-color: var(--accent-red); color: var(--light); border-radius: 50%; padding: 2px; min-width: 18px; height: 18px; font-size: 12px; font-weight: 700; display: flex; align-items: center; justify-content: center; box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2); border: 2px solid var(--primary); }
        .user-profile { display: flex; align-items: center; gap: 10px; background: rgba(255, 255, 255, 0.1); padding: 6px 15px 6px 6px; border-radius: var(--radius-sm); cursor: pointer; transition: var(--transition); }
        .user-profile:hover { background: rgba(255, 255, 255, 0.2); }
        .user-avatar { width: 32px; height: 32px; border-radius: var(--radius-sm); object-fit: cover; background-color: var(--gray-light); }
        .user-name { font-weight: 600; font-size: 14px; }
        .main-container { flex: 1; display: flex; width: 100%; max-width: 1400px; margin: 0 auto; padding: 1.5rem; gap: 1.5rem; }
        .sidebar { width: 280px; flex-shrink: 0; background: var(--light); border-radius: var(--radius); box-shadow: var(--shadow); padding: 1.5rem; display: flex; flex-direction: column; gap: 1.5rem; }
        .sidebar-header { display: flex; align-items: center; gap: 10px; padding-bottom: 15px; border-bottom: 1px solid var(--gray-dark); }
        .sidebar-title { font-size: 1.2rem; font-weight: 600; color: var(--dark); }
        .sidebar-section { margin-bottom: 1rem; }
        .section-title { font-size: 0.9rem; font-weight: 600; color: var(--text-light); text-transform: uppercase; letter-spacing: 0.5px; margin-bottom: 10px; }
        .menu-list { list-style: none; display: flex; flex-direction: column; gap: 5px; }
        .menu-item { display: flex; align-items: center; padding: 10px 15px; border-radius: var(--radius-sm); cursor: pointer; transition: var(--transition); color: var(--text); text-decoration: none; font-weight: 500; }
        .menu-item:hover { background-color: var(--gray-light); }
        .menu-item.active { background-color: rgba(94, 96, 206, 0.1); color: var(--primary); font-weight: 600; }
        .menu-item i { margin-right: 10px; width: 20px; text-align: center; color: var(--text-light); }
        .menu-item.active i { color: var(--primary); }
        .sidebar-stats { margin-top: auto; padding-top: 1rem; border-top: 1px solid var(--gray-dark); }
        .stat-item { display: flex; align-items: center; justify-content: space-between; margin-bottom: 10px; }
        .stat-label { font-size: 0.9rem; color: var(--text-light); }
        .stat-value { font-weight: 600; color: var(--dark); }
        .content-area { flex: 1; display: flex; flex-direction: column; gap: 1.5rem; min-width: 0; }
        .overview-cards { display: grid; grid-template-columns: repeat(auto-fill, minmax(240px, 1fr)); gap: 1.5rem; }
        .overview-card { background: var(--light); border-radius: var(--radius); box-shadow: var(--shadow); padding: 1.5rem; display: flex; flex-direction: column; gap: 10px; transition: var(--transition); cursor: pointer; }
        .overview-card:hover { transform: translateY(-5px); box-shadow: var(--shadow-lg); }
        .card-header { display: flex; justify-content: space-between; align-items: flex-start; }
        .card-title { font-size: 0.9rem; color: var(--text-light); font-weight: 500; }
        .card-icon { width: 40px; height: 40px; border-radius: var(--radius-sm); display: flex; align-items: center; justify-content: center; font-size: 1.2rem; }
        .card-icon.sales { background-color: rgba(94, 96, 206, 0.1); color: var(--primary); } .card-icon.orders { background-color: rgba(72, 191, 227, 0.1); color: var(--secondary); } .card-icon.customers { background-color: rgba(46, 204, 113, 0.1); color: var(--accent-green); } .card-icon.time { background-color: rgba(243, 156, 18, 0.1); color: var(--accent-orange); }
        .card-value { font-size: 1.5rem; font-weight: 700; color: var(--dark); }
        .card-footer { display: flex; align-items: center; gap: 5px; font-size: 0.8rem; }
        .trend-up { color: var(--accent-green); } .trend-down { color: var(--accent-red); }
        .chat-panel { background: var(--light); border-radius: var(--radius); box-shadow: var(--shadow); display: flex; flex-direction: column; height: 650px; overflow: hidden; position: relative; }
        .chat-header { padding: 1rem 1.5rem; border-bottom: 1px solid var(--gray-dark); display: flex; justify-content: space-between; align-items: center; background: var(--light); z-index: 10; }
        .chat-title { font-size: 1.2rem; font-weight: 600; color: var(--dark); display: flex; align-items: center; gap: 10px; } .chat-title i { color: var(--primary); }
        .chat-actions { display: flex; gap: 10px; }
        .chat-action-btn { background: var(--gray-light); border: none; width: 36px; height: 36px; border-radius: var(--radius-sm); display: flex; align-items: center; justify-content: center; color: var(--text-light); cursor: pointer; transition: var(--transition); }
        .chat-action-btn:hover { background: rgba(94, 96, 206, 0.1); color: var(--primary-dark); transform: translateY(-2px); } .chat-action-btn.danger:hover { background: rgba(231, 76, 60, 0.1); color: var(--accent-red); }
        .chat-conversations { flex: 1; display: flex; overflow: hidden; }
        .chat-sidebar { width: 320px; border-right: 1px solid var(--gray-dark); overflow-y: auto; background: var(--gray-light); display: flex; flex-direction: column; }
        .chat-search { padding: 15px; position: sticky; top: 0; background: var(--gray-light); z-index: 5; border-bottom: 1px solid var(--gray-dark); }
        .search-input { width: 100%; padding: 10px 15px; border-radius: var(--radius-sm); border: 1px solid var(--gray-dark); background: var(--light); display: flex; align-items: center; gap: 10px; transition: var(--transition); }
        .search-input i { color: var(--text-light); } .search-input input { flex: 1; border: none; outline: none; background: transparent; font-size: 0.9rem; color: var(--text); } .search-input:focus-within { border-color: var(--primary); box-shadow: 0 0 0 3px rgba(94, 96, 206, 0.1); }
        .chat-list { flex: 1; list-style: none; display: flex; flex-direction: column; }
        .chat-item { padding: 15px; display: flex; gap: 15px; border-bottom: 1px solid var(--gray-dark); cursor: pointer; transition: var(--transition); position: relative; }
        .chat-item:hover { background: var(--light); } .chat-item.active { background: var(--light); border-left: 4px solid var(--primary); padding-left: 11px; }
        .chat-avatar { width: 48px; height: 48px; border-radius: var(--radius-sm); object-fit: cover; flex-shrink: 0; background-color: var(--gray-light); }
        .chat-item-content { flex: 1; min-width: 0; display: flex; flex-direction: column; gap: 5px; }
        .chat-item-header { display: flex; justify-content: space-between; align-items: center; gap: 8px; }
        .chat-name { font-weight: 600; font-size: 0.95rem; color: var(--dark); white-space: nowrap; overflow: hidden; text-overflow: ellipsis; flex-grow: 1; }
        .chat-time { font-size: 0.8rem; color: var(--text-light); flex-shrink: 0; }
        .chat-message { font-size: 0.85rem; color: var(--text-light); overflow: hidden; text-overflow: ellipsis; white-space: nowrap; max-width: 100%; }
        .chat-item-status { display: flex; justify-content: space-between; align-items: center; }
        .chat-status { font-size: 0.75rem; color: var(--text-light); }
        .message-count { display: flex; align-items: center; justify-content: center; min-width: 20px; height: 20px; padding: 0 6px; background: var(--primary); color: var(--light); border-radius: 10px; font-size: 0.75rem; font-weight: 600; margin-left: auto; }
        .chat-item-actions { display: flex; gap: 5px; align-items: center; }
        .chat-item-action-btn { background: none; border: none; color: var(--text-light); cursor: pointer; padding: 4px; font-size: 0.85rem; line-height: 1; border-radius: 4px; transition: var(--transition-fast); }
        .chat-item-action-btn:hover { background-color: var(--gray-dark); color: var(--dark); } .chat-item-action-btn.delete:hover { color: var(--accent-red); }
        .chat-main { flex: 1; display: flex; flex-direction: column; background-color: var(--gray-light); background-image: url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%239C92AC' fill-opacity='0.03'%3E%3Cpath d='M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E"); position: relative; }
        .chat-placeholder { display: flex; flex-direction: column; align-items: center; justify-content: center; height: 100%; padding: 2rem; text-align: center; color: var(--text-light); }
        .placeholder-icon { font-size: 4rem; margin-bottom: 1rem; color: var(--gray-dark); background: var(--light); width: 100px; height: 100px; border-radius: 50%; display: flex; align-items: center; justify-content: center; }
        .placeholder-title { font-size: 1.2rem; font-weight: 600; margin-bottom: 0.5rem; color: var(--text); }
        .placeholder-text { max-width: 400px; }
        .chat-content { flex: 1; padding: 20px; overflow-y: auto; display: flex; flex-direction: column; }
        .chat-day { display: flex; align-items: center; justify-content: center; margin: 20px 0; color: var(--text-light); font-size: 0.8rem; }
        .chat-day span { background: var(--light); padding: 5px 10px; border-radius: 20px; }
        .message { display: flex; flex-direction: column; max-width: 70%; margin-bottom: 15px; animation: fadeIn 0.3s forwards; }
        .message.outgoing { align-self: flex-end; } .message.incoming { align-self: flex-start; }
        .message-bubble { padding: 12px 16px; border-radius: var(--radius-sm); box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05); position: relative; overflow-wrap: break-word; }
        .outgoing .message-bubble { background: linear-gradient(135deg, var(--primary), var(--primary-dark)); color: var(--light); border-top-right-radius: 2px; }
        .outgoing .message-bubble::after { content: ''; position: absolute; right: -8px; top: 0; border-left: 10px solid var(--primary-dark); border-right: 0; border-bottom: 10px solid transparent; }
        .incoming .message-bubble { background: var(--light); color: var(--text); border-top-left-radius: 2px; }
        .incoming .message-bubble::after { content: ''; position: absolute; left: -8px; top: 0; border-right: 10px solid var(--light); border-left: 0; border-bottom: 10px solid transparent; }
        .message-meta { margin-top: 5px; display: flex; align-items: center; justify-content: flex-end; font-size: 0.75rem; color: var(--text-light); }
        .outgoing .message-meta { color: rgba(255, 255, 255, 0.7); }
        .message-time { margin-right: 5px; } .message-status i { margin-left: 3px; }
        .chat-footer { padding: 15px 20px; background: var(--light); border-top: 1px solid var(--gray-dark); display: flex; align-items: center; gap: 15px; }
        .chat-tools { display: flex; gap: 10px; }
        .chat-tool { background: transparent; border: none; color: var(--text-light); width: 36px; height: 36px; border-radius: 50%; display: flex; align-items: center; justify-content: center; cursor: pointer; transition: var(--transition); }
        .chat-tool:hover { background: var(--gray-light); color: var(--primary); }
        .chat-input-wrapper { flex: 1; display: flex; align-items: center; background: var(--gray-light); border-radius: 20px; padding: 5px 15px; gap: 10px; border: 1px solid var(--gray-dark); transition: var(--transition); }
        .chat-input-wrapper:focus-within { border-color: var(--primary); box-shadow: 0 0 0 3px rgba(94, 96, 206, 0.1); }
        .chat-input { flex: 1; border: none; outline: none; background: transparent; padding: 10px 0; font-size: 0.95rem; color: var(--text); resize: none; min-height: 24px; max-height: 100px; }
        .chat-send { background: var(--primary); border: none; color: var(--light); width: 40px; height: 40px; border-radius: 50%; display: flex; align-items: center; justify-content: center; cursor: pointer; transition: var(--transition-spring); box-shadow: 0 3px 8px rgba(94, 96, 206, 0.3); }
        .chat-send:hover { transform: scale(1.1); box-shadow: 0 5px 15px rgba(94, 96, 206, 0.4); } .chat-send:active { transform: scale(0.95); }
        .typing-indicator { padding: 10px 15px; background: var(--light); border-radius: var(--radius-sm); display: inline-flex; align-items: center; gap: 10px; margin-bottom: 15px; align-self: flex-start; max-width: 100px; animation: fadeIn 0.3s forwards; }
        .typing-dots { display: flex; align-items: center; gap: 4px; }
        .typing-dot { width: 7px; height: 7px; border-radius: 50%; background: var(--text-light); animation: typingAnimation 1.4s infinite; }
        .typing-dot:nth-child(2) { animation-delay: 0.2s; } .typing-dot:nth-child(3) { animation-delay: 0.4s; }
        @keyframes typingAnimation { 0%, 60%, 100% { transform: translateY(0); opacity: 0.6; } 30% { transform: translateY(-4px); opacity: 1; } }
        @keyframes fadeIn { from { opacity: 0; transform: translateY(10px); } to { opacity: 1; transform: translateY(0); } }
        .connection-status { position: fixed; top: 10px; left: 50%; transform: translateX(-50%); background-color: var(--accent-red); color: white; padding: 8px 16px; border-radius: 99px; font-size: 14px; font-weight: 500; box-shadow: var(--shadow); display: flex; align-items: center; gap: 8px; opacity: 0; pointer-events: none; transition: opacity 0.3s ease, background-color 0.3s ease; z-index: 1000; }
        .connection-status.show { opacity: 1; pointer-events: auto; } .connection-status.connected { background-color: var(--accent-green); opacity: 1; animation: fadeOutStatus 3s forwards 2s; }
        @keyframes fadeOutStatus { to { opacity: 0; pointer-events: none; } }
        .connection-icon { font-size: 16px; animation: blinkIcon 1s infinite; }
        @keyframes blinkIcon { 0%, 100% { opacity: 1; } 50% { opacity: 0.5; } }
        .auth-alert { position: fixed; top: 80px; right: 20px; background-color: #f8d7da; border: 1px solid #f5c6cb; color: #721c24; padding: 15px 20px; border-radius: var(--radius-sm); box-shadow: var(--shadow); z-index: 9999; max-width: 400px; }
        .auth-alert h4 { margin-top: 0; margin-bottom: 10px; font-size: 1rem; font-weight: 600; } .auth-alert p { margin-bottom: 15px; margin-top: 0; font-size: 0.9rem; } .auth-alert button { background: #dc3545; color: white; border: none; padding: 8px 15px; border-radius: var(--radius-sm); cursor: pointer; transition: background-color 0.2s; } .auth-alert button:hover { background: #c82333; }
        .error-message { padding: 20px; background-color: #ffeeee; color: #d85030; border-radius: 8px; margin: 20px; text-align: center; font-size: 14px; line-height: 1.5; }
        .refresh-button { margin-top: 15px; padding: 8px 16px; background-color: var(--primary); color: white; border: none; border-radius: 4px; cursor: pointer; } .refresh-button:hover { background-color: #4850e0; }
        /* Responsive */
        @media (max-width: 1200px) { .main-container { flex-direction: column; } .sidebar { width: 100%; } .chat-panel { height: 500px; } }
        @media (max-width: 768px) { .header-container { flex-direction: column; gap: 10px; padding: 1rem; } .nav-menu { width: 100%; overflow-x: auto; padding-bottom: 10px; -ms-overflow-style: none; scrollbar-width: none; } .nav-menu::-webkit-scrollbar { display: none; } .nav-link { white-space: nowrap; } .main-container { padding: 1rem; } .overview-cards { grid-template-columns: 1fr; } .chat-conversations { flex-direction: column; } .chat-sidebar { width: 100%; height: 200px; border-right: none; border-bottom: 1px solid var(--gray-dark); } }
    </style>
</head>

<body>
    <!-- Connection status indicator -->
    <div class="connection-status" id="connectionStatus">
        <i class="fas fa-sync-alt connection-icon"></i>
        <span id="connectionText">Connessione in corso...</span>
    </div>

    <!-- Particle Background -->
    <div class="particles" id="particles"></div>

    <!-- Header -->
    <header>
        <div class="header-container">
            <div class="logo-wrapper">
                <img src="/img/logo.png" alt="YourBite Logo" class="logo"> <!-- Corretto percorso -->
                <a href="#" class="site-title">YourBite</a>
            </div>

            <nav class="nav-menu">
                <a href="/homepage_capo" class="nav-link active">Homepage</a>
                <a href="/dashboard" class="nav-link">Dashboard</a>
                <a href="/ordini" class="nav-link">Ordini</a>
                <a href="/menu" class="nav-link">Menu</a>
                <a href="/statistiche" class="nav-link">Statistiche</a>
                <a href="/personale" class="nav-link">Personale</a>
            </nav>

            <div class="user-menu">
                <button class="notifications-btn">
                    <i class="far fa-bell"></i>
                    <span class="notification-badge">3</span>
                </button>
                <div class="user-profile" id="userProfileBtn">
                    <img src="https://ui-avatars.com/api/?name=Manager&background=random&color=fff&size=32" alt="User" class="user-avatar" id="userAvatarHeader">
                    <span class="user-name" id="usernameHeader">Manager</span>
                </div>
            </div>
        </div>
    </header>

    <!-- Main Content -->
    <main class="main-container">
        <!-- Sidebar -->
        <aside class="sidebar">
            <div class="sidebar-header">
                <i class="fas fa-chart-line"></i>
                <h2 class="sidebar-title">Dashboard</h2>
            </div>

            <div class="sidebar-section">
                <h3 class="section-title">Menu</h3>
                <ul class="menu-list">
                    <li> <a href="/homepage_capo" class="menu-item active"><i class="fas fa-home"></i> Homepage</a></li>
                    <li> <a href="/dashboard" class="menu-item"><i class="fas fa-tachometer-alt"></i> Dashboard</a> </li>
                    <li> <a href="/ordini" class="menu-item"><i class="fas fa-shopping-bag"></i> Ordini</a> </li>
                    <li> <a href="/menu" class="menu-item"><i class="fas fa-utensils"></i> Menu</a> </li>
                    <li> <a href="/statistiche" class="menu-item"><i class="fas fa-chart-bar"></i> Statistiche</a> </li>
                    <li> <a href="/personale" class="menu-item"><i class="fas fa-users"></i> Personale</a> </li>
                </ul>
            </div>

            <div class="sidebar-section">
                <h3 class="section-title">Strumenti</h3>
                <ul class="menu-list">
                    <li> <a href="/impostazioni" class="menu-item"><i class="fas fa-cog"></i> Impostazioni</a> </li>
                    <li> <a href="/profilo" class="menu-item"><i class="fas fa-user-cog"></i> Profilo</a> </li>
                    <li> <a href="#" class="menu-item" id="logoutBtn"><i class="fas fa-sign-out-alt"></i> Logout</a></li>
                </ul>
            </div>

            <div class="sidebar-stats">
                <div class="stat-item"><span class="stat-label">Ordini oggi</span><span class="stat-value">24</span></div>
                <div class="stat-item"><span class="stat-label">Clienti attivi</span><span class="stat-value">156</span></div>
                <div class="stat-item"><span class="stat-label">Tempo medio consegna</span><span class="stat-value">25 min</span></div>
            </div>
        </aside>

        <!-- Content Area -->
        <div class="content-area">
            <!-- Overview Cards -->
            <div class="overview-cards">
                 <div class="overview-card"> <div class="card-header"> <h3 class="card-title">Vendite Oggi</h3> <div class="card-icon sales"><i class="fas fa-euro-sign"></i></div> </div> <div class="card-value">€1,250</div> <div class="card-footer"><i class="fas fa-arrow-up trend-up"></i><span class="trend-up">+12% vs ieri</span></div> </div>
                 <div class="overview-card"> <div class="card-header"> <h3 class="card-title">Ordini Completati</h3> <div class="card-icon orders"><i class="fas fa-shopping-bag"></i></div> </div> <div class="card-value">24</div> <div class="card-footer"><i class="fas fa-arrow-up trend-up"></i><span class="trend-up">+8% vs ieri</span></div> </div>
                 <div class="overview-card"> <div class="card-header"> <h3 class="card-title">Nuovi Clienti</h3> <div class="card-icon customers"><i class="fas fa-user-plus"></i></div> </div> <div class="card-value">8</div> <div class="card-footer"><i class="fas fa-arrow-down trend-down"></i><span class="trend-down">-3% vs ieri</span></div> </div>
                 <div class="overview-card"> <div class="card-header"> <h3 class="card-title">Tempo Medio Consegna</h3> <div class="card-icon time"><i class="fas fa-clock"></i></div> </div> <div class="card-value">25 min</div> <div class="card-footer"><i class="fas fa-arrow-up trend-up"></i><span class="trend-up">+5% veloce</span></div> </div>
            </div>

            <!-- Chat Panel -->
            <div class="chat-panel">
                <div class="chat-header">
                    <div class="chat-title"> <i class="fas fa-comments"></i> Assistenza Clienti </div>
                    <div class="chat-actions">
                        <button class="chat-action-btn danger" id="deleteAllChatsBtn" title="Elimina Tutte le Chat"> <i class="fas fa-dumpster-fire"></i> </button>
                        <button class="chat-action-btn" title="Filtra Chat"> <i class="fas fa-filter"></i> </button>
                        <button class="chat-action-btn" title="Nuovo Messaggio (non implementato)"> <i class="fas fa-plus"></i> </button>
                    </div>
                </div>

                <div class="chat-conversations">
                    <div class="chat-sidebar">
                        <div class="chat-search"> <div class="search-input"> <i class="fas fa-search"></i> <input type="text" placeholder="Cerca clienti..."> </div> </div>
                        <ul class="chat-list" id="chatList">
                            <li class="chat-item"><div class="chat-item-content"><div class="chat-name">Caricamento chat...</div></div></li>
                        </ul>
                    </div>

                    <div class="chat-main" id="chatMain">
                        <div class="chat-placeholder" id="chatPlaceholder"> <div class="placeholder-icon"><i class="far fa-comments"></i></div> <h3 class="placeholder-title">Seleziona una chat</h3> <p class="placeholder-text">Seleziona una chat dalla lista per visualizzare i messaggi.</p> </div>
                        <div class="chat-content" id="chatContent" style="display: none;"> <!-- Messaggi --> </div>
                        <div class="chat-footer" id="chatFooter" style="display: none;">
                            <div class="chat-tools"> <button class="chat-tool" title="Emoji"><i class="far fa-smile"></i></button> <button class="chat-tool" title="Allega File"><i class="fas fa-paperclip"></i></button> </div>
                            <div class="chat-input-wrapper"> <textarea class="chat-input" id="chatInput" placeholder="Scrivi un messaggio..." rows="1"></textarea> </div>
                            <button class="chat-send" id="chatSend"><i class="fas fa-paper-plane"></i></button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <!-- Toast Notifications Container -->
    <div class="toast-container" id="toastContainer"></div>

    <!-- Includi i dati utente passati dal server (NECESSARIO!) -->
    <script>
        // Rendi disponibili i dati dell'utente loggato al JavaScript
        // Il server DEVE passare l'oggetto 'user' quando renderizza questa vista
        const currentUser = {{{ json user }}};
        console.log("Dati utente ricevuti dal server (homepage_capo.hbs):", currentUser);
    </script>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Verifica se currentUser è definito e valido
             if (typeof currentUser === 'undefined' || !currentUser || !currentUser.id || currentUser.tipo !== 'capo') {
                 console.error("ERRORE CRITICO: Dati utente Capo non disponibili o non validi!");
                 showAuthAlert("Accesso Negato", "Impossibile verificare l'account Capo. Riprova il login.", true);
                 disableChatFunctionality(); // Disabilita la chat
                 return; // Interrompi l'esecuzione
             }

            checkSessionStatusWithoutRedirect(); // Verifica sessione senza redirect (potrebbe essere ridondante ora)
            initializeSocketIO();
            setupUIElements();
        });

        // Variabili globali (ora usano currentUser)
        let socket;
        const userType = 'capo'; // Fisso per questa pagina
        const operatorId = `capo_${currentUser?.id}`; // Usa ID reale dal server
        const operatorName = currentUser?.username || 'Assistenza'; // Usa nome reale
        let activeChatUserId = null; // ID utente della chat attiva (es. 'client_123')
        let clients = []; // Array per memorizzare le informazioni sui client/chat
        let chatHistoryCache = {}; // Cache per la cronologia dei messaggi

        // --- FUNZIONI HELPER (invariate) ---
        function showToast(type = 'info', title = 'Notifica', message = '') { /* ... */ const el = document.getElementById('toastContainer'); if (!el) return; const t = document.createElement('div'); t.className = `toast ${type}`; let i = 'fa-info-circle'; if (type === 'success') i = 'fa-check-circle'; if (type === 'error') i = 'fa-times-circle'; if (type === 'warning') i = 'fa-exclamation-triangle'; t.innerHTML = `<i class="fas ${i} toast-icon"></i><div class="toast-content"><div class="toast-title">${title}</div><div class="toast-message">${message}</div></div><button class="toast-close"><i class="fas fa-times"></i></button>`; t.querySelector('.toast-close').onclick = () => { t.style.animation = 'slideOut 0.3s forwards'; t.onanimationend = () => t.remove(); }; el.appendChild(t); setTimeout(() => { if (t.parentElement) { t.style.animation = 'slideOut 0.3s forwards'; t.onanimationend = () => t.remove(); } }, 5000); }
        function getAvatarUrl(name, size = 48) { /* ... */ const apiUrl = `https://ui-avatars.com/api/?name=${encodeURIComponent(name || '??')}&background=random&color=fff&size=${size}&bold=true`; return apiUrl; }
        function formatTime(date) { /* ... */ return new Date(date).toLocaleTimeString('it-IT', { hour: '2-digit', minute: '2-digit' }); }
        function formatDay(dateString) { /* ... */ const d = new Date(dateString); const today = new Date(); const y = new Date(today); y.setDate(y.getDate() - 1); const ds = d.toISOString().split('T')[0]; if (ds === today.toISOString().split('T')[0]) return 'Oggi'; if (ds === y.toISOString().split('T')[0]) return 'Ieri'; return d.toLocaleDateString('it-IT', { weekday: 'long', day: 'numeric', month: 'long' }); }
        function scrollToBottom(elementId = 'chatContent') { /* ... */ const el = document.getElementById(elementId); if (el) { setTimeout(() => el.scrollTop = el.scrollHeight, 50); } }
        function playNotificationSound() { /* ... */ try { const a = new Audio('/sounds/notification.mp3'); a.volume = 0.3; a.play().catch(e => console.log('Audio play failed:', e)); } catch (e) { console.log('Audio init failed:', e); } }
        function showAuthAlert(title, message, showLoginButton = false) { /* ... */ const a = document.createElement('div'); a.className = 'auth-alert'; a.style.cssText = "position: fixed; top: 80px; right: 20px; background-color: #f8d7da; border: 1px solid #f5c6cb; color: #721c24; padding: 15px 20px; border-radius: var(--radius-sm); box-shadow: var(--shadow); z-index: 9999; max-width: 400px;"; a.innerHTML = `<h4 style="margin-top:0;margin-bottom:10px;font-size:1rem;font-weight:600">${title}</h4><p style="margin-bottom:${showLoginButton ? '15px' : '0'};margin-top:0;font-size:0.9rem;">${message}</p>${showLoginButton ? '<button id="redirectLoginBtn" style="background:#dc3545;color:white;border:none;padding:8px 15px;border-radius:var(--radius-sm);cursor:pointer">Vai al login</button>' : ''}`; document.body.appendChild(a); if (showLoginButton) { document.getElementById('redirectLoginBtn').onclick = () => window.location.href = '/login'; } else { setTimeout(() => a.remove(), 10000); } }

        // --- SOCKET.IO (Lato Capo Aggiornato) ---
        function initializeSocketIO() {
            const connectionStatus = document.getElementById('connectionStatus');
            const connectionText = document.getElementById('connectionText');
            connectionStatus.classList.remove('show', 'connected');

            socket = io({ reconnectionAttempts: 5, reconnectionDelay: 3000 });

            const connectionTimeout = setTimeout(() => { connectionStatus.classList.add('show'); connectionText.textContent = 'Connessione...'; }, 2000);

            socket.on('connect', () => {
                console.log('Socket.IO Capo Connesso:', socket.id);
                clearTimeout(connectionTimeout);
                connectionText.textContent = 'Connesso';
                connectionStatus.classList.add('connected', 'show');
                setTimeout(() => connectionStatus.classList.remove('show'), 3000);

                // **INVIA IDENTIFICAZIONE CORRETTA**
                console.log(`[Capo] Invio identify: userId=${operatorId}, username=${operatorName}, userType=${userType}`);
                socket.emit('identify', {
                    userId: operatorId,
                    username: operatorName,
                    userType: userType // 'capo'
                });

                loadSupportRequests(); // Carica le chat esistenti
            });

            socket.on('new_support_request', handleNewSupportRequest);
            socket.on('message', handleIncomingMessage);
            socket.on('typing', handleTypingEvent);
            socket.on('userLeave', handleUserLeave); // Aggiunto listener per disconnessione cliente
            // 'past_messages' viene ricevuto su 'operatorJoinRoom'

            socket.on('disconnect', (reason) => { /* ... codice come prima ... */
                 console.log('Socket.IO Disconnesso:', reason); connectionText.textContent = 'Connessione persa'; connectionStatus.classList.remove('connected'); connectionStatus.classList.add('show');
             });
            socket.on('reconnect', () => { /* ... codice come prima ... */
                 console.log('Socket.IO Riconnesso'); connectionText.textContent = 'Connesso'; connectionStatus.classList.add('connected'); setTimeout(() => { connectionStatus.classList.remove('show'); }, 3000);
                 // Ri-identifica come operatore
                 socket.emit('identify', { userId: operatorId, username: operatorName, userType: userType });
                 loadSupportRequests(); // Ricarica le chat
                 // Se c'era una chat attiva, ri-unisciti
                 if (activeChatUserId) { const client = clients.find(c=>c.id === activeChatUserId); if(client) socket.emit('operatorJoinRoom', { roomId: client.roomId || `support_${activeChatUserId}`}); }
             });
            socket.on('connect_error', (error) => { /* ... codice come prima ... */
                console.error('Socket.IO Errore Connessione:', error); connectionText.textContent = 'Errore Connessione'; connectionStatus.classList.remove('connected'); connectionStatus.classList.add('show');
            });
        }

        function handleNewSupportRequest(data) {
            console.log('[Capo] Nuova richiesta supporto:', data);
            const existingClient = clients.find(c => c.id === data.user.userId);
            if (!existingClient) {
                const newClient = {
                    id: data.user.userId,
                    name: data.user.username || `Utente ${data.user.userId.substring(data.user.userId.length - 4)}`,
                    roomId: data.roomId,
                    online: true,
                    unreadCount: 1,
                    lastMessage: { text: 'Nuova richiesta...', timestamp: new Date().toISOString() }
                };
                clients.unshift(newClient); // Aggiungi in cima
                updateClientListUI();
                playNotificationSound();
                showToast('Nuova Chat', `Nuova richiesta da ${newClient.name}`, 'info');
            } else {
                // Se esiste già, magari era offline, aggiorna stato e metti in cima
                existingClient.online = true;
                existingClient.roomId = data.roomId; // Assicurati che roomId sia aggiornato
                existingClient.unreadCount = (existingClient.unreadCount || 0) + 1; // Incrementa non letti
                clients = clients.filter(c => c.id !== data.user.userId); // Rimuovi dalla posizione attuale
                clients.unshift(existingClient); // Metti in cima
                updateClientListUI();
                playNotificationSound();
            }
        }

        function handleIncomingMessage(data) {
            console.log('[Capo] Messaggio ricevuto:', data);
             // Estrai ID cliente dal sender o userId
             const senderId = data.sender?.startsWith('client_') ? data.sender : data.userId;

             if (!senderId || senderId === operatorId) return; // Ignora messaggi dall'operatore stesso

             let client = clients.find(c => c.id === senderId);
             const isNew = !client;

             if (isNew) { // Cliente non nella lista? Potrebbe accadere se la pagina è stata ricaricata
                 console.warn(`[Capo] Messaggio ricevuto da cliente non in lista: ${senderId}. Aggiungo.`);
                 client = { id: senderId, name: data.senderName || `Utente ${senderId.substring(senderId.length-4)}`, roomId: data.roomId || `support_${senderId}`, online: true, unreadCount: 0, lastMessage: { text: '', timestamp: '' } };
                 clients.unshift(client);
             }

             // Aggiorna ultimo messaggio
             client.lastMessage = { text: data.content, timestamp: data.timestamp };
             client.online = true; // Assume online se manda messaggio

             if (activeChatUserId !== senderId) {
                 client.unreadCount = (client.unreadCount || 0) + 1;
             } else {
                 // Se è la chat attiva, aggiungi messaggio e nascondi typing
                 addMessageToChat('incoming', data.content, data.timestamp);
                 hideTypingIndicator();
             }

             // Sposta in cima e aggiorna UI
             clients = clients.filter(c => c.id !== senderId);
             clients.unshift(client);
             updateClientListUI();
             playNotificationSound();
        }

        function handleTypingEvent(data) {
            // Mostra solo se il cliente sta scrivendo nella chat attiva
            if (activeChatUserId === data.userId && data.userId !== operatorId) {
                if (data.isTyping) showTypingIndicator(); else hideTypingIndicator();
            }
        }

        function handleUserLeave(data) {
            console.log('[Capo] Cliente ha lasciato:', data);
            const client = clients.find(c => c.id === data.userId);
            if (client) {
                client.online = false;
                updateClientListUI();
                 if (activeChatUserId === data.userId) {
                     addSystemMessage(`${client.name} si è disconnesso.`);
                 }
            }
        }

        function handlePastMessages(data) {
            console.log(`[Capo] Messaggi passati ricevuti per ${data.roomId}`);
            if (data.roomId === `support_${activeChatUserId}`) {
                chatHistoryCache[activeChatUserId] = data.messages;
                displayChatHistory(data.messages);
            }
        }

        // --- GESTIONE UI (invariato, ma assicurati che funzioni come previsto) ---
        function setupUIElements() { /* ... */ setupMessageInput(); setupSendButton(); setupLogoutButton(); setupDeleteButtons(); /* Aggiungi altri se necessario */ }
        function updateClientListUI() { /* ... codice come prima ... */
            const chatList = document.getElementById('chatList'); if (!chatList) return; chatList.innerHTML = '';
            if (!clients || clients.length === 0) { chatList.innerHTML = '<li class="chat-item"><div class="chat-item-content"><div class="chat-name" style="color: var(--text-light); font-style: italic;">Nessuna chat attiva</div></div></li>'; return; }
            clients.forEach(client => { const chatItem = document.createElement('li'); chatItem.className = 'chat-item'; chatItem.dataset.userId = client.id; if (client.id === activeChatUserId) chatItem.classList.add('active'); let timeText = ''; if (client.lastMessage?.timestamp) { const msgDate = new Date(client.lastMessage.timestamp); const now = new Date(); if (msgDate.toDateString() === now.toDateString()) timeText = formatTime(msgDate); else timeText = msgDate.toLocaleDateString('it-IT', { day: '2-digit', month: '2-digit' }); } const displayName = client.name || `Utente ${client.id.substring(client.id.length - 4)}`; const avatarUrl = getAvatarUrl(displayName, 48);
            chatItem.innerHTML = `<img src="${avatarUrl}" alt="${displayName}" class="chat-avatar" onerror="this.onerror=null; this.src=getAvatarUrl('??', 48);"><div class="chat-item-content"><div class="chat-item-header"><div class="chat-name">${displayName}</div><div class="chat-item-actions"><button class="chat-item-action-btn edit-chat-btn" title="Modifica Nome" data-userid="${client.id}" data-currentname="${displayName}"><i class="fas fa-pencil-alt"></i></button><button class="chat-item-action-btn delete-chat-btn delete" title="Elimina Chat" data-roomid="${client.roomId}" data-username="${displayName}"><i class="fas fa-trash-alt"></i></button></div><div class="chat-time">${timeText}</div></div><div class="chat-message">${client.lastMessage?.text || '...'}</div><div class="chat-item-status"><div class="chat-status">${client.online ? 'Online' : 'Offline'}</div>${client.unreadCount ? `<div class="message-count">${client.unreadCount}</div>` : ''}</div></div>`;
            chatItem.addEventListener('click', (e) => { if (!e.target.closest('.chat-item-action-btn')) openChat(client.id); }); const editBtn = chatItem.querySelector('.edit-chat-btn'); const deleteBtn = chatItem.querySelector('.delete-chat-btn'); if (editBtn) editBtn.addEventListener('click', (e) => { e.stopPropagation(); handleEditChatName(client.id, displayName); }); if (deleteBtn) deleteBtn.addEventListener('click', (e) => { e.stopPropagation(); handleDeleteChat(client.roomId, displayName); }); chatList.appendChild(chatItem); });
        }
        function handleEditChatName(userId, currentName) { /* ... codice come prima ... */
            const newName = prompt(`Modifica nome per "${currentName}":`, currentName); if (newName && newName.trim() !== '' && newName !== currentName) { const client = clients.find(c => c.id === userId); if (client) { client.name = newName.trim(); updateClientListUI(); showToast('success', 'Nome Aggiornato', `Nome cambiato in "${newName.trim()}".`); } } else if (newName !== null) { showToast('info', 'Modifica Annullata', 'Nessuna modifica.'); }
        }
        async function handleDeleteChat(roomId, userName) { /* ... codice come prima ... */
            if (!roomId) { showToast('error', 'Errore', 'ID stanza non valido.'); return; } if (confirm(`Eliminare TUTTI i messaggi della chat con "${userName}"?`)) { try { const response = await fetch(`/api/chat/messages/${roomId}`, { method: 'DELETE' }); const result = await response.json(); if (response.ok && result.success) { showToast('success', 'Chat Eliminata', `Messaggi per ${userName} eliminati.`); clients = clients.filter(c => c.roomId !== roomId); delete chatHistoryCache[roomId.replace('support_', '')]; updateClientListUI(); if (`support_${activeChatUserId}` === roomId) { activeChatUserId = null; document.getElementById('chatPlaceholder').style.display = 'flex'; document.getElementById('chatContent').style.display = 'none'; document.getElementById('chatFooter').style.display = 'none'; } } else { throw new Error(result.error || `Errore ${response.status}`); } } catch (error) { console.error('Errore eliminazione chat:', error); showToast('error', 'Errore Eliminazione', `Impossibile eliminare: ${error.message}`); } }
        }
        async function handleDeleteAllChats() { /* ... codice come prima ... */
            if (confirm("ELIMINARE TUTTE LE CONVERSAZIONI? Azione IRREVERSIBILE.")) { if (confirm("CONFERMA DEFINITIVA?")) { try { const response = await fetch('/api/chat/all-conversations', { method: 'DELETE' }); const result = await response.json(); if (response.ok && result.success) { showToast('success', 'Chat Eliminate', `Tutte le ${result.deleted || 0} conversazioni eliminate.`); clients = []; chatHistoryCache = {}; updateClientListUI(); activeChatUserId = null; document.getElementById('chatPlaceholder').style.display = 'flex'; document.getElementById('chatContent').style.display = 'none'; document.getElementById('chatFooter').style.display = 'none'; } else { throw new Error(result.error || `Errore ${response.status}`); } } catch (error) { console.error('Errore eliminazione TUTTE:', error); showToast('error', 'Errore Critico', `Impossibile eliminare: ${error.message}`); } } }
        }
        function openChat(userId) { /* Modificato per inviare operatorJoinRoom */
            if (activeChatUserId === userId) return; console.log(`Apertura chat per utente: ${userId}`); activeChatUserId = userId; const client = clients.find(c => c.id === userId); if (!client) { console.error(`Cliente ${userId} non trovato.`); return; }
            document.querySelectorAll('.chat-item').forEach(item => item.classList.remove('active')); const selectedItem = document.querySelector(`.chat-item[data-userId="${userId}"]`); if (selectedItem) selectedItem.classList.add('active');
            document.getElementById('chatPlaceholder').style.display = 'none'; document.getElementById('chatContent').style.display = 'flex'; document.getElementById('chatFooter').style.display = 'flex'; document.getElementById('chatContent').innerHTML = ''; hideTypingIndicator();
            client.unreadCount = 0; updateClientListUI();
            const roomId = client.roomId || `support_${userId}`;
            // **INVIA EVENTO PER JOINARE LA STANZA SPECIFICA**
            if (socket && socket.connected) { socket.emit('operatorJoinRoom', { roomId: roomId }); console.log(`[Capo FE] Richiesto join a ${roomId}`); } else { showToast('error', 'Errore Connessione', 'Socket non connesso.'); }
            // Il caricamento storia ora è triggerato dal server su 'operatorJoinRoom' tramite 'past_messages'
            addSystemMessage('Caricamento messaggi...');
            setTimeout(() => document.getElementById('chatInput')?.focus(), 100);
        }
        function displayChatHistory(messages) { /* ... codice come prima ... */
            const c=document.getElementById('chatContent'); c.innerHTML=''; if(!messages||messages.length===0){addSystemMessage('Nessun messaggio.'); return;} let lastDate=null; messages.forEach(m=>{const d=new Date(m.timestamp).toISOString().split('T')[0];if(d!==lastDate){addSystemMessage(formatDay(d));lastDate=d;} const type=(m.sender_id===operatorId)?'outgoing':'incoming'; addMessageToChat(type,m.message||m.content,m.timestamp,true);}); scrollToBottom('chatContent');
        }
        function addMessageToChat(type, text, timestamp = null, isHistory = false) { /* Modificato per distinguere incoming/outgoing */
             const c=document.getElementById('chatContent'); if(!c) return; const n=timestamp?new Date(timestamp):new Date(); const t=formatTime(n); const mg=document.createElement('div'); mg.className=`message-group ${type}`;
             mg.innerHTML=`<div class="message-content"><div class="message-text">${text.replace(/\n/g,'<br>')}</div><div class="message-meta"><span class="message-time">${t}</span>${type==='outgoing'?'<span class="message-status status-sent"><i class="fas fa-check"></i></span>':''}</div></div>`;
             c.appendChild(mg); if(!isHistory){scrollToBottom('chatContent'); if(type==='outgoing'){const s=mg.querySelector('.message-status'); setTimeout(()=>{if(s){s.classList.replace('status-sent','status-delivered');s.innerHTML='<i class="fas fa-check-double"></i>';}},800); setTimeout(()=>{if(s){s.classList.replace('status-delivered','status-read');}},2500);}}
         }
        function addSystemMessage(text) { /* ... codice come prima ... */
            const c=document.getElementById('chatContent'); if(!c) return; const m=`<div class="message-group system"><div class="message-content"><div class="message-text">${text}</div></div></div>`; c.insertAdjacentHTML('beforeend',m); if(!text.toLowerCase().includes('caricamento')) scrollToBottom('chatContent');
        }
        function showTypingIndicator() { /* ... codice come prima ... */
            const c=document.getElementById('chatContent'); if(!c||document.getElementById('typingIndicator')) return; const t=`<div class="message-group incoming typing-indicator" id="typingIndicator"><div class="message-content"><div class="typing-dots"><div class="typing-dot"></div><div class="typing-dot"></div><div class="typing-dot"></div></div></div></div>`; c.insertAdjacentHTML('beforeend',t); scrollToBottom('chatContent');
        }
        function hideTypingIndicator() { /* ... codice come prima ... */
            const t=document.getElementById('typingIndicator'); if(t) t.remove();
        }
        function sendChatMessage() { /* Modificato per usare variabili corrette */
            if (!activeChatUserId || !socket || !socket.connected) { showToast('error', 'Invio Fallito', 'Nessuna chat attiva o connessione persa.'); return; }
            const chatInput = document.getElementById('chatInput'); const message = chatInput.value.trim(); if (!message) return;
            const timestamp = new Date().toISOString(); const client = clients.find(c => c.id === activeChatUserId); const roomId = client?.roomId || `support_${activeChatUserId}`;
            addMessageToChat('outgoing', message, timestamp);
             console.log(`[Capo] Invio messaggio a ${roomId}:`, {sender:operatorId,senderName:operatorName,content:message,timestamp:timestamp,roomId:roomId});
            socket.emit('message', { sender: operatorId, senderName: operatorName, content: message, timestamp: timestamp, roomId: roomId });
            chatInput.value = ''; chatInput.style.height = 'auto'; chatInput.focus(); updateChatListItem(activeChatUserId, message); sendTypingStatus(false);
        }
        function updateChatListItem(userId, message) { /* ... codice come prima ... */
             const clientIndex = clients.findIndex(c => c.id === userId); if (clientIndex !== -1) { clients[clientIndex].lastMessage = { text: message, timestamp: new Date().toISOString() }; const client = clients.splice(clientIndex, 1)[0]; clients.unshift(client); updateClientListUI(); }
         }
        function sendTypingStatus(isTyping) { /* ... */ if(socket&&socket.connected&&activeChatUserId){clearTimeout(typingTimeout);const client=clients.find(c=>c.id===activeChatUserId);const roomId=client?.roomId||`support_${activeChatUserId}`;socket.emit('typing',{userId:operatorId,username:operatorName,isTyping:isTyping,roomId:roomId});if(isTyping){typingTimeout=setTimeout(()=>sendTypingStatus(false),2000);}} }

        // --- GESTIONE SESSIONE/LOGIN (invariato) ---
        function checkSessionStatusWithoutRedirect() { /* ... codice come prima ... */
             console.log("Verifico sessione..."); fetch('/auth-status').then(response => response.ok ? response.json() : Promise.reject(new Error(`HTTP ${response.status}`))).then(data => { console.log("Stato Auth:", data); const isAuthenticated = data.isAuthenticated === true || !!data.passportUser; const userIsCapo = data.passportUser?.tipo === 'capo'; if (!isAuthenticated || !userIsCapo) { console.error("Utente non autenticato o non Capo."); showAuthAlert("Accesso Negato", "Login come Capo richiesto.", true); disableChatFunctionality(); } else { console.log("Autenticazione Capo OK."); const user = data.passportUser; const userNameEl = document.querySelector('.user-profile .user-name'); const userAvatarEl = document.querySelector('.user-profile .user-avatar'); if (userNameEl && user.username) userNameEl.textContent = user.username; if (userAvatarEl && user.username) userAvatarEl.src = getAvatarUrl(user.username, 32); } }).catch(error => { console.error("Errore verifica sessione:", error); showAuthAlert("Errore Tecnico", `Impossibile verificare sessione: ${error.message}.`, true); disableChatFunctionality(); });
         }
        function disableChatFunctionality() { /* ... codice come prima ... */
             const ci=document.getElementById('chatInput'); const cs=document.getElementById('chatSend'); const ct=document.querySelectorAll('.chat-tool'); const cl=document.getElementById('chatList'); const da=document.getElementById('deleteAllChatsBtn'); if(ci)ci.disabled=true; if(cs)cs.disabled=true; ct.forEach(t=>t.disabled=true); if(da)da.disabled=true; if(cl)cl.innerHTML='<li class="chat-item"><div class="chat-item-content"><div class="chat-name" style="color:var(--text-light);font-style:italic;">Login come Capo richiesto</div></div></li>'; const cp=document.getElementById('chatPlaceholder'); const cc=document.getElementById('chatContent'); const cf=document.getElementById('chatFooter'); if(cp){cp.innerHTML=`<div class="placeholder-icon"><i class="fas fa-lock"></i></div><h3 class="placeholder-title">Accesso Negato</h3><p class="placeholder-text">Login come Capo richiesto.</p>`; cp.style.display='flex';} if(cc)cc.style.display='none'; if(cf)cf.style.display='none'; if(socket&&socket.connected)socket.disconnect();
         }
        function handleLogout(e) { /* ... codice come prima ... */
            e.preventDefault(); const loadingOverlay = document.createElement('div'); loadingOverlay.style.cssText = 'position:fixed;top:0;left:0;width:100%;height:100%;background:rgba(255,255,255,0.8);display:flex;flex-direction:column;justify-content:center;align-items:center;z-index:2000;backdrop-filter:blur(5px);'; const spinnerContainer = document.createElement('div'); spinnerContainer.style.cssText = 'width:60px;height:60px;position:relative;'; const spinner = document.createElement('div'); spinner.style.cssText = 'border:4px solid rgba(0,0,0,0.1);border-top-color:var(--primary);border-radius:50%;width:100%;height:100%;animation:spin 1s linear infinite;'; const style = document.createElement('style'); style.textContent = `@keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }`; document.head.appendChild(style); spinnerContainer.appendChild(spinner); const loadingText = document.createElement('p'); loadingText.textContent = 'Logout in corso...'; loadingText.style.cssText = 'margin-top:20px;color:var(--primary);font-weight:500;'; loadingOverlay.appendChild(spinnerContainer); loadingOverlay.appendChild(loadingText); document.body.appendChild(loadingOverlay); fetch('/logout', { method: 'POST' }).then(response => response.ok ? response.json() : Promise.reject(new Error('Logout failed'))).then(() => { loadingText.textContent = 'Reindirizzamento...'; setTimeout(() => window.location.href = '/login', 800); }).catch(error => { console.error('Logout error:', error); loadingText.textContent = 'Errore Logout.'; setTimeout(() => loadingOverlay.remove(), 2000); });
         }

        // --- Caricamento iniziale richieste ---
        function loadSupportRequests() { /* ... codice come prima ... */
            console.log("Carico richieste supporto..."); fetch('/api/chat/rooms').then(r=>r.ok?r.json():Promise.reject(new Error(`HTTP ${r.status}`))).then(d=>{console.log("Stanze ricevute:",d);if(d.rooms&&d.rooms.length>0){clients=d.rooms.map(r=>({id:r.user_id||r.room_id.replace('support_',''),name:r.sender_name||`Utente ${r.user_id?r.user_id.substring(r.user_id.length-4):'N/D'}`,roomId:r.room_id,online:true,unreadCount:0,lastMessage:{text:r.last_message||'...',timestamp:new Date().toISOString()}}));}else{clients=[];console.log("Nessuna chat attiva.");} updateClientListUI();}).catch(e=>{console.error('Errore caricamento stanze:',e);showToast('error','Errore Chat',`Impossibile caricare: ${e.message}`);const cl=document.getElementById('chatList');if(cl)cl.innerHTML='<li class="chat-item"><div class="chat-item-content" style="color:var(--accent-red);">Errore caricamento chat</div></li>';});
        }
    </script>
</body>
</html>
```

---

**File: `chat.hbs` (Completo e Aggiornato)**

```html
<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{pageTitle}} - YourBite</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <script src="/socket.io/socket.io.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <style>
        /* === Stili CSS come nella versione precedente, mantenuti invariati === */
        :root { /* ... Variabili CSS ... */
             --primary: #7764E4; --primary-light: #9684FF; --primary-dark: #5B4DB8; --secondary: #FF7D56; --secondary-light: #FF9C7D; --accent: #FFD166; --accent-green: #2CD889; --accent-red: #FF6B6B; --accent-blue: #5FAAFF; --dark: #2D2A4A; --dark-blue: #212040; --medium-dark: #403D72; --light: #FFFFFF; --gray: #F8F9FD; --gray-light: #FAFBFF; --gray-dark: #E9ECFD; --text: #2D2A4A; --text-light: #6B7280; --shadow: 0 10px 30px rgba(0, 0, 0, 0.08); --shadow-lg: 0 20px 40px rgba(0, 0, 0, 0.12); --shadow-colored: 0 10px 25px rgba(119, 100, 228, 0.2); --radius-sm: 12px; --radius: 16px; --radius-lg: 24px; --radius-full: 9999px; --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1); --transition-spring: all 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55);
         }
        * { margin: 0; padding: 0; box-sizing: border-box; font-family: 'Poppins', 'Arial', sans-serif; scroll-behavior: smooth; }
        body { background-color: var(--gray); color: var(--text); min-height: 100vh; display: flex; flex-direction: column; overflow: hidden; }
        .background-decoration { position: absolute; z-index: -1; pointer-events: none; }
        .decoration-1 { top: -150px; right: -150px; width: 500px; height: 500px; background: radial-gradient(circle, rgba(119, 100, 228, 0.1), transparent 60%); border-radius: 50%; }
        .decoration-2 { bottom: -100px; left: -100px; width: 400px; height: 400px; background: radial-gradient(circle, rgba(255, 125, 86, 0.08), transparent 60%); border-radius: 50%; }
        .decoration-3 { top: 50%; right: 10%; width: 60px; height: 60px; background: radial-gradient(circle, rgba(255, 209, 102, 0.2), transparent 60%); border-radius: 50%; animation: floatAnimation 8s infinite alternate ease-in-out; }
        .decoration-4 { top: 20%; left: 5%; width: 80px; height: 80px; background: radial-gradient(circle, rgba(44, 216, 137, 0.1), transparent 60%); border-radius: 50%; animation: floatAnimation 12s infinite alternate-reverse ease-in-out; }
        @keyframes floatAnimation { 0% { transform: translate(0, 0); } 100% { transform: translate(20px, -20px); } }
        .app-container { display: flex; height: 100vh; max-width: 1800px; margin: 0 auto; padding: 20px; gap: 20px; }
        .sidebar { width: 280px; background: linear-gradient(135deg, var(--primary), var(--primary-dark)); border-radius: var(--radius); padding: 25px; display: flex; flex-direction: column; box-shadow: var(--shadow-colored); flex-shrink: 0; overflow: hidden; position: relative; }
        .sidebar-overlay { position: absolute; top: 0; left: 0; width: 100%; height: 100%; background-image: url("data:image/svg+xml,%3Csvg width='100' height='100' viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M11 18c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm48 25c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm-43-7c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm63 31c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM34 90c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm56-76c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM12 86c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm28-65c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm23-11c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-6 60c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm29 22c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zM32 63c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm57-13c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-9-21c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM60 91c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM35 41c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM12 60c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2z' fill='rgba(255,255,255,0.05)' fill-opacity='0.05' fill-rule='evenodd'/%3E%3C/svg%3E"); z-index: 0; }
        .logo-section { display: flex; align-items: center; gap: 15px; margin-bottom: 25px; z-index: 1; }
        .logo { width: 42px; height: 42px; background-color: var(--light); border-radius: var(--radius-sm); padding: 8px; display: flex; align-items: center; justify-content: center; box-shadow: 0 4px 10px rgba(0, 0, 0, 0.15); }
        .logo img { max-width: 100%; max-height: 100%; }
        .app-name { color: var(--light); font-weight: 700; font-size: 24px; letter-spacing: 0.5px; }
        .menu-section { margin-top: 20px; z-index: 1; }
        .menu-label { color: rgba(255, 255, 255, 0.7); font-size: 12px; font-weight: 500; text-transform: uppercase; letter-spacing: 1px; margin-bottom: 10px; }
        .menu-list { list-style: none; display: flex; flex-direction: column; gap: 10px; }
        .menu-item { border-radius: var(--radius-sm); transition: var(--transition); overflow: hidden; }
        .menu-link { display: flex; align-items: center; gap: 15px; padding: 12px 15px; color: rgba(255, 255, 255, 0.8); text-decoration: none; font-weight: 500; font-size: 15px; transition: var(--transition); border-radius: var(--radius-sm); }
        .menu-link:hover { background-color: rgba(255, 255, 255, 0.1); color: white; }
        .menu-link.active { background-color: rgba(255, 255, 255, 0.2); color: white; font-weight: 600; box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1); }
        .menu-icon { font-size: 18px; width: 24px; height: 24px; display: flex; align-items: center; justify-content: center; }
        .profile-section { margin-top: auto; padding-top: 20px; border-top: 1px solid rgba(255, 255, 255, 0.1); display: flex; align-items: center; gap: 15px; z-index: 1; }
        .profile-avatar { width: 42px; height: 42px; border-radius: var(--radius-full); object-fit: cover; border: 2px solid white; box-shadow: 0 4px 10px rgba(0, 0, 0, 0.15); background-color: var(--gray-light); }
        .profile-info { flex-grow: 1; }
        .profile-name { color: white; font-weight: 600; font-size: 15px; margin-bottom: 2px; }
        .profile-role { color: rgba(255, 255, 255, 0.7); font-size: 12px; }
        .profile-menu { color: rgba(255, 255, 255, 0.8); cursor: pointer; padding: 5px; border-radius: var(--radius-full); transition: var(--transition); }
        .profile-menu:hover { background-color: rgba(255, 255, 255, 0.1); color: white; }
        .chat-area { flex-grow: 1; display: flex; flex-direction: column; background: var(--light); border-radius: var(--radius); box-shadow: var(--shadow); overflow: hidden; }
        .chat-header { padding: 20px; background: var(--light); border-bottom: 1px solid var(--gray-dark); display: flex; align-items: center; justify-content: space-between; position: relative; z-index: 10; box-shadow: 0 2px 10px rgba(0, 0, 0, 0.02); }
        .chat-header-info { display: flex; align-items: center; gap: 15px; }
        .operator-avatar { width: 50px; height: 50px; border-radius: var(--radius-full); object-fit: cover; border: 2px solid var(--primary-light); box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05); }
        .operator-info { display: flex; flex-direction: column; }
        .operator-name { font-size: 18px; font-weight: 600; color: var(--dark); margin-bottom: 3px; }
        .operator-status { display: flex; align-items: center; gap: 5px; font-size: 14px; color: var(--text-light); }
        .status-indicator { width: 8px; height: 8px; border-radius: 50%; background-color: var(--accent-green); position: relative; }
        .status-indicator::after { content: ''; position: absolute; width: 100%; height: 100%; border-radius: 50%; background-color: var(--accent-green); opacity: 0.5; animation: pulse 2s infinite; }
        @keyframes pulse { 0% { transform: scale(1); opacity: 0.5; } 70% { transform: scale(1.5); opacity: 0; } 100% { transform: scale(1.5); opacity: 0; } }
        .chat-header-actions { display: flex; align-items: center; gap: 10px; }
        .header-action-btn { width: 36px; height: 36px; border-radius: var(--radius-full); background-color: var(--gray-light); color: var(--primary); border: none; display: flex; align-items: center; justify-content: center; cursor: pointer; transition: var(--transition); box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05); }
        .header-action-btn:hover { background-color: var(--primary); color: white; box-shadow: 0 2px 10px rgba(119, 100, 228, 0.3); transform: translateY(-2px); }
        .chat-body { flex-grow: 1; padding: 20px; overflow-y: auto; background-color: var(--gray-light); background-image: url("data:image/svg+xml,%3Csvg width='100' height='100' viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M11 18c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm48 25c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm-43-7c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm63 31c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM34 90c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm56-76c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM12 86c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm28-65c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm23-11c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-6 60c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm29 22c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zM32 63c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm57-13c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-9-21c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM60 91c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM35 41c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM12 60c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2z' fill='%23f0f0f5' fill-opacity='0.3' fill-rule='evenodd'/%3E%3C/svg%3E"); }
        .day-divider { display: flex; align-items: center; gap: 15px; margin: 20px 0; color: var(--text-light); font-size: 13px; text-align: center; }
        .day-divider::before, .day-divider::after { content: ''; flex-grow: 1; height: 1px; background-color: var(--gray-dark); }
        .day-divider-text { background: var(--gray-light); padding: 5px 15px; border-radius: var(--radius-full); border: 1px solid var(--gray-dark); box-shadow: 0 2px 5px rgba(0, 0, 0, 0.02); font-weight: 500; }
        .message-container { display: flex; flex-direction: column; gap: 10px; margin-bottom: 10px; }
        .message-group { display: flex; flex-direction: column; max-width: 75%; }
        .message-group.user { align-self: flex-end; } .message-group.operator { align-self: flex-start; } .message-group.system { align-self: center; max-width: 90%; }
        .message-content { padding: 12px 15px; border-radius: var(--radius-sm); box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05); margin-bottom: 2px; position: relative; animation: fadeIn 0.3s ease-in-out; }
        @keyframes fadeIn { from { opacity: 0; transform: translateY(10px); } to { opacity: 1; transform: translateY(0); } }
        .user .message-content { background: linear-gradient(135deg, var(--primary), var(--primary-dark)); color: white; border-top-right-radius: 2px; }
        .user .message-content::before { content: ''; position: absolute; right: -8px; top: 0; width: 0; height: 0; border-left: 10px solid var(--primary-dark); border-right: 0; border-bottom: 10px solid transparent; }
        .operator .message-content { background: white; color: var(--text); border-top-left-radius: 2px; box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05); }
        .operator .message-content::before { content: ''; position: absolute; left: -8px; top: 0; width: 0; height: 0; border-right: 10px solid white; border-left: 0; border-bottom: 10px solid transparent; }
        .system .message-content { background: rgba(0, 0, 0, 0.05); color: var(--text-light); font-style: italic; text-align: center; font-size: 14px; box-shadow: none; }
        .message-text { line-height: 1.5; margin-bottom: 5px; word-break: break-word; }
        .message-meta { display: flex; justify-content: flex-end; align-items: center; font-size: 12px; margin-top: 5px; }
        .user .message-meta { color: rgba(255, 255, 255, 0.7); } .operator .message-meta { color: var(--text-light); }
        .message-time { font-weight: 500; margin-right: 5px; }
        .message-status i { font-size: 12px; margin-left: 3px; }
        .status-sent i { color: rgba(255, 255, 255, 0.6); } .status-delivered i { color: rgba(255, 255, 255, 0.8); } .status-read i { color: var(--accent); }
        .typing-indicator { display: flex; align-items: center; gap: 10px; padding: 10px 15px; background: white; border-radius: var(--radius-sm); box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05); max-width: 200px; position: relative; animation: fadeIn 0.3s ease-in-out; align-self: flex-start; margin-bottom: 10px; }
        .typing-indicator::before { content: ''; position: absolute; left: -8px; top: 0; width: 0; height: 0; border-right: 10px solid white; border-left: 0; border-bottom: 10px solid transparent; }
        .typing-text { font-size: 14px; color: var(--text-light); }
        .typing-dots { display: flex; align-items: center; gap: 4px; }
        .typing-dot { width: 8px; height: 8px; border-radius: 50%; background: var(--primary); opacity: 0.6; animation: typingAnimation 1.4s infinite; }
        .typing-dot:nth-child(2) { animation-delay: 0.2s; } .typing-dot:nth-child(3) { animation-delay: 0.4s; }
        @keyframes typingAnimation { 0%, 60%, 100% { transform: translateY(0); opacity: 0.6; } 30% { transform: translateY(-4px); opacity: 1; } }
        .chat-footer { padding: 15px 20px; background: var(--light); border-top: 1px solid var(--gray-dark); display: flex; align-items: flex-end; gap: 10px; }
        .message-input-container { display: flex; align-items: flex-end; flex-grow: 1; background: var(--gray-light); border-radius: var(--radius-full); transition: var(--transition); padding: 10px 20px; border: 1px solid var(--gray-dark); }
        .message-input-container:focus-within { border-color: var(--primary); box-shadow: 0 0 0 3px rgba(119, 100, 228, 0.1); background: white; }
        .message-input { flex-grow: 1; border: none; background: transparent; min-height: 24px; max-height: 120px; resize: none; padding: 0; font-size: 15px; line-height: 1.5; outline: none; color: var(--text); margin-right: 10px; }
        .message-input::placeholder { color: var(--text-light); }
        .input-actions { display: flex; align-items: center; gap: 10px; }
        .input-action-btn { background: transparent; border: none; color: var(--text-light); font-size: 18px; padding: 5px; cursor: pointer; border-radius: var(--radius-full); transition: var(--transition); display: flex; align-items: center; justify-content: center; }
        .input-action-btn:hover { color: var(--primary); background: rgba(119, 100, 228, 0.1); transform: translateY(-2px); }
        .send-btn { width: 45px; height: 45px; border-radius: var(--radius-full); background: linear-gradient(135deg, var(--primary), var(--primary-dark)); color: white; border: none; display: flex; align-items: center; justify-content: center; cursor: pointer; transition: var(--transition-spring); box-shadow: var(--shadow-colored); }
        .send-btn:hover { transform: translateY(-3px) scale(1.05); box-shadow: 0 8px 20px rgba(119, 100, 228, 0.3); }
        .send-btn:active { transform: scale(0.95); }
        .send-btn i { font-size: 18px; transform: rotate(45deg); }
        .emoji-picker { position: absolute; bottom: 80px; right: 20px; background: white; border-radius: var(--radius); box-shadow: var(--shadow-lg); width: 300px; padding: 15px; display: none; z-index: 100; }
        .emoji-picker.show { display: block; animation: fadeIn 0.3s ease-in-out; }
        .emoji-tabs { display: flex; gap: 10px; margin-bottom: 10px; }
        .emoji-tab { flex-grow: 1; text-align: center; padding: 5px; font-size: 18px; border-radius: var(--radius-sm); cursor: pointer; transition: var(--transition); }
        .emoji-tab:hover { background: var(--gray-light); } .emoji-tab.active { background: var(--gray-light); color: var(--primary); }
        .emoji-content { height: 200px; overflow-y: auto; padding: 5px; }
        .emoji-group { display: grid; grid-template-columns: repeat(7, 1fr); gap: 10px; }
        .emoji-item { width: 30px; height: 30px; display: flex; align-items: center; justify-content: center; cursor: pointer; font-size: 20px; border-radius: var(--radius-sm); transition: var(--transition); }
        .emoji-item:hover { background: var(--gray-light); transform: scale(1.2); }
        .connection-status { position: fixed; top: 10px; left: 50%; transform: translateX(-50%); background-color: var(--accent-red); color: white; padding: 8px 16px; border-radius: var(--radius-full); font-size: 14px; font-weight: 500; box-shadow: var(--shadow); display: flex; align-items: center; gap: 8px; opacity: 0; pointer-events: none; transition: var(--transition); z-index: 1000; }
        .connection-status.show { opacity: 1; pointer-events: auto; } .connection-status.connected { background-color: var(--accent-green); opacity: 1; animation: fadeOut 3s forwards 2s; }
        @keyframes fadeOut { to { opacity: 0; pointer-events: none; } }
        .connection-icon { font-size: 16px; animation: blink 1s infinite; }
        @keyframes blink { 0%, 100% { opacity: 1; } 50% { opacity: 0.5; } }
        /* Responsive */
        @media (max-width: 992px) { .app-container { padding: 10px; gap: 10px; } .sidebar { width: 240px; padding: 20px; } }
        @media (max-width: 768px) { .app-container { flex-direction: column; padding: 0; height: 100vh; overflow: hidden; } .sidebar { width: 100%; padding: 15px; border-radius: 0; flex-direction: row; height: auto; align-items: center; } .logo-section { margin-bottom: 0; } .app-name { font-size: 20px; } .menu-section { display: none; } .profile-section { margin-top: 0; margin-left: auto; border-top: none; padding-top: 0; } .chat-area { border-radius: 0; flex-grow: 1; max-height: calc(100vh - 76px); } .chat-header { padding: 15px; } .operator-avatar { width: 40px; height: 40px; } .operator-name { font-size: 16px; } .chat-body { padding: 15px; } .message-group { max-width: 90%; } .message-content { padding: 12px; } }
        @media (max-width: 480px) { .profile-name, .profile-role { display: none; } .emoji-picker { width: calc(100% - 40px); left: 20px; right: 20px; } }
        /* Auth Alert */
        .auth-alert { position: fixed; top: 80px; /* Sotto l'header */ right: 20px; background-color: #f8d7da; border: 1px solid #f5c6cb; color: #721c24; padding: 15px 20px; border-radius: var(--radius-sm); box-shadow: var(--shadow); z-index: 9999; max-width: 400px; }
        .auth-alert h4 { margin-top: 0; margin-bottom: 10px; font-size: 1rem; font-weight: 600; }
        .auth-alert p { margin-bottom: 15px; margin-top: 0; font-size: 0.9rem; }
        .auth-alert button { background: #dc3545; color: white; border: none; padding: 8px 15px; border-radius: var(--radius-sm); cursor: pointer; transition: background-color 0.2s; }
        .auth-alert button:hover { background: #c82333; }
    </style>
</head>
<body>
    <!-- Connection status indicator -->
    <div class="connection-status" id="connectionStatus">
        <i class="fas fa-sync-alt connection-icon"></i>
        <span id="connectionText">Connessione in corso...</span>
    </div>

    <!-- Background decorations -->
    <div class="background-decoration decoration-1"></div>
    <div class="background-decoration decoration-2"></div>
    <div class="background-decoration decoration-3"></div>
    <div class="background-decoration decoration-4"></div>

    <!-- App container -->
    <div class="app-container">
        <!-- Sidebar -->
        <div class="sidebar">
            <div class="sidebar-overlay"></div>
            <div class="logo-section">
                <div class="logo">
                    <img src="/img/logo.png" alt="YourBite Logo"> <!-- Corretto percorso -->
                </div>
                <div class="app-name">YourBite</div>
            </div>
            <div class="menu-section">
                <div class="menu-label">Menu</div>
                <ul class="menu-list">
                    <li class="menu-item"> <a href="/homepage_cliente" class="menu-link"><div class="menu-icon"><i class="fas fa-home"></i></div> <span>Homepage</span></a> </li>
                    <li class="menu-item"> <a href="#" class="menu-link"><div class="menu-icon"><i class="fas fa-shopping-bag"></i></div> <span>I miei Ordini</span></a> </li>
                    <li class="menu-item"> <a href="#" class="menu-link"><div class="menu-icon"><i class="fas fa-heart"></i></div> <span>Preferiti</span></a> </li>
                    <li class="menu-item"> <a href="/chat" class="menu-link active"><div class="menu-icon"><i class="fas fa-comment-dots"></i></div> <span>Assistenza</span></a> </li>
                </ul>
                <div class="menu-label">Profilo</div>
                <ul class="menu-list">
                    <li class="menu-item"> <a href="#" class="menu-link"><div class="menu-icon"><i class="fas fa-user"></i></div> <span>Il mio Profilo</span></a> </li>
                    <li class="menu-item"> <a href="#" class="menu-link"><div class="menu-icon"><i class="fas fa-cog"></i></div> <span>Impostazioni</span></a> </li>
                    <li class="menu-item"> <a href="#" class="menu-link" id="logoutBtn"><div class="menu-icon"><i class="fas fa-sign-out-alt"></i></div> <span>Logout</span></a> </li>
                </ul>
            </div>
            <div class="profile-section">
                <img src="https://ui-avatars.com/api/?name=C&background=random&color=fff&size=42" alt="Profile" class="profile-avatar" id="profileAvatarSidebar">
                <div class="profile-info">
                    <div class="profile-name" id="usernameSidebar">Cliente</div>
                    <div class="profile-role">Account Cliente</div>
                </div>
            </div>
        </div>

        <!-- Chat area -->
        <div class="chat-area">
            <div class="chat-header">
                <div class="chat-header-info">
                    <img src="https://ui-avatars.com/api/?name=Assistenza&background=random&color=fff&size=50" alt="Operator" class="operator-avatar">
                    <div class="operator-info">
                        <div class="operator-name">Assistenza YourBite</div>
                        <div class="operator-status">
                            <div class="status-indicator"></div>
                            <span id="operatorStatus">Online</span>
                        </div>
                    </div>
                </div>
                <div class="chat-header-actions">
                    <button class="header-action-btn" title="Cerca"> <i class="fas fa-search"></i> </button>
                    <button class="header-action-btn" title="Chiama"> <i class="fas fa-phone-alt"></i> </button>
                    <button class="header-action-btn" title="Altro"> <i class="fas fa-ellipsis-v"></i> </button>
                </div>
            </div>
            <div class="chat-body" id="chatBody">
                <div class="day-divider"> <span class="day-divider-text" id="todayDate">Oggi</span> </div>
                <div class="message-container" id="messagesContainer">
                     <div class="message-group system"> <div class="message-content"> <div class="message-text">Benvenuto! Come possiamo aiutarti?</div> </div> </div>
                </div>
            </div>
            <div class="chat-footer">
                <div class="message-input-container">
                    <textarea class="message-input" id="messageInput" placeholder="Scrivi un messaggio..." rows="1"></textarea>
                    <div class="input-actions">
                        <button class="input-action-btn" title="Emoji" id="emojiBtn"> <i class="far fa-smile"></i> </button>
                        <button class="input-action-btn" title="Allegati" id="attachBtn"> <i class="fas fa-paperclip"></i> </button>
                    </div>
                </div>
                <button class="send-btn" id="sendBtn"> <i class="fas fa-paper-plane"></i> </button>
            </div>
            <div class="emoji-picker" id="emojiPicker">
                <div class="emoji-tabs"> <div class="emoji-tab active"><i class="far fa-smile"></i></div> <div class="emoji-tab"><i class="far fa-hand-peace"></i></div> <div class="emoji-tab"><i class="fas fa-hamburger"></i></div> <div class="emoji-tab"><i class="fas fa-car"></i></div> <div class="emoji-tab"><i class="fas fa-heart"></i></div> </div>
                <div class="emoji-content"> <div class="emoji-group"> <div class="emoji-item">😊</div> <div class="emoji-item">😂</div> <div class="emoji-item">😍</div> <div class="emoji-item">🙂</div> <div class="emoji-item">😎</div> <div class="emoji-item">😋</div> <div class="emoji-item">🤔</div> <div class="emoji-item">😐</div> <div class="emoji-item">😴</div> <div class="emoji-item">😆</div> <div class="emoji-item">🙄</div> <div class="emoji-item">😡</div> <div class="emoji-item">👍</div> <div class="emoji-item">👋</div> <div class="emoji-item">👏</div> <div class="emoji-item">🙏</div> <div class="emoji-item">❤️</div> <div class="emoji-item">✨</div> <div class="emoji-item">🔥</div> <div class="emoji-item">💯</div> <div class="emoji-item">🎉</div> </div> </div>
            </div>
        </div>
    </div>

    <!-- Toast Notifications Container -->
    <div class="toast-container" id="toastContainer"></div>

    <!-- Includi i dati utente passati dal server -->
    <script>
        const currentUser = {{{ json user }}};
        console.log("Dati utente ricevuti dal server (chat.hbs):", currentUser);
    </script>

</body>
</html>