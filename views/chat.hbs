<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat Assistenza - YourBite</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <style>
        :root {
            /* Palette colori moderna e vibrante */
            --primary: #7764E4;
            --primary-light: #9684FF;
            --primary-dark: #5B4DB8;
            --secondary: #FF7D56;
            --secondary-light: #FF9C7D;
            --accent: #FFD166;
            --accent-green: #2CD889;
            --accent-red: #FF6B6B;
            --accent-blue: #5FAAFF;
            --dark: #2D2A4A;
            --dark-blue: #212040;
            --medium-dark: #403D72;
            --light: #FFFFFF;
            --gray: #F8F9FD;
            --gray-light: #FAFBFF;
            --gray-dark: #E9ECFD;
            --text: #2D2A4A;
            --text-light: #6B7280;
            
            /* Effetti e animazioni */
            --shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            --shadow-lg: 0 20px 40px rgba(0, 0, 0, 0.15);
            --shadow-colored: 0 10px 25px rgba(119, 100, 228, 0.25);
            --shadow-success: 0 8px 25px rgba(44, 216, 137, 0.25);
            --shadow-warning: 0 8px 25px rgba(255, 209, 102, 0.25);
            --shadow-danger: 0 8px 25px rgba(255, 107, 107, 0.25);
            --radius-sm: 12px;
            --radius: 16px;
            --radius-lg: 24px;
            --radius-xl: 30px;
            --radius-full: 9999px;
            --transition-fast: all 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);
            --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
            --transition-spring: all 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Poppins', 'Arial', sans-serif;
            scroll-behavior: smooth;
        }

        body {
            background-color: var(--gray);
            color: var(--text);
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }
        
        /* Background decorations */
        .background-decoration {
            position: absolute;
            z-index: -1;
            pointer-events: none;
        }
        
        .decoration-1 {
            top: -150px;
            right: -150px;
            width: 500px;
            height: 500px;
            background: radial-gradient(circle, rgba(119, 100, 228, 0.1), transparent 60%);
            border-radius: 50%;
        }
        
        .decoration-2 {
            bottom: -100px;
            left: -100px;
            width: 400px;
            height: 400px;
            background: radial-gradient(circle, rgba(255, 125, 86, 0.08), transparent 60%);
            border-radius: 50%;
        }
        
        .decoration-3 {
            top: 50%;
            right: 10%;
            width: 60px;
            height: 60px;
            background: radial-gradient(circle, rgba(255, 209, 102, 0.2), transparent 60%);
            border-radius: 50%;
            animation: floatAnimation 8s infinite alternate ease-in-out;
        }
        
        .decoration-4 {
            top: 20%;
            left: 5%;
            width: 80px;
            height: 80px;
            background: radial-gradient(circle, rgba(44, 216, 137, 0.1), transparent 60%);
            border-radius: 50%;
            animation: floatAnimation 12s infinite alternate-reverse ease-in-out;
        }
        
        @keyframes floatAnimation {
            0% {
                transform: translate(0, 0);
            }
            100% {
                transform: translate(20px, -20px);
            }
        }

        /* Layout structure */
        .app-container {
            display: flex;
            height: 100vh;
            max-width: 1800px;
            margin: 0 auto;
            padding: 20px;
            gap: 20px;
        }
        
        .sidebar {
            width: 280px;
            background: linear-gradient(135deg, var(--primary), var(--primary-dark));
            border-radius: var(--radius);
            padding: 25px;
            display: flex;
            flex-direction: column;
            box-shadow: var(--shadow-colored);
            flex-shrink: 0;
            overflow: hidden;
            position: relative;
        }
        
        .sidebar-overlay {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-image: url("data:image/svg+xml,%3Csvg width='100' height='100' viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M11 18c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm48 25c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm-43-7c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm63 31c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM34 90c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm56-76c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM12 86c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm28-65c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm23-11c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-6 60c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm29 22c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zM32 63c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm57-13c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-9-21c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM60 91c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM35 41c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM12 60c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2z' fill='rgba(255,255,255,0.05)' fill-opacity='0.05' fill-rule='evenodd'/%3E%3C/svg%3E");
            z-index: 0;
        }
        
        .logo-section {
            display: flex;
            align-items: center;
            gap: 15px;
            margin-bottom: 25px;
            z-index: 1;
        }
        
        .logo {
            width: 42px;
            height: 42px;
            background-color: var(--light);
            border-radius: var(--radius-sm);
            padding: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.15);
        }
        
        .logo img {
            max-width: 100%;
            max-height: 100%;
        }
        
        .app-name {
            color: var(--light);
            font-weight: 700;
            font-size: 24px;
            letter-spacing: 0.5px;
        }
        
        .menu-section {
            margin-top: 20px;
            z-index: 1;
        }
        
        .menu-label {
            color: rgba(255, 255, 255, 0.7);
            font-size: 12px;
            font-weight: 500;
            text-transform: uppercase;
            letter-spacing: 1px;
            margin-bottom: 10px;
        }
        
        .menu-list {
            list-style: none;
            display: flex;
            flex-direction: column;
            gap: 10px;
        }
        
        .menu-item {
            border-radius: var(--radius-sm);
            transition: var(--transition);
            overflow: hidden;
        }
        
        .menu-link {
            display: flex;
            align-items: center;
            gap: 15px;
            padding: 12px 15px;
            color: rgba(255, 255, 255, 0.8);
            text-decoration: none;
            font-weight: 500;
            font-size: 15px;
            transition: var(--transition);
            border-radius: var(--radius-sm);
        }
        
        .menu-link:hover {
            background-color: rgba(255, 255, 255, 0.1);
            color: white;
        }
        
        .menu-link.active {
            background-color: rgba(255, 255, 255, 0.2);
            color: white;
            font-weight: 600;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        }
        
        .menu-icon {
            font-size: 18px;
            width: 24px;
            height: 24px;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .profile-section {
            margin-top: auto;
            padding-top: 20px;
            border-top: 1px solid rgba(255, 255, 255, 0.1);
            display: flex;
            align-items: center;
            gap: 15px;
            z-index: 1;
        }
        
        .profile-avatar {
            width: 42px;
            height: 42px;
            border-radius: var(--radius-full);
            object-fit: cover;
            border: 2px solid white;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.15);
        }
        
        .profile-info {
            flex-grow: 1;
        }
        
        .profile-name {
            color: white;
            font-weight: 600;
            font-size: 15px;
            margin-bottom: 2px;
        }
        
        .profile-role {
            color: rgba(255, 255, 255, 0.7);
            font-size: 12px;
        }
        
        .profile-menu {
            color: rgba(255, 255, 255, 0.8);
            cursor: pointer;
            padding: 5px;
            border-radius: var(--radius-full);
            transition: var(--transition);
        }
        
        .profile-menu:hover {
            background-color: rgba(255, 255, 255, 0.1);
            color: white;
        }
        
        /* Chat area */
        .chat-area {
            flex-grow: 1;
            display: flex;
            flex-direction: column;
            background: var(--light);
            border-radius: var(--radius);
            box-shadow: var(--shadow);
            overflow: hidden;
        }
        
        .chat-header {
            padding: 20px;
            background: var(--light);
            border-bottom: 1px solid var(--gray-dark);
            display: flex;
            align-items: center;
            justify-content: space-between;
            position: relative;
            z-index: 10;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.02);
        }
        
        .chat-header-info {
            display: flex;
            align-items: center;
            gap: 15px;
        }
        
        .operator-avatar {
            width: 50px;
            height: 50px;
            border-radius: var(--radius-full);
            object-fit: cover;
            border: 2px solid var(--primary-light);
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        }
        
        .operator-info {
            display: flex;
            flex-direction: column;
        }
        
        .operator-name {
            font-size: 18px;
            font-weight: 600;
            color: var(--dark);
            margin-bottom: 3px;
        }
        
        .operator-status {
            display: flex;
            align-items: center;
            gap: 5px;
            font-size: 14px;
            color: var(--text-light);
        }
        
        .status-indicator {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background-color: var(--accent-green);
            position: relative;
        }
        
        .status-indicator::after {
            content: '';
            position: absolute;
            width: 100%;
            height: 100%;
            border-radius: 50%;
            background-color: var(--accent-green);
            opacity: 0.5;
            animation: pulse 2s infinite;
        }
        
        @keyframes pulse {
            0% {
                transform: scale(1);
                opacity: 0.5;
            }
            70% {
                transform: scale(1.5);
                opacity: 0;
            }
            100% {
                transform: scale(1.5);
                opacity: 0;
            }
        }
        
        .chat-header-actions {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .header-action-btn {
            width: 36px;
            height: 36px;
            border-radius: var(--radius-full);
            background-color: var(--gray-light);
            color: var(--primary);
            border: none;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: var(--transition);
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
        }
        
        .header-action-btn:hover {
            background-color: var(--primary);
            color: white;
            box-shadow: 0 2px 10px rgba(119, 100, 228, 0.3);
            transform: translateY(-2px);
        }
        
        .chat-body {
            flex-grow: 1;
            padding: 20px;
            overflow-y: auto;
            background-color: var(--gray-light);
            background-image: url("data:image/svg+xml,%3Csvg width='100' height='100' viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M11 18c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm48 25c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm-43-7c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm63 31c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM34 90c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm56-76c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM12 86c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm28-65c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm23-11c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-6 60c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm29 22c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zM32 63c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm57-13c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-9-21c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM60 91c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM35 41c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM12 60c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2z' fill='%23f0f0f5' fill-opacity='0.3' fill-rule='evenodd'/%3E%3C/svg%3E");
        }
        
        .day-divider {
            display: flex;
            align-items: center;
            gap: 15px;
            margin: 20px 0;
            color: var(--text-light);
            font-size: 13px;
            text-align: center;
        }
        
        .day-divider::before,
        .day-divider::after {
            content: '';
            flex-grow: 1;
            height: 1px;
            background-color: var(--gray-dark);
        }
        
        .day-divider-text {
            background: var(--gray-light);
            padding: 5px 15px;
            border-radius: var(--radius-full);
            border: 1px solid var(--gray-dark);
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.02);
            font-weight: 500;
        }
        
        .message-container {
            display: flex;
            flex-direction: column;
            gap: 20px;
            margin-bottom: 10px;
        }
        
        .message-group {
            display: flex;
            flex-direction: column;
            max-width: 75%;
        }
        
        .message-group.user {
            align-self: flex-end;
        }
        
        .message-group.operator {
            align-self: flex-start;
        }
        
        .message-group.system {
            align-self: center;
            max-width: 90%;
        }
        
        .message-content {
            padding: 15px;
            border-radius: var(--radius-sm);
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
            margin-bottom: 2px;
            position: relative;
            animation: fadeIn 0.3s ease-in-out;
        }
        
        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        .user .message-content {
            background: linear-gradient(135deg, var(--primary), var(--primary-dark));
            color: white;
            border-top-right-radius: 2px;
        }
        
        .user .message-content::before {
            content: '';
            position: absolute;
            right: -8px;
            top: 0;
            width: 0;
            height: 0;
            border-left: 10px solid var(--primary-dark);
            border-right: 0;
            border-bottom: 10px solid transparent;
        }
        
        .operator .message-content {
            background: white;
            color: var(--text);
            border-top-left-radius: 2px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
        }
        
        .operator .message-content::before {
            content: '';
            position: absolute;
            left: -8px;
            top: 0;
            width: 0;
            height: 0;
            border-right: 10px solid white;
            border-left: 0;
            border-bottom: 10px solid transparent;
        }
        
        .system .message-content {
            background: rgba(0, 0, 0, 0.05);
            color: var(--text-light);
            font-style: italic;
            text-align: center;
            font-size: 14px;
            box-shadow: none;
        }
        
        .message-text {
            line-height: 1.5;
            margin-bottom: 5px;
            word-break: break-word;
        }
        
        .message-meta {
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 12px;
            margin-top: 5px;
        }
        
        .user .message-meta {
            color: rgba(255, 255, 255, 0.7);
        }
        
        .operator .message-meta {
            color: var(--text-light);
        }
        
        .message-time {
            font-weight: 500;
        }
        
        .message-status {
            display: flex;
            align-items: center;
        }
        
        .message-status i {
            font-size: 12px;
            margin-left: 3px;
        }
        
        .status-sent i {
            color: rgba(255, 255, 255, 0.6);
        }
        
        .status-delivered i {
            color: rgba(255, 255, 255, 0.8);
        }
        
        .status-read i {
            color: var(--accent);
        }
        
        .typing-indicator {
            display: flex;
            align-items: center;
            gap: 10px;
            padding: 15px;
            background: white;
            border-radius: var(--radius-sm);
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
            max-width: 200px;
            position: relative;
            animation: fadeIn 0.3s ease-in-out;
            align-self: flex-start;
        }
        
        .typing-indicator::before {
            content: '';
            position: absolute;
            left: -8px;
            top: 0;
            width: 0;
            height: 0;
            border-right: 10px solid white;
            border-left: 0;
            border-bottom: 10px solid transparent;
        }
        
        .typing-text {
            font-size: 14px;
            color: var(--text-light);
        }
        
        .typing-dots {
            display: flex;
            align-items: center;
            gap: 4px;
        }
        
        .typing-dot {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background: var(--primary);
            opacity: 0.6;
            animation: typingAnimation 1.4s infinite;
        }
        
        .typing-dot:nth-child(2) {
            animation-delay: 0.2s;
        }
        
        .typing-dot:nth-child(3) {
            animation-delay: 0.4s;
        }
        
        @keyframes typingAnimation {
            0%, 60%, 100% {
                transform: translateY(0);
                opacity: 0.6;
            }
            30% {
                transform: translateY(-4px);
                opacity: 1;
            }
        }
        
        .chat-footer {
            padding: 15px 20px;
            background: var(--light);
            border-top: 1px solid var(--gray-dark);
            display: flex;
            align-items: flex-end;
            gap: 10px;
        }
        
        .message-input-container {
            display: flex;
            align-items: flex-end;
            flex-grow: 1;
            background: var(--gray-light);
            border-radius: var(--radius-full);
            transition: var(--transition);
            padding: 10px 20px;
            border: 1px solid var(--gray-dark);
        }
        
        .message-input-container:focus-within {
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(119, 100, 228, 0.1);
            background: white;
        }
        
        .message-input {
            flex-grow: 1;
            border: none;
            background: transparent;
            min-height: 24px;
            max-height: 120px;
            resize: none;
            padding: 0;
            font-size: 15px;
            line-height: 1.5;
            outline: none;
            color: var(--text);
            margin-right: 10px;
        }
        
        .message-input::placeholder {
            color: var(--text-light);
        }
        
        .input-actions {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .input-action-btn {
            background: transparent;
            border: none;
            color: var(--text-light);
            font-size: 18px;
            padding: 5px;
            cursor: pointer;
            border-radius: var(--radius-full);
            transition: var(--transition);
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .input-action-btn:hover {
            color: var(--primary);
            background: rgba(119, 100, 228, 0.1);
            transform: translateY(-2px);
        }
        
        .send-btn {
            width: 45px;
            height: 45px;
            border-radius: var(--radius-full);
            background: linear-gradient(135deg, var(--primary), var(--primary-dark));
            color: white;
            border: none;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: var(--transition-spring);
            box-shadow: var(--shadow-colored);
        }
        
        .send-btn:hover {
            transform: translateY(-3px) scale(1.05);
            box-shadow: 0 8px 20px rgba(119, 100, 228, 0.3);
        }
        
        .send-btn:active {
            transform: scale(0.95);
        }
        
        .send-btn i {
            font-size: 18px;
            transform: rotate(45deg);
        }
        
        /* Additional features */
        .attachment-preview {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            margin-top: 10px;
        }
        
        .attachment-item {
            position: relative;
            border-radius: var(--radius-sm);
            overflow: hidden;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            width: 80px;
            height: 80px;
        }
        
        .attachment-img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        
        .attachment-remove {
            position: absolute;
            top: 5px;
            right: 5px;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background: rgba(255, 255, 255, 0.8);
            color: var(--accent-red);
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            font-size: 12px;
            transition: var(--transition);
        }
        
        .attachment-remove:hover {
            background: white;
            transform: scale(1.1);
        }
        
        /* Emoji picker */
        .emoji-picker {
            position: absolute;
            bottom: 80px;
            right: 20px;
            background: white;
            border-radius: var(--radius);
            box-shadow: var(--shadow-lg);
            width: 300px;
            padding: 15px;
            display: none;
            z-index: 100;
        }
        
        .emoji-picker.show {
            display: block;
            animation: fadeIn 0.3s ease-in-out;
        }
        
        .emoji-tabs {
            display: flex;
            gap: 10px;
            margin-bottom: 10px;
        }
        
        .emoji-tab {
            flex-grow: 1;
            text-align: center;
            padding: 5px;
            font-size: 18px;
            border-radius: var(--radius-sm);
            cursor: pointer;
            transition: var(--transition);
        }
        
        .emoji-tab:hover {
            background: var(--gray-light);
        }
        
        .emoji-tab.active {
            background: var(--gray-light);
            color: var(--primary);
        }
        
        .emoji-content {
            height: 200px;
            overflow-y: auto;
            padding: 5px;
        }
        
        .emoji-group {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            gap: 10px;
        }
        
        .emoji-item {
            width: 30px;
            height: 30px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            font-size: 20px;
            border-radius: var(--radius-sm);
            transition: var(--transition);
        }
        
        .emoji-item:hover {
            background: var(--gray-light);
            transform: scale(1.2);
        }
        
        /* Connection status */
        .connection-status {
            position: fixed;
            top: 10px;
            left: 50%;
            transform: translateX(-50%);
            background-color: var(--accent-red);
            color: white;
            padding: 8px 16px;
            border-radius: var(--radius-full);
            font-size: 14px;
            font-weight: 500;
            box-shadow: var(--shadow);
            display: flex;
            align-items: center;
            gap: 8px;
            opacity: 0;
            pointer-events: none;
            transition: var(--transition);
            z-index: 1000;
        }
        
        .connection-status.show {
            opacity: 1;
            pointer-events: auto;
        }
        
        .connection-status.connected {
            background-color: var(--accent-green);
            opacity: 1;
            animation: fadeOut 3s forwards 2s;
        }
        
        @keyframes fadeOut {
            to {
                opacity: 0;
                pointer-events: none;
            }
        }
        
        .connection-icon {
            font-size: 16px;
            animation: blink 1s infinite;
        }
        
        @keyframes blink {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }
        
        /* Responsive */
        @media (max-width: 992px) {
            .app-container {
                padding: 10px;
                gap: 10px;
            }
            
            .sidebar {
                width: 240px;
                padding: 20px;
            }
        }
        
        @media (max-width: 768px) {
            .app-container {
                flex-direction: column;
                padding: 0;
                height: 100vh;
                overflow: hidden;
            }
            
            .sidebar {
                width: 100%;
                padding: 15px;
                border-radius: 0;
                flex-direction: row;
                height: auto;
                align-items: center;
            }
            
            .logo-section {
                margin-bottom: 0;
            }
            
            .app-name {
                font-size: 20px;
            }
            
            .menu-section {
                display: none;
            }
            
            .profile-section {
                margin-top: 0;
                margin-left: auto;
                border-top: none;
                padding-top: 0;
            }
            
            .chat-area {
                border-radius: 0;
                flex-grow: 1;
                max-height: calc(100vh - 76px);
            }
            
            .chat-header {
                padding: 15px;
            }
            
            .operator-avatar {
                width: 40px;
                height: 40px;
            }
            
            .operator-name {
                font-size: 16px;
            }
            
            .chat-body {
                padding: 15px;
            }
            
            .message-group {
                max-width: 90%;
            }
            
            .message-content {
                padding: 12px;
            }
        }
        
        @media (max-width: 480px) {
            .profile-name {
                display: none;
            }
            
            .profile-role {
                display: none;
            }
            
            .emoji-picker {
                width: calc(100% - 40px);
                left: 20px;
                right: 20px;
            }
        }
    </style>
</head>
<body>
    <!-- Connection status indicator -->
    <div class="connection-status" id="connectionStatus">
        <i class="fas fa-sync-alt connection-icon"></i>
        <span id="connectionText">Connessione in corso...</span>
    </div>

    <!-- Background decorations -->
    <div class="background-decoration decoration-1"></div>
    <div class="background-decoration decoration-2"></div>
    <div class="background-decoration decoration-3"></div>
    <div class="background-decoration decoration-4"></div>

    <!-- App container -->
    <div class="app-container">
        <!-- Sidebar -->
        <div class="sidebar">
            <div class="sidebar-overlay"></div>
            
            <div class="logo-section">
                <div class="logo">
                    <img src="/img/logo.png" alt="YourBite Logo">
                </div>
                <div class="app-name">YourBite</div>
            </div>
            
            <div class="menu-section">
                <div class="menu-label">Menu</div>
                <ul class="menu-list">
                    <li class="menu-item">
                        <a href="/homepage_cliente" class="menu-link">
                            <div class="menu-icon"><i class="fas fa-home"></i></div>
                            <span>Homepage</span>
                        </a>
                    </li>
                    <li class="menu-item">
                        <a href="/ordini" class="menu-link">
                            <div class="menu-icon"><i class="fas fa-shopping-bag"></i></div>
                            <span>I miei Ordini</span>
                        </a>
                    </li>
                    <li class="menu-item">
                        <a href="/preferiti" class="menu-link">
                            <div class="menu-icon"><i class="fas fa-heart"></i></div>
                            <span>Preferiti</span>
                        </a>
                    </li>
                    <li class="menu-item">
                        <a href="/chat" class="menu-link active">
                            <div class="menu-icon"><i class="fas fa-comment-dots"></i></div>
                            <span>Assistenza</span>
                        </a>
                    </li>
                </ul>
                
                <div class="menu-label">Profilo</div>
                <ul class="menu-list">
                    <li class="menu-item">
                        <a href="/profilo" class="menu-link">
                            <div class="menu-icon"><i class="fas fa-user"></i></div>
                            <span>Il mio Profilo</span>
                        </a>
                    </li>
                    <li class="menu-item">
                        <a href="/impostazioni" class="menu-link">
                            <div class="menu-icon"><i class="fas fa-cog"></i></div>
                            <span>Impostazioni</span>
                        </a>
                    </li>
                    <li class="menu-item">
                        <a href="#" class="menu-link" id="logoutBtn">
                            <div class="menu-icon"><i class="fas fa-sign-out-alt"></i></div>
                            <span>Logout</span>
                        </a>
                    </li>
                </ul>
            </div>
            
            <div class="profile-section">
                <img src="https://source.unsplash.com/random/100x100/?person" alt="Profile" class="profile-avatar">
                <div class="profile-info">
                    <div class="profile-name" id="username">Cliente</div>
                    <div class="profile-role">Account Cliente</div>
                </div>
                <div class="profile-menu">
                    <i class="fas fa-ellipsis-v"></i>
                </div>
            </div>
        </div>
        
        <!-- Chat area -->
        <div class="chat-area">
            <!-- Chat header -->
            <div class="chat-header">
                <div class="chat-header-info">
                    <img src="https://source.unsplash.com/random/100x100/?support" alt="Operator" class="operator-avatar">
                    <div class="operator-info">
                        <div class="operator-name">Assistenza YourBite</div>
                        <div class="operator-status">
                            <div class="status-indicator"></div>
                            <span id="operatorStatus">Online</span>
                        </div>
                    </div>
                </div>
                <div class="chat-header-actions">
                    <button class="header-action-btn" title="Cerca nei messaggi">
                        <i class="fas fa-search"></i>
                    </button>
                    <button class="header-action-btn" title="Chiamata vocale">
                        <i class="fas fa-phone-alt"></i>
                    </button>
                    <button class="header-action-btn" title="Altro">
                        <i class="fas fa-ellipsis-v"></i>
                    </button>
                </div>
            </div>
            
            <!-- Chat body -->
            <div class="chat-body" id="chatBody">
                <div class="day-divider">
                    <span class="day-divider-text" id="todayDate">Oggi</span>
                </div>
                
                <div class="message-container" id="messagesContainer">
                    <!-- I messaggi saranno aggiunti qui dinamicamente -->
                </div>
            </div>
            
            <!-- Chat footer -->
            <div class="chat-footer">
                <div class="message-input-container">
                    <textarea class="message-input" id="messageInput" placeholder="Scrivi un messaggio..." rows="1"></textarea>
                    <div class="input-actions">
                        <button class="input-action-btn" title="Emoji" id="emojiBtn">
                            <i class="far fa-smile"></i>
                        </button>
                        <button class="input-action-btn" title="Allegati" id="attachBtn">
                            <i class="fas fa-paperclip"></i>
                        </button>
                    </div>
                </div>
                <button class="send-btn" id="sendBtn">
                    <i class="fas fa-paper-plane"></i>
                </button>
            </div>
            
            <!-- Emoji picker (hidden by default) -->
            <div class="emoji-picker" id="emojiPicker">
                <div class="emoji-tabs">
                    <div class="emoji-tab active"><i class="far fa-smile"></i></div>
                    <div class="emoji-tab"><i class="far fa-hand-peace"></i></div>
                    <div class="emoji-tab"><i class="fas fa-hamburger"></i></div>
                    <div class="emoji-tab"><i class="fas fa-car"></i></div>
                    <div class="emoji-tab"><i class="fas fa-heart"></i></div>
                </div>
                <div class="emoji-content">
                    <div class="emoji-group">
                        <div class="emoji-item">😊</div>
                        <div class="emoji-item">😂</div>
                        <div class="emoji-item">😍</div>
                        <div class="emoji-item">🙂</div>
                        <div class="emoji-item">😎</div>
                        <div class="emoji-item">😋</div>
                        <div class="emoji-item">🤔</div>
                        <div class="emoji-item">😐</div>
                        <div class="emoji-item">😴</div>
                        <div class="emoji-item">😆</div>
                        <div class="emoji-item">🙄</div>
                        <div class="emoji-item">😡</div>
                        <div class="emoji-item">👍</div>
                        <div class="emoji-item">👋</div>
                        <div class="emoji-item">👏</div>
                        <div class="emoji-item">🙏</div>
                        <div class="emoji-item">❤️</div>
                        <div class="emoji-item">✨</div>
                        <div class="emoji-item">🔥</div>
                        <div class="emoji-item">💯</div>
                        <div class="emoji-item">🎉</div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Imposta la data di oggi
            setTodayDate();
            
            // Inizializza il WebSocket
            initializeWebSocket();
            
            // Setup emoji picker
            setupEmojiPicker();
            
            // Setup message input
            setupMessageInput();
            
            // Setup send functionality
            setupSendButton();
            
            // Setup attachment button
            setupAttachButton();
            
            // Update username if needed
            updateUsername();
            
            // Setup logout button
            setupLogoutButton();
        });
        
        // Set today's date
        function setTodayDate() {
            const today = new Date();
            const options = { weekday: 'long', day: 'numeric', month: 'long', year: 'numeric' };
            document.getElementById('todayDate').textContent = today.toLocaleDateString('it-IT', options);
        }
        
        // Global WebSocket object
        let socket;
        let reconnectAttempts = 0;
        const maxReconnectAttempts = 5;
        const username = getUsername();
        const userType = 'cliente';
        
        // Initialize WebSocket
        function initializeWebSocket() {
            const connectionStatus = document.getElementById('connectionStatus');
            const connectionText = document.getElementById('connectionText');
            
            connectionStatus.classList.add('show');
            
            // WebSocket URL - adjust to your server configuration
            // In un'applicazione reale, usa il protocollo wss:// per connessioni sicure
            const protocol = window.location.protocol === 'https:' ? 'wss://' : 'ws://';
            const wsUrl = `${protocol}${window.location.host}/ws/chat`;
            
            // Create WebSocket connection
            socket = new WebSocket(wsUrl);
            
            // Connection opened
            socket.addEventListener('open', function(event) {
                console.log('WebSocket connection established');
                connectionText.textContent = 'Connesso';
                connectionStatus.classList.add('connected');
                connectionStatus.classList.add('show');
                
                // Reset reconnect attempts
                reconnectAttempts = 0;
                
                // Send identification message
                sendIdentification();
                
                // After a while, hide the connection status
                setTimeout(() => {
                    connectionStatus.classList.remove('show');
                }, 3000);
                
                // Load chat history
                loadChatHistory();
            });
            
            // Listen for messages
            socket.addEventListener('message', function(event) {
                const data = JSON.parse(event.data);
                console.log('Message from server:', data);
                
                switch(data.type) {
                    case 'chat_message':
                        // Handle incoming message
                        if (data.sender !== userType) {
                            addOperatorMessage(data.message, data.timestamp);
                        }
                        break;
                    
                    case 'typing':
                        // Handle typing indicator
                        if (data.sender !== userType && data.is_typing) {
                            showTypingIndicator();
                        } else if (data.sender !== userType && !data.is_typing) {
                            hideTypingIndicator();
                        }
                        break;
                        
                    case 'chat_history':
                        // Handle chat history
                        displayChatHistory(data.messages);
                        break;
                    
                    case 'operator_status':
                        // Handle operator status change
                        updateOperatorStatus(data.is_online);
                        break;
                        
                    default:
                        console.log('Unknown message type:', data.type);
                }
            });
            
            // Connection closed
            socket.addEventListener('close', function(event) {
                console.log('WebSocket connection closed');
                connectionText.textContent = 'Connessione interrotta';
                connectionStatus.classList.remove('connected');
                connectionStatus.classList.add('show');
                
                // Try to reconnect if not closed normally and max attempts not reached
                if (event.code !== 1000 && reconnectAttempts < maxReconnectAttempts) {
                    reconnectAttempts++;
                    connectionText.textContent = `Riconnessione in corso (${reconnectAttempts}/${maxReconnectAttempts})...`;
                    
                    setTimeout(() => {
                        initializeWebSocket();
                    }, 3000);
                } else if (reconnectAttempts >= maxReconnectAttempts) {
                    connectionText.textContent = 'Impossibile connettersi. Ricarica la pagina.';
                }
            });
            
            // Connection error
            socket.addEventListener('error', function(event) {
                console.error('WebSocket error:', event);
                connectionText.textContent = 'Errore di connessione';
                connectionStatus.classList.remove('connected');
                connectionStatus.classList.add('show');
            });
        }
        
        // Send identification message
        function sendIdentification() {
            if (socket && socket.readyState === WebSocket.OPEN) {
                socket.send(JSON.stringify({
                    type: 'identification',
                    user_type: userType,
                    username: username
                }));
            }
        }
        
        // Load chat history
        function loadChatHistory() {
            if (socket && socket.readyState === WebSocket.OPEN) {
                socket.send(JSON.stringify({
                    type: 'get_history'
                }));
            }
        }
        
        // Display chat history
        function displayChatHistory(messages) {
            const container = document.getElementById('messagesContainer');
            container.innerHTML = ''; // Clear existing messages
            
            if (!messages || messages.length === 0) {
                // Add a welcome message if no history
                addSystemMessage('Benvenuto nella chat di assistenza YourBite!');
                return;
            }
            
            // Add messages in chronological order
            messages.forEach(msg => {
                if (msg.sender === userType) {
                    addUserMessage(msg.message, msg.timestamp, true);
                } else if (msg.sender === 'system') {
                    addSystemMessage(msg.message, msg.timestamp);
                } else {
                    addOperatorMessage(msg.message, msg.timestamp);
                }
            });
            
            // Scroll to bottom
            scrollToBottom();
        }
        
        // Get username
        function getUsername() {
            // Try to get the username from the DOM
            const usernameEl = document.getElementById('username');
            if (usernameEl && usernameEl.textContent && usernameEl.textContent !== 'Cliente') {
                return usernameEl.textContent;
            }
            
            // Try to get from localStorage
            const savedUsername = localStorage.getItem('username');
            if (savedUsername) {
                return savedUsername;
            }
            
            // Fallback
            return 'Cliente';
        }
        
        // Update operator status
        function updateOperatorStatus(isOnline) {
            const statusText = document.getElementById('operatorStatus');
            const statusIndicator = document.querySelector('.status-indicator');
            
            if (isOnline) {
                statusText.textContent = 'Online';
                statusIndicator.style.backgroundColor = 'var(--accent-green)';
            } else {
                statusText.textContent = 'Offline';
                statusIndicator.style.backgroundColor = 'var(--text-light)';
                hideTypingIndicator();
            }
        }
        
        // Add user message
        function addUserMessage(messageText, timestamp = null, isHistory = false) {
            const container = document.getElementById('messagesContainer');
            const now = timestamp ? new Date(timestamp) : new Date();
            const timeString = formatTime(now);
            
            const messageHTML = `
                <div class="message-group user">
                    <div class="message-content">
                        <div class="message-text">${messageText}</div>
                        <div class="message-meta">
                            <span class="message-time">${timeString}</span>
                            <span class="message-status ${isHistory ? 'status-read' : 'status-sent'}">
                                <i class="${isHistory ? 'fas fa-check-double' : 'fas fa-check'}"></i>
                            </span>
                        </div>
                    </div>
                </div>
            `;
            
            container.insertAdjacentHTML('beforeend', messageHTML);
            
            // If not from history, show delivered/read status animation
            if (!isHistory) {
                const messageStatus = container.querySelector('.message-group.user:last-child .message-status');
                
                // Simulate message being delivered
                setTimeout(() => {
                    messageStatus.classList.remove('status-sent');
                    messageStatus.classList.add('status-delivered');
                    messageStatus.innerHTML = '<i class="fas fa-check-double"></i>';
                }, 1000);
                
                // Simulate message being read
                setTimeout(() => {
                    messageStatus.classList.remove('status-delivered');
                    messageStatus.classList.add('status-read');
                }, 2000);
            }
            
            scrollToBottom();
        }
        
        // Add operator message
        function addOperatorMessage(messageText, timestamp = null) {
            const container = document.getElementById('messagesContainer');
            const now = timestamp ? new Date(timestamp) : new Date();
            const timeString = formatTime(now);
            
            // Remove typing indicator if it exists
            hideTypingIndicator();
            
            const messageHTML = `
                <div class="message-group operator">
                    <div class="message-content">
                        <div class="message-text">${messageText}</div>
                        <div class="message-meta">
                            <span class="message-time">${timeString}</span>
                        </div>
                    </div>
                </div>
            `;
            
            container.insertAdjacentHTML('beforeend', messageHTML);
            scrollToBottom();
        }
        
        // Add system message
        function addSystemMessage(messageText, timestamp = null) {
            const container = document.getElementById('messagesContainer');
            
            const messageHTML = `
                <div class="message-group system">
                    <div class="message-content">
                        <div class="message-text">${messageText}</div>
                    </div>
                </div>
            `;
            
            container.insertAdjacentHTML('beforeend', messageHTML);
            scrollToBottom();
        }
        
        // Show typing indicator
        function showTypingIndicator() {
            const container = document.getElementById('messagesContainer');
            
            // Check if indicator already exists
            if (document.getElementById('typingIndicator')) return;
            
            const typingHTML = `
                <div class="typing-indicator" id="typingIndicator">
                    <div class="typing-text">Assistenza sta scrivendo</div>
                    <div class="typing-dots">
                        <div class="typing-dot"></div>
                        <div class="typing-dot"></div>
                        <div class="typing-dot"></div>
                    </div>
                </div>
            `;
            
            container.insertAdjacentHTML('beforeend', typingHTML);
            scrollToBottom();
        }
        
        // Hide typing indicator
        function hideTypingIndicator() {
            const typingIndicator = document.getElementById('typingIndicator');
            if (typingIndicator) {
                typingIndicator.remove();
            }
        }
        
        // Format time
        function formatTime(date) {
            const hours = String(date.getHours()).padStart(2, '0');
            const minutes = String(date.getMinutes()).padStart(2, '0');
            return `${hours}:${minutes}`;
        }
        
        // Send typing indicator
        let typingTimeout;
        function sendTypingStatus(isTyping) {
            if (socket && socket.readyState === WebSocket.OPEN) {
                socket.send(JSON.stringify({
                    type: 'typing',
                    is_typing: isTyping
                }));
            }
        }
        
        // Send message
        function sendMessage(messageText) {
            if (!messageText.trim()) return;
            
            if (socket && socket.readyState === WebSocket.OPEN) {
                // Add message to chat
                addUserMessage(messageText);
                
                // Send message via WebSocket
                socket.send(JSON.stringify({
                    type: 'chat_message',
                    message: messageText
                }));
                
                // Clear typing indicator
                sendTypingStatus(false);
            } else {
                // Connection closed, show error
                addSystemMessage('Errore: Impossibile inviare il messaggio. La connessione è stata interrotta.');
                
                // Show connection status
                const connectionStatus = document.getElementById('connectionStatus');
                const connectionText = document.getElementById('connectionText');
                connectionText.textContent = 'Connessione interrotta';
                connectionStatus.classList.remove('connected');
                connectionStatus.classList.add('show');
                
                // Try to reconnect
                initializeWebSocket();
            }
        }
        
        // Setup emoji picker
        function setupEmojiPicker() {
            const emojiBtn = document.getElementById('emojiBtn');
            const emojiPicker = document.getElementById('emojiPicker');
            const emojiItems = document.querySelectorAll('.emoji-item');
            const emojiTabs = document.querySelectorAll('.emoji-tab');
            
            // Toggle emoji picker
            emojiBtn.addEventListener('click', () => {
                emojiPicker.classList.toggle('show');
            });
            
            // Close emoji picker when clicking outside
            document.addEventListener('click', (e) => {
                if (!emojiBtn.contains(e.target) && !emojiPicker.contains(e.target)) {
                    emojiPicker.classList.remove('show');
                }
            });
            
            // Add emoji to input
            emojiItems.forEach(item => {
                item.addEventListener('click', () => {
                    const messageInput = document.getElementById('messageInput');
                    messageInput.value += item.innerText;
                    messageInput.focus();
                    
                    // Trigger input event to resize textarea
                    const event = new Event('input', { bubbles: true });
                    messageInput.dispatchEvent(event);
                });
            });
            
            // Switch emoji tabs
            emojiTabs.forEach(tab => {
                tab.addEventListener('click', () => {
                    emojiTabs.forEach(t => t.classList.remove('active'));
                    tab.classList.add('active');
                    // In a real app, you would load different emoji categories here
                });
            });
        }
        
        // Setup message input
        function setupMessageInput() {
            const messageInput = document.getElementById('messageInput');
            
            // Auto-resize textarea
            messageInput.addEventListener('input', function() {
                this.style.height = 'auto';
                this.style.height = (this.scrollHeight) + 'px';
                
                // Send typing indicator
                clearTimeout(typingTimeout);
                
                if (this.value.trim() !== '') {
                    sendTypingStatus(true);
                    
                                        typingTimeout = setTimeout(() => {
                        sendTypingStatus(false);
                    }, 2000);
                } else {
                    sendTypingStatus(false);
                }
            });
            
            // Send on Enter (but not with Shift+Enter)
            messageInput.addEventListener('keydown', function(e) {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    const message = this.value.trim();
                    if (message) {
                        sendMessage(message);
                        this.value = '';
                        this.style.height = 'auto';
                    }
                }
            });
        }
        
        // Setup send button
        function setupSendButton() {
            const sendBtn = document.getElementById('sendBtn');
            
            sendBtn.addEventListener('click', () => {
                const messageInput = document.getElementById('messageInput');
                const message = messageInput.value.trim();
                
                if (message) {
                    sendMessage(message);
                    messageInput.value = '';
                    messageInput.style.height = 'auto';
                    messageInput.focus();
                }
            });
        }
        
        // Setup attachment button
        function setupAttachButton() {
            const attachBtn = document.getElementById('attachBtn');
            
            attachBtn.addEventListener('click', () => {
                // In un'implementazione reale, aprirebbe un selezionatore di file
                // Per ora, mostriamo un messaggio informativo
                addSystemMessage("La funzionalità di allegati sarà disponibile presto!");
            });
        }
        
        // Scroll to bottom
        function scrollToBottom() {
            const chatBody = document.getElementById('chatBody');
            chatBody.scrollTop = chatBody.scrollHeight;
        }
        
        // Update username
        function updateUsername() {
            const usernameEl = document.getElementById('username');
            
            fetch('/api/user/info')
                .then(response => response.json())
                .then(data => {
                    if (data && data.username) {
                        usernameEl.textContent = data.username;
                        localStorage.setItem('username', data.username);
                    }
                })
                .catch(error => {
                    console.error('Error fetching username:', error);
                    // Try to get from localStorage as fallback
                    const savedUsername = localStorage.getItem('username');
                    if (savedUsername && usernameEl.textContent === 'Cliente') {
                        usernameEl.textContent = savedUsername;
                    }
                });
        }
        
        // Setup logout button
        function setupLogoutButton() {
            const logoutBtn = document.getElementById('logoutBtn');
            
            logoutBtn.addEventListener('click', function(e) {
                e.preventDefault();
                
                // Show loading overlay
                const loadingOverlay = document.createElement('div');
                loadingOverlay.style.position = 'fixed';
                loadingOverlay.style.top = '0';
                loadingOverlay.style.left = '0';
                loadingOverlay.style.width = '100%';
                loadingOverlay.style.height = '100%';
                loadingOverlay.style.backgroundColor = 'rgba(255, 255, 255, 0.8)';
                loadingOverlay.style.display = 'flex';
                loadingOverlay.style.flexDirection = 'column';
                loadingOverlay.style.justifyContent = 'center';
                loadingOverlay.style.alignItems = 'center';
                loadingOverlay.style.zIndex = '2000';
                loadingOverlay.style.backdropFilter = 'blur(5px)';
                
                const spinnerContainer = document.createElement('div');
                spinnerContainer.style.width = '60px';
                spinnerContainer.style.height = '60px';
                spinnerContainer.style.position = 'relative';
                
                const spinner = document.createElement('div');
                spinner.style.border = '4px solid rgba(0, 0, 0, 0.1)';
                spinner.style.borderTopColor = 'var(--primary)';
                spinner.style.borderRadius = '50%';
                spinner.style.width = '100%';
                spinner.style.height = '100%';
                spinner.style.animation = 'spin 1s linear infinite';
                
                const style = document.createElement('style');
                style.textContent = `
                    @keyframes spin {
                        0% { transform: rotate(0deg); }
                        100% { transform: rotate(360deg); }
                    }
                `;
                
                document.head.appendChild(style);
                spinnerContainer.appendChild(spinner);
                
                const loadingText = document.createElement('p');
                loadingText.textContent = 'Logout in corso...';
                loadingText.style.marginTop = '20px';
                loadingText.style.color = 'var(--primary)';
                loadingText.style.fontWeight = '500';
                
                loadingOverlay.appendChild(spinnerContainer);
                loadingOverlay.appendChild(loadingText);
                document.body.appendChild(loadingOverlay);
                
                // Chiudi la connessione WebSocket
                if (socket && socket.readyState === WebSocket.OPEN) {
                    socket.close(1000, "User logged out");
                }
                
                // Esegui il logout
                fetch('/logout', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                .then(response => {
                    if (response.ok) {
                        loadingText.textContent = 'Reindirizzamento...';
                        setTimeout(() => {
                            window.location.href = '/login';
                        }, 800);
                    } else {
                        throw new Error('Errore durante il logout');
                    }
                })
                .catch(error => {
                    console.error('Errore durante il logout:', error);
                    loadingText.textContent = 'Si è verificato un errore. Riprova.';
                    
                    // Add retry button
                    const retryButton = document.createElement('button');
                    retryButton.textContent = 'Riprova';
                    retryButton.style.marginTop = '15px';
                    retryButton.style.padding = '8px 20px';
                    retryButton.style.background = 'var(--primary)';
                    retryButton.style.color = 'white';
                    retryButton.style.border = 'none';
                    retryButton.style.borderRadius = 'var(--radius-sm)';
                    retryButton.style.cursor = 'pointer';
                    
                    retryButton.onclick = function() {
                        document.body.removeChild(loadingOverlay);
                        setupLogoutButton();
                    };
                    
                    loadingOverlay.appendChild(retryButton);
                });
            });
        }

        // Close WebSocket when page unloads
        window.addEventListener('beforeunload', () => {
            if (socket && socket.readyState === WebSocket.OPEN) {
                socket.close(1000, "Page unloaded");
            }
        });
    </script>
</body>
</html>